{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/04/25/Mac-M2%E6%9C%BA%E5%9E%8B%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/04/25/Mac-M2%E6%9C%BA%E5%9E%8B%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/",
            "title": "Mac M2机型开发问题",
            "date_published": "2023-04-25T13:17:33.000Z",
            "content_html": "<h3 id=\"blog环境初始化问题\"><a class=\"anchor\" href=\"#blog环境初始化问题\">#</a> Blog 环境初始化问题</h3>\n<h4 id=\"1puppeteer安装问题\"><a class=\"anchor\" href=\"#1puppeteer安装问题\">#</a> 1.puppeteer 安装问题</h4>\n<p>出现了 <code>The chromium binary is not available for arm64</code>  这个错误<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#解决办法</span><br><span class=\"line\">1.install homebrew</span><br><span class=\"line\">2.install chromium by hand</span><br><span class=\"line\">\tbrew install --cask eloston-chromium</span><br><span class=\"line\">3.install puppeteer and skip chromium installation</span><br><span class=\"line\">\tPUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1 npm i puppeteer</span><br><span class=\"line\">4.set env path in ~/.bash_profile</span><br><span class=\"line\">\texport PUPPETEER_EXECUTABLE_PATH=&#x27;/Applications/Chromium.app/Contents/MacOS/Chromium&#x27;</span><br><span class=\"line\">\tthe path is the real path that you downloaded on step 2</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2npm-install-g-全局安装npm包权限报错\"><a class=\"anchor\" href=\"#2npm-install-g-全局安装npm包权限报错\">#</a> 2.npm install -g 全局安装 npm 包权限报错</h4>\n<p>使用 npm 安装 node 模块时报错： <code>EACCES permissions errors</code> <br />\n 解决方式：手动更改 npm 的默认安装地址<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.create custom global npm dir</span><br><span class=\"line\">\tmkdir ~/.npm-global</span><br><span class=\"line\">2.config the npm to use new dir</span><br><span class=\"line\">\tnpm config set prefix &#x27;~/.npm-global&#x27;</span><br><span class=\"line\">3.open your .bash_profile file in vim,and a line code:</span><br><span class=\"line\">\texport PATH=~/.npm-global/bin:$PATH</span><br><span class=\"line\">4.update system variables.</span><br><span class=\"line\">\tsource ~/.bash_profile</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "开发",
                "Mac"
            ]
        },
        {
            "id": "http://example.com/2022/12/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "url": "http://example.com/2022/12/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "title": "正则表达式的实现",
            "date_published": "2022-12-12T11:17:35.000Z",
            "content_html": "<h4 id=\"实现正则表达式中的-和的功能\"><a class=\"anchor\" href=\"#实现正则表达式中的-和的功能\">#</a> 实现正则表达式中的 <code>.</code>  和 <code>*</code>  的功能</h4>\n<pre><code>.  匹配任意一个字符\n*  匹配0个或多个*前面一个字符\n</code></pre>\n<p>动态规范的解法：</p>\n<p>建立匹配的状态转移方程，设存在待匹配字符串 str 和模式字符串 pat， <code>dp[i][j]</code>  表示 <code>截止到str[i-1]</code>  位置的子串与截止到 <code>pat[j-1]</code>  位置的模式子串匹配的结果</p>\n<h5 id=\"边界条件\"><a class=\"anchor\" href=\"#边界条件\">#</a> 边界条件</h5>\n<p><code>dp[0][j]</code>  表示空字符串与模式子串匹配结果， <code>dp[i][0]</code>  表示字符子串与空模式子串匹配结果， <code>dp[i][j]</code>  表示空子串与空模式串匹配结果</p>\n<p><code>dp[0][0]</code>  一直为 true<br />\n <code>dp[i][0](i &gt; 0)</code>  一直为 false, 因为任意非空子串与空模式串匹配不能匹配上<br />\n <code>dp[0][j](j &gt; 0)</code>  的值需要看模式串 <code>pat[j-1]</code>  是否为 <code>*</code> ，如果是，则 <code>*</code>  可以选择匹配前一个字符 0 次，即 <code>dp[0][j] = dp[0][j-2</code> ]</p>\n<p>边界条件确认了之后，就可以缺点状态转移方程了</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if str[i-1] == pat[j-1] or &#x27;.&#x27; == pat[j-1]</span><br><span class=\"line\">\tdp[i][j] = dp[i-1][j-1]</span><br><span class=\"line\">else if pat[j-1] == &#x27;*&#x27;</span><br><span class=\"line\">\tdp[i][j] = dp[i][j-2]</span><br><span class=\"line\">\tif pat[j-2] == str[i]</span><br><span class=\"line\">\t\tdp[i][j] |= dp[i-1][j]</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2022/11/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/",
            "url": "http://example.com/2022/11/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/",
            "title": "二叉树算法整理",
            "date_published": "2022-11-30T05:25:43.000Z",
            "content_html": "<p>二叉搜索树</p>\n",
            "tags": [
                "二叉树"
            ]
        },
        {
            "id": "http://example.com/2022/08/05/Media%E6%9E%B6%E6%9E%84-%E9%9F%B3%E9%A2%91/",
            "url": "http://example.com/2022/08/05/Media%E6%9E%B6%E6%9E%84-%E9%9F%B3%E9%A2%91/",
            "title": "Media架构-音频",
            "date_published": "2022-08-05T15:46:37.000Z",
            "content_html": "<h3 id=\"1-音频应用一般架构\"><a class=\"anchor\" href=\"#1-音频应用一般架构\">#</a> 1. 音频应用一般架构</h3>\n<p>由于音频应用一般需要在后台进行播放，所以音频应用架构一般选择 C/S 架构，将播放器放在 Server 端，下面是 Android 官方推荐的架构设计模式，它使用了 MediaBrowser 和 MediaBrowserService 实现对应的客户端和服务的，之间使用 MediaSession 进行交互<br />\n<img data-src=\"http://tva3.sinaimg.cn/large/b5348f57gy1h4wbopbdj1j20ds062myc.jpg\" alt=\"音频应用架构图\" /></p>\n<h3 id=\"2server端\"><a class=\"anchor\" href=\"#2server端\">#</a> 2.Server 端</h3>\n<p>服务端 Service 使用 MediaBrowserService，</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/06/20/Android-%E7%9B%B8%E6%9C%BA%E5%AD%90%E7%B3%BB%E7%BB%9F/",
            "url": "http://example.com/2022/06/20/Android-%E7%9B%B8%E6%9C%BA%E5%AD%90%E7%B3%BB%E7%BB%9F/",
            "title": "Android 相机子系统",
            "date_published": "2022-06-20T15:42:47.000Z",
            "content_html": "<p>Android Camera 架构</p>\n<p><img data-src=\"http://tva3.sinaimg.cn/large/b5348f57gy1h3f5lczmiuj20kt0gkgqt.jpg\" alt=\"相机系统\" /></p>\n<p>第一层： Java  APP<br />\n 第二层： Framework 封装 java 层的调用；实现 native 层的 CameraService<br />\n 第三层： Camera HAL google 实现的 HIDL 标准接口，同时芯片厂商和 OEM 厂商基于 HIDL 接口实现自己的功能<br />\n第四层： Driver 相机驱动层<br />\n第五层： 各种电子、感光元件以及相机依赖的硬件</p>\n<p>类：</p>\n<p>CameraServiceClient</p>\n<p>CameraDevice  CameraProviderManager</p>\n<p>Camera3Device</p>\n<p>CameraHAL</p>\n<h2 id=\"数据\"><a class=\"anchor\" href=\"#数据\">#</a> 数据</h2>\n<h3 id=\"camerametadata\"><a class=\"anchor\" href=\"#camerametadata\">#</a> CameraMetaData</h3>\n<p>以 key-value 的形式存储数据<br />\n Camera 系统中流转的三种主要数据都是继承了 CameraMetaData</p>\n<h3 id=\"capturechractoristics-静态数据\"><a class=\"anchor\" href=\"#capturechractoristics-静态数据\">#</a> CaptureChractoristics  静态数据</h3>\n<p>相机静态配置数据：</p>\n<ul>\n<li>输入流配置</li>\n<li>输出流配置</li>\n<li>高分辨率配置</li>\n<li>高帧率配置</li>\n</ul>\n<h3 id=\"capturerequest-拍摄请求\"><a class=\"anchor\" href=\"#capturerequest-拍摄请求\">#</a> CaptureRequest  拍摄请求</h3>\n<p>有 2 种类型的请求：</p>\n<ul>\n<li>capture   非重复请求</li>\n<li>repeating   重复请求   例如：实现预览的请求可以用 repeating 请求实现</li>\n</ul>\n<p>CameraCaptureSession 管理相机连接的会话</p>\n<p>CameraCaptureSession 由 createCameraSession 方法创建</p>\n<h3 id=\"captureresult-拍摄结果\"><a class=\"anchor\" href=\"#captureresult-拍摄结果\">#</a> CaptureResult  拍摄结果</h3>\n<h2 id=\"数据流向\"><a class=\"anchor\" href=\"#数据流向\">#</a> 数据流向</h2>\n<p>CameraDevice   CameraCaptureSession    CameraManager.AvailabilityCallback</p>\n",
            "tags": [
                "Android",
                "Camera"
            ]
        },
        {
            "id": "http://example.com/2022/05/29/FFmpeg%E4%B9%8B%E9%9F%B3%E8%A7%86%E9%A2%91%E5%90%8C%E6%AD%A5/",
            "url": "http://example.com/2022/05/29/FFmpeg%E4%B9%8B%E9%9F%B3%E8%A7%86%E9%A2%91%E5%90%8C%E6%AD%A5/",
            "title": "FFmpeg之音视频同步",
            "date_published": "2022-05-28T16:13:10.000Z",
            "content_html": "<p>音视频同步问题解释之前先需要了解几个基本的音视频的概念：</p>\n<ul>\n<li>pts  渲染时间戳（Presentation TimeStamp）</li>\n<li>dts 解码时间戳 （Decode TimeStamp）</li>\n<li>fps 每秒显示的帧数（Frame Per Second）：帧率</li>\n</ul>\n<h3 id=\"音频解码\"><a class=\"anchor\" href=\"#音频解码\">#</a> 音频解码</h3>\n<p>音频解码是顺序解码，所以音频的 PTS 和 DTS 是一样的，当前解码的帧就是当前需要显示的帧。</p>\n<h3 id=\"视频解码\"><a class=\"anchor\" href=\"#视频解码\">#</a> 视频解码</h3>\n<p>在视频解码中，由于采用了双向预测的帧间压缩技术，视频帧的解码顺序和视频帧的显示顺序就不一样了。<br />\n举个简单的例子：<br />\n有 1,2,3 这三张顺序显示的图片，第 1 张图片不依赖其他图片进行解码；第二张图片依赖第一张和第三张图片进行解码；第三张图片依赖第一张图片进行解码。</p>\n<p>如果按照 1-&gt;2-&gt;3 的顺序解码，那么由于 2 需要 1 和 3 进行解码，那么 2 就会解码失败。<br />\n所以为了成功的对 1,2,3 都进行解码，就应该按照下面的顺序进行解码：1-&gt;3-&gt;2, 这个顺序就是 dts 的顺序。</p>\n<h3 id=\"音视频同步问题\"><a class=\"anchor\" href=\"#音视频同步问题\">#</a> 音视频同步问题</h3>\n<h4 id=\"1音频播放速度异常\"><a class=\"anchor\" href=\"#1音频播放速度异常\">#</a> 1. 音频播放速度异常</h4>\n<p>可能原因：<br />\n1.1 音频播放器采样率参数设置错误<br />\n如果设置的采样率大于真实采用率，那么音频播放速度会比正常速度快；如果设置的采样率小于真实采样率，那么音频播放速度会比正常速度慢。</p>\n<p>1.2 音频解码速度太快，没有做同步，需要根据真实世界时钟速度进行同步解码</p>\n<h4 id=\"2视频播放速度异常\"><a class=\"anchor\" href=\"#2视频播放速度异常\">#</a> 2. 视频播放速度异常</h4>\n<p>可能原因：<br />\n2.1 视频解码速度太快，没有进行音视频同步或者音视频同步出错。</p>\n<h3 id=\"音视频同步策略\"><a class=\"anchor\" href=\"#音视频同步策略\">#</a> 音视频同步策略</h3>\n<p>音视频同步策略有三种：</p>\n<ul>\n<li>以视频 pts 为准进行同步</li>\n<li>以音频 pts 为基准进行同步</li>\n<li>以真实世界时钟速度进行同步</li>\n</ul>\n<p>常用第二种和第三种同步策略，为什么不使用第一种，是因为人的感观是对音频信号比视频画面更敏感，如果使用视频 pts 为基准的话，能感觉到明显的音频速度变化，而我们人眼对视频画面的变化是不敏感的，只要渲染的速度达到每秒 60 帧，对人的肉眼就看不出来停顿感。</p>\n",
            "tags": [
                "音视频",
                "FFmpeg"
            ]
        },
        {
            "id": "http://example.com/2022/05/25/Android-SharedPreference%E8%A7%A3%E6%9E%90/",
            "url": "http://example.com/2022/05/25/Android-SharedPreference%E8%A7%A3%E6%9E%90/",
            "title": "Android SharedPreference解析",
            "date_published": "2022-05-24T16:02:22.000Z",
            "content_html": "<h2 id=\"contextgetsharedpreferences\"><a class=\"anchor\" href=\"#contextgetsharedpreferences\">#</a>  <code>Context.getSharedPreferences()</code></h2>\n<p>获取 <code>SharedPreferences</code>  对象<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//android.app.Context.java</span><br><span class=\"line\">@Override  </span><br><span class=\"line\">public SharedPreferences getSharedPreferences(String name, int mode) &#123;  </span><br><span class=\"line\">    return mBase.getSharedPreferences(name, mode);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mBase 是Context的实现类 ContextImpl</span><br><span class=\"line\"></span><br><span class=\"line\">//android.app.ContextImpl.java</span><br><span class=\"line\">@Override  </span><br><span class=\"line\">public SharedPreferences getSharedPreferences(String name, int mode) &#123;  </span><br><span class=\"line\">    // At least one application in the world actually passes in a null  </span><br><span class=\"line\">    // name.  This happened to work because when we generated the file name    // we would stringify it to &quot;null.xml&quot;.  Nice.    if (mPackageInfo.getApplicationInfo().targetSdkVersion &lt;  </span><br><span class=\"line\">            Build.VERSION_CODES.KITKAT) &#123;  </span><br><span class=\"line\">        if (name == null) &#123;  </span><br><span class=\"line\">            name = &quot;null&quot;;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    File file;  </span><br><span class=\"line\">    synchronized (ContextImpl.class) &#123;  </span><br><span class=\"line\">        if (mSharedPrefsPaths == null) &#123;  </span><br><span class=\"line\">            mSharedPrefsPaths = new ArrayMap&lt;&gt;();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        file = mSharedPrefsPaths.get(name);  </span><br><span class=\"line\">        if (file == null) &#123;  </span><br><span class=\"line\">\t\t\t//根据传入的name创建一个File对象</span><br><span class=\"line\">            file = getSharedPreferencesPath(name);  </span><br><span class=\"line\">            mSharedPrefsPaths.put(name, file);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return getSharedPreferences(file, mode);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@Override  </span><br><span class=\"line\">public SharedPreferences getSharedPreferences(File file, int mode) &#123;  </span><br><span class=\"line\">    SharedPreferencesImpl sp;  </span><br><span class=\"line\">    synchronized (ContextImpl.class) &#123; </span><br><span class=\"line\">\t\t//先在缓存中查找，如果没有找到对应文件的sp对象，就创建一个新的sp对象</span><br><span class=\"line\">        final ArrayMap&lt;File, SharedPreferencesImpl&gt; cache = getSharedPreferencesCacheLocked();  </span><br><span class=\"line\">        sp = cache.get(file);  </span><br><span class=\"line\">        if (sp == null) &#123;  </span><br><span class=\"line\">            checkMode(mode);  </span><br><span class=\"line\">            if (getApplicationInfo().targetSdkVersion &gt;= android.os.Build.VERSION_CODES.O) &#123;  </span><br><span class=\"line\">                if (isCredentialProtectedStorage()  </span><br><span class=\"line\">                        &amp;&amp; !getSystemService(UserManager.class)  </span><br><span class=\"line\">                                .isUserUnlockingOrUnlocked(UserHandle.myUserId())) &#123;  </span><br><span class=\"line\">                    throw new IllegalStateException(&quot;SharedPreferences in credential encrypted &quot;  </span><br><span class=\"line\">                            + &quot;storage are not available until after user is unlocked&quot;);  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">\t\t\t//创建一个新SharedPreferencesImpl对象</span><br><span class=\"line\">            sp = new SharedPreferencesImpl(file, mode);  </span><br><span class=\"line\">            cache.put(file, sp);  </span><br><span class=\"line\">            return sp;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    if ((mode &amp; Context.MODE_MULTI_PROCESS) != 0 ||  </span><br><span class=\"line\">        getApplicationInfo().targetSdkVersion &lt; android.os.Build.VERSION_CODES.HONEYCOMB) &#123;  </span><br><span class=\"line\">        // If somebody else (some other process) changed the prefs  </span><br><span class=\"line\">        // file behind our back, we reload it.  This has been the        // historical (if undocumented) behavior.        sp.startReloadIfChangedUnexpectedly();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return sp;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><code>SharedPreferences</code>  是一个接口，实现类是 <code>SharedPreferencesImpl</code> ,</p>\n<h2 id=\"sharedpreferenceseditor\"><a class=\"anchor\" href=\"#sharedpreferenceseditor\">#</a>  <code>SharedPreferences.Editor</code></h2>\n<p><code>sp编辑器</code> ，用来操作修改 sp 中的数据</p>\n<h3 id=\"commit\"><a class=\"anchor\" href=\"#commit\">#</a>  <code>commit</code></h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//android.app.SharedPreferencesImpl$EditorImpl</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"> public final class EditorImpl implements Editor &#123;</span><br><span class=\"line\"> \t//存储本次修改的键值</span><br><span class=\"line\">\tprivate final Map&lt;String, Object&gt; mModified = new HashMap&lt;&gt;();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override  </span><br><span class=\"line\">\tpublic boolean commit() &#123;  </span><br><span class=\"line\">    \tlong startTime = 0;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    \tMemoryCommitResult mcr = commitToMemory();  </span><br><span class=\"line\">  </span><br><span class=\"line\">    \tSharedPreferencesImpl.this.enqueueDiskWrite(  </span><br><span class=\"line\">        \tmcr, null /* sync write on this thread okay */);  </span><br><span class=\"line\">    \ttry &#123;  </span><br><span class=\"line\">\t\t\t//如果没有执行mcr.setDiskWriteResult();那么mcr.writtenToDiskLatch的state&gt;0，调用await会进入挂起状态，走commit方法时，在enqueueDiskWrite这个方法中已经执行了setDiskWriteResult，所以这里不会阻塞，直接返回结果</span><br><span class=\"line\">        \tmcr.writtenToDiskLatch.await();  </span><br><span class=\"line\">    \t&#125; catch (InterruptedException e) &#123;  </span><br><span class=\"line\">        \treturn false;  </span><br><span class=\"line\">    \t&#125; finally &#123;  </span><br><span class=\"line\">    \t&#125;  </span><br><span class=\"line\">    \tnotifyListeners(mcr);  </span><br><span class=\"line\">    \treturn mcr.writeToDiskResult;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> private void enqueueDiskWrite(final MemoryCommitResult mcr,  </span><br><span class=\"line\">                              final Runnable postWriteRunnable) &#123;  </span><br><span class=\"line\">\t\t\t\t\t\t\t  </span><br><span class=\"line\">\t//是否是执行同步提交</span><br><span class=\"line\">    final boolean isFromSyncCommit = (postWriteRunnable == null);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    final Runnable writeToDiskRunnable = new Runnable() &#123;  </span><br><span class=\"line\">            @Override  </span><br><span class=\"line\">            public void run() &#123;  </span><br><span class=\"line\">                synchronized (mWritingToDiskLock) &#123;  </span><br><span class=\"line\">                    writeToFile(mcr, isFromSyncCommit);  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                synchronized (mLock) &#123;  </span><br><span class=\"line\">                    mDiskWritesInFlight--;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                if (postWriteRunnable != null) &#123;  </span><br><span class=\"line\">                    postWriteRunnable.run();  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Typical #commit() path with fewer allocations, doing a write on  </span><br><span class=\"line\">    // the current thread.    </span><br><span class=\"line\">\tif (isFromSyncCommit) &#123;  </span><br><span class=\"line\">        boolean wasEmpty = false;  </span><br><span class=\"line\">        synchronized (mLock) &#123;  </span><br><span class=\"line\">            wasEmpty = mDiskWritesInFlight == 1;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        if (wasEmpty) &#123;  </span><br><span class=\"line\">            writeToDiskRunnable.run();  </span><br><span class=\"line\">            return;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    QueuedWork.queue(writeToDiskRunnable, !isFromSyncCommit);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//写入修改到文件</span><br><span class=\"line\">private void writeToFile(MemoryCommitResult mcr, boolean isFromSyncCommit) &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Attempt to write the file, delete the backup and return true as atomically as  </span><br><span class=\"line\">    // possible.  If any exception occurs, delete the new file; next time we will restore    </span><br><span class=\"line\">\t// from the backup.    </span><br><span class=\"line\">\ttry &#123;  </span><br><span class=\"line\">        FileOutputStream str = createFileOutputStream(mFile);  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//将本次修改数据写入到文件中</span><br><span class=\"line\">        XmlUtils.writeMapXml(mcr.mapToWriteToDisk, str);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        writeTime = System.currentTimeMillis();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        FileUtils.sync(str);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        fsyncTime = System.currentTimeMillis();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        str.close();  </span><br><span class=\"line\">        ContextImpl.setFilePermissionsFromMode(mFile.getPath(), mMode, 0);  </span><br><span class=\"line\">  </span><br><span class=\"line\">       </span><br><span class=\"line\">        mcr.setDiskWriteResult(true, true);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        long fsyncDuration = fsyncTime - writeTime;  </span><br><span class=\"line\">        mSyncTimes.add((int) fsyncDuration);  </span><br><span class=\"line\">        mNumSync++;  </span><br><span class=\"line\"></span><br><span class=\"line\">        return;  </span><br><span class=\"line\">    &#125; catch (XmlPullParserException e) &#123;  </span><br><span class=\"line\">        Log.w(TAG, &quot;writeToFile: Got exception:&quot;, e);  </span><br><span class=\"line\">    &#125; catch (IOException e) &#123;  </span><br><span class=\"line\">        Log.w(TAG, &quot;writeToFile: Got exception:&quot;, e);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Clean up an unsuccessfully written file  </span><br><span class=\"line\">    if (mFile.exists()) &#123;  </span><br><span class=\"line\">        if (!mFile.delete()) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Couldn&#x27;t clean up partially-written file &quot; + mFile);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    mcr.setDiskWriteResult(false, false);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面的流程可以看出， <code>commit</code>  调用中没有创建子线程去执行，而是在当前线程去执行，所以 <code>commit</code>  会产生 IO 调用，如果写入数据太多，会对主线程由影响，所以最好将 <code>commit</code>  放在子线程中去执行。</p>\n<p>.</p>\n<h3 id=\"apply\"><a class=\"anchor\" href=\"#apply\">#</a> apply</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Override  </span><br><span class=\"line\">public void apply() &#123;  </span><br><span class=\"line\">    final long startTime = System.currentTimeMillis();  </span><br><span class=\"line\">  </span><br><span class=\"line\">    final MemoryCommitResult mcr = commitToMemory();  </span><br><span class=\"line\">    final Runnable awaitCommit = new Runnable() &#123;  </span><br><span class=\"line\">            @Override  </span><br><span class=\"line\">            public void run() &#123;  </span><br><span class=\"line\">                try &#123;  </span><br><span class=\"line\">                    mcr.writtenToDiskLatch.await();  </span><br><span class=\"line\">                &#125; catch (InterruptedException ignored) &#123;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    QueuedWork.addFinisher(awaitCommit);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    Runnable postWriteRunnable = new Runnable() &#123;  </span><br><span class=\"line\">            @Override  </span><br><span class=\"line\">            public void run() &#123;  </span><br><span class=\"line\">                awaitCommit.run();  </span><br><span class=\"line\">                QueuedWork.removeFinisher(awaitCommit);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t//第二个参数传了一个runnable对象所以不会走commit的流程，会执行</span><br><span class=\"line\">    SharedPreferencesImpl.this.enqueueDiskWrite(mcr, postWriteRunnable);  </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">\tnotifyListeners(mcr);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面可以看到<br />\n <code>SharedPreferencesImpl.this.enqueueDiskWrite(mcr, postWriteRunnable); </code> <br />\n第二个参数传了一个 runnable 对象所以不会走 commit 的流程， <code>enqueueDiskWrite</code>  最后会执行下面的代码<br />\n <code>QueuedWork.queue(writeToDiskRunnable, !isFromSyncCommit);  </code></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//sholdDeley 为true，sCanDelay也为true，除非在执行Activity销毁时，会变成false,这里会延迟100ms然后执行MSG_RUN</span><br><span class=\"line\">public static void queue(Runnable work, boolean shouldDelay) &#123;  </span><br><span class=\"line\">    Handler handler = getHandler();  </span><br><span class=\"line\">  </span><br><span class=\"line\">    synchronized (sLock) &#123;  </span><br><span class=\"line\">        sWork.add(work);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        if (shouldDelay &amp;&amp; sCanDelay) &#123;  </span><br><span class=\"line\">            handler.sendEmptyMessageDelayed(QueuedWorkHandler.MSG_RUN, DELAY);  </span><br><span class=\"line\">        &#125; else &#123;  </span><br><span class=\"line\">            handler.sendEmptyMessage(QueuedWorkHandler.MSG_RUN);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//android.app.QueueWork.java</span><br><span class=\"line\">private static class QueuedWorkHandler extends Handler &#123;  </span><br><span class=\"line\">    static final int MSG_RUN = 1;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    QueuedWorkHandler(Looper looper) &#123;  </span><br><span class=\"line\">        super(looper);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    public void handleMessage(Message msg) &#123;  </span><br><span class=\"line\">        if (msg.what == MSG_RUN) &#123;  </span><br><span class=\"line\">            processPendingWork();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">private static void processPendingWork() &#123;  </span><br><span class=\"line\">    long startTime = 0;  </span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized (sProcessingWork) &#123;  </span><br><span class=\"line\">        LinkedList&lt;Runnable&gt; work;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        synchronized (sLock) &#123;  </span><br><span class=\"line\">\t\t\t//sWork中就是QueueWork.queue中的runnable对象</span><br><span class=\"line\">            work = (LinkedList&lt;Runnable&gt;) sWork.clone();  </span><br><span class=\"line\">            sWork.clear();  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Remove all msg-s as all work will be processed now  </span><br><span class=\"line\">            getHandler().removeMessages(QueuedWorkHandler.MSG_RUN);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        if (work.size() &gt; 0) &#123;  </span><br><span class=\"line\">            for (Runnable w : work) &#123;  </span><br><span class=\"line\">\t\t\t\t//遍历执行sWork中的任务</span><br><span class=\"line\">                w.run();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>QueueWorkHandler</code>  这个线程中就会执行上面方法 <code>enqueueDiskWrite</code>  中创建的 <code>writeToDiskRunnable</code>  对象<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Runnable writeToDiskRunnable = new Runnable() &#123;  </span><br><span class=\"line\">        @Override  </span><br><span class=\"line\">        public void run() &#123;  </span><br><span class=\"line\">            synchronized (mWritingToDiskLock) &#123;  </span><br><span class=\"line\">                writeToFile(mcr, isFromSyncCommit);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            synchronized (mLock) &#123;  </span><br><span class=\"line\">                mDiskWritesInFlight--;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            if (postWriteRunnable != null) &#123;  </span><br><span class=\"line\">                postWriteRunnable.run();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure><br />\n 执行 <code>writeToFile</code>   进行数据写入，</p>\n<p>执行 <code>apply</code>  中创建的 <code>postWriteRunnable</code>  对象<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Runnable postWriteRunnable = new Runnable() &#123;  </span><br><span class=\"line\">        @Override  </span><br><span class=\"line\">        public void run() &#123;  </span><br><span class=\"line\">            awaitCommit.run();  </span><br><span class=\"line\">            QueuedWork.removeFinisher(awaitCommit);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;;  </span><br></pre></td></tr></table></figure><br />\n 执行 <code>awaitCommit</code>  任务<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Runnable awaitCommit = new Runnable() &#123;  </span><br><span class=\"line\">         @Override  </span><br><span class=\"line\">         public void run() &#123;  </span><br><span class=\"line\">             try &#123;  </span><br><span class=\"line\">                 mcr.writtenToDiskLatch.await();  </span><br><span class=\"line\">             &#125; catch (InterruptedException ignored) &#123;  </span><br><span class=\"line\">             &#125;  </span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\">     &#125;;  </span><br></pre></td></tr></table></figure><br />\n 执行 <code>mcr.writtenToDiskLatch.await();</code> ，因为 <code>mcr.writtenToDiskLatch</code>  已经在 <code>wrinteToFile</code>  中执行了 <code>mcr.setDiskWriteResult</code> ，所以 state 已经变成了 0，不会挂起当前的 (QueueWrok) 线程</p>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "http://example.com/2022/05/22/OpenSLES%E7%AE%80%E4%BB%8B/",
            "url": "http://example.com/2022/05/22/OpenSLES%E7%AE%80%E4%BB%8B/",
            "title": "OpenSLES",
            "date_published": "2022-05-22T15:20:23.000Z",
            "content_html": "<p>接受 pcm 原始音频脉冲数据</p>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"object-sl对象\"><a class=\"anchor\" href=\"#object-sl对象\">#</a>  <code>Object</code>  SL 对象</h3>\n<p>代码中的 <code>SLObjectItf</code>  类型，<br />\n每个对象都有三种状态：</p>\n<ul>\n<li>Unrelalized (initial state) : 不可用状态 ， 对接是活跃的，但是还没有分配资源，处于不可用状态，对象内接口的方法不能使用。</li>\n<li>Realized ：可用状态。对象资源已分配，可以使用对象</li>\n<li>Suspended (optional state): 挂起状态，所需资源比可用状态要少，但是在挂起期间保留了状态信息。当资源不足时，系统可以选择将对象状态改成挂起状态或是不可用状态</li>\n</ul>\n<p><img data-src=\"http://tvax2.sinaimg.cn/large/b5348f57gy1h2iqkwi4e2j20od0d2jsy.jpg\" alt=\"OpenSLES Object state diagram\" /></p>\n<h3 id=\"interface-接口\"><a class=\"anchor\" href=\"#interface-接口\">#</a>  <code>Interface</code>  接口</h3>\n<p>由特定对象提供的相关特性集合的抽象，在代码中一般为 <code>SLxxxxItf</code> . 接口必须由特定对象进行生成。</p>\n<h3 id=\"一般使用方法\"><a class=\"anchor\" href=\"#一般使用方法\">#</a> 一般使用方法</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明对象和接口</span><br><span class=\"line\">SLObjectItf object = nullptr;</span><br><span class=\"line\">SLxxxxItf itf = nullptr;</span><br><span class=\"line\">// init object创建对象</span><br><span class=\"line\">...</span><br><span class=\"line\">// 初始化对象，分配资源</span><br><span class=\"line\">(*object)-&gt;Realize(object,SL_BOOLEAN_FALSE);</span><br><span class=\"line\">//check result</span><br><span class=\"line\">...</span><br><span class=\"line\">// 初始化接口，第二个参数指定接口类型</span><br><span class=\"line\">(*object)-&gt;GetInterface(object,SL_IID_XXX,&amp;itf);</span><br><span class=\"line\">...</span><br><span class=\"line\">//接口可以使用了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>可以理解为一个对象代表了一个资源和状态，它内部有一系列的接口，对象本身不提供操作，而是由对象内部的接口提供方法调用。</p>\n<h2 id=\"opensles使用流程\"><a class=\"anchor\" href=\"#opensles使用流程\">#</a> OpenSLES 使用流程：</h2>\n<h3 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h3>\n<p>Android 环境配置，在 CMakeLists 中将 OpenSLES 加入到目标库链接库列表中<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">CMakeLists.txt</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(nativelib  </span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t....        </span><br><span class=\"line\">\t\tOpenSLES  </span><br><span class=\"line\">        $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>\n<p>需要在头文件中加上引用<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opensles_player.h</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;SLES/OpenSLES.h&gt;  </span><br><span class=\"line\">#include &lt;SLES/OpenSLES_Android.h&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<p>先看一个图<br />\n<img data-src=\"http://tva2.sinaimg.cn/large/b5348f57gy1h2iss734x0j20uc0ckq5i.jpg\" alt=\"OpenSLES audio flow diagram\" /></p>\n<h4 id=\"1初始化引擎\"><a class=\"anchor\" href=\"#1初始化引擎\">#</a> 1. 初始化引擎</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">SLObjectItf m_engine_obj = nullptr;  </span><br><span class=\"line\">SLEngineItf m_engine = nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::CreateEngine() &#123;  </span><br><span class=\"line\">    SLresult lresult =slCreateEngine(&amp;m_engine_obj,0, nullptr,0, nullptr, nullptr);  </span><br><span class=\"line\">    if(CheckError(lresult, &quot;Engine&quot;)) return false;  </span><br><span class=\"line\">    lresult = asInterface(m_engine_obj)-&gt;Realize(m_engine_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;EngineRealize&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    lresult = asInterface(m_engine_obj)-&gt;GetInterface(m_engine_obj,SL_IID_ENGINE,&amp;m_engine);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2初始化合成器\"><a class=\"anchor\" href=\"#2初始化合成器\">#</a> 2. 初始化合成器</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 合成器对象</span><br><span class=\"line\">SLObjectItf m_output_mix_obj = nullptr;</span><br><span class=\"line\">// 环境混响接口</span><br><span class=\"line\">SLEnvironmentalReverbItf m_output_mix_evn_reverb = nullptr;  </span><br><span class=\"line\">// 环境混响设置参数</span><br><span class=\"line\">SLEnvironmentalReverbSettings m_output_mix_evn_settings = SL_I3DL2_ENVIRONMENT_PRESET_DEFAULT;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::CreateOutputMixer() &#123;  </span><br><span class=\"line\">    const SLInterfaceID mids[1] = &#123;SL_IID_ENVIRONMENTALREVERB&#125;;  </span><br><span class=\"line\">    const SLboolean mreq[1] = &#123;SL_BOOLEAN_FALSE&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t//使用Engine接口创建合成器对象</span><br><span class=\"line\">    SLresult lresult = asInterface(m_engine)-&gt;CreateOutputMix(m_engine,&amp;m_output_mix_obj,1,mids,mreq);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Output Mix&quot;)) return false;  </span><br><span class=\"line\">  \t//合成器对象初始化</span><br><span class=\"line\">    lresult = asInterface(m_output_mix_obj)-&gt;Realize(m_output_mix_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Mix Realize&quot;)) return false;  </span><br><span class=\"line\">  \t//使用合成器对象获取环境混响接口</span><br><span class=\"line\">    lresult = asInterface(m_output_mix_obj)-&gt;GetInterface(m_output_mix_obj,SL_IID_ENVIRONMENTALREVERB,&amp;m_output_mix_evn_reverb);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Mix Env Reverb&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t//如果环境混响接口获取成功，设置环境混响属性为上面定义的默认值</span><br><span class=\"line\">    if(lresult == SL_RESULT_SUCCESS)&#123;\t  </span><br><span class=\"line\">        (*m_output_mix_evn_reverb)-&gt;SetEnvironmentalReverbProperties(m_output_mix_evn_reverb,&amp;m_output_mix_evn_settings);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3初始化并配置播放器对象\"><a class=\"anchor\" href=\"#3初始化并配置播放器对象\">#</a> 3. 初始化并配置播放器对象</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//播放器对象</span><br><span class=\"line\">SLObjectItf m_pcm_player_obj = nullptr;</span><br><span class=\"line\">//播放器接口</span><br><span class=\"line\">SLPlayItf m_pcm_player = nullptr;</span><br><span class=\"line\">//音量接口</span><br><span class=\"line\">SLVolumeItf m_pcm_volume = nullptr;  </span><br><span class=\"line\">  </span><br><span class=\"line\">// Android缓冲区队列接口</span><br><span class=\"line\">SLAndroidSimpleBufferQueueItf m_pcm_buffer = nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::ConfigPlayer() &#123;          </span><br><span class=\"line\">    SLDataLocator_AndroidSimpleBufferQueue android_queue =&#123;SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE,SL_QUEUE_BUFFER_COUNT&#125;;  </span><br><span class=\"line\">\t// 定义PCM数据格式</span><br><span class=\"line\">    SLDataFormat_PCM pcm = &#123;  </span><br><span class=\"line\">SL_DATAFORMAT_PCM,  </span><br><span class=\"line\">(SLuint32)2,  </span><br><span class=\"line\">SL_SAMPLINGRATE_44_1,  </span><br><span class=\"line\">SL_PCMSAMPLEFORMAT_FIXED_16,  </span><br><span class=\"line\">SL_PCMSAMPLEFORMAT_FIXED_16,  </span><br><span class=\"line\">SL_SPEAKER_FRONT_LEFT|SL_SPEAKER_FRONT_RIGHT,  </span><br><span class=\"line\">SL_BYTEORDER_LITTLEENDIAN  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    SLDataSource slDataSource =&#123;&amp;android_queue,&amp;pcm&#125;;  </span><br><span class=\"line\">    SLDataLocator_OutputMix outputMix = &#123;SL_DATALOCATOR_OUTPUTMIX,m_output_mix_obj&#125;;  </span><br><span class=\"line\">    SLDataSink dataSink = &#123;&amp;outputMix, nullptr&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    SLInterfaceID ids[3] = &#123;SL_IID_BUFFERQUEUE,SL_IID_EFFECTSEND,SL_IID_VOLUME&#125;;  </span><br><span class=\"line\">    SLboolean reqs[3] = &#123;SL_BOOLEAN_TRUE,SL_BOOLEAN_TRUE,SL_BOOLEAN_TRUE,&#125;;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">  \t// 通过Engine接口创建音频播放器对象</span><br><span class=\"line\">    SLresult  lresult = asInterface(m_engine)-&gt;CreateAudioPlayer(m_engine,&amp;m_pcm_player_obj,&amp;slDataSource,&amp;dataSink,3,ids,reqs);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Create Audio Player&quot;)) return false;  </span><br><span class=\"line\">  \t// 初始化音频播放器对象</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;Realize(m_pcm_player_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player Realize&quot;)) return false;  </span><br><span class=\"line\">  \t// 使用音频播放器对象获取播放接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_PLAY,&amp;m_pcm_player);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t// 使用音频播放器对象获取缓冲区队列接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_BUFFERQUEUE,&amp;m_pcm_buffer);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Buffer GetInterface&quot;)) return false;  </span><br><span class=\"line\">  \t</span><br><span class=\"line\">\t// 缓冲区队列注册缓冲区数据可用回调接口</span><br><span class=\"line\">    lresult = (*m_pcm_buffer)-&gt;RegisterCallback(m_pcm_buffer,sReadPcmBufferCbFun,this);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Buffer RegisterCallback&quot;)) return false;  </span><br><span class=\"line\">  \t</span><br><span class=\"line\">  \t// 使用音频播放器对象获取音量接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_VOLUME,&amp;m_pcm_volume);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player Volume  GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    LOGD(TAG,&quot;OpenSL ES init success&quot;);  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"播放\"><a class=\"anchor\" href=\"#播放\">#</a> 播放</h3>\n<p>创建一个播放线程，<br />\n解码器将解码数据 push 到 PCM 数据缓冲队列中，通知播放器线程启动播放</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">void createThread()&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tstd::thread t = std::thread(cb.render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">void cb(OpenSLRender *render)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Android",
                "多媒体",
                "OpenSLES"
            ]
        },
        {
            "id": "http://example.com/2022/05/11/Cmake%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2022/05/11/Cmake%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Cmake的使用",
            "date_published": "2022-05-10T16:00:53.000Z",
            "content_html": "<p>在 Android Studio 中使用 Cmake 来构建 C,C++ 应用</p>\n<p>今天尝试了学习使用 ffmpeg 来编写播放器，需要使用 C,C++ 来编写代码，所有学习一下 Cmake 的使用。</p>\n<p>Cmake 是一个开源，跨平台的工具，被用来构建、测试、打包软件。Cmake 使用了简单的和平台、编译器无关的配置文件，来生成当前平台的软件、链接库。</p>\n<h2 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> 用法</h2>\n<p>举个栗子：<br />\n我有一个 jni 接口，Java 层调用这个接口，返回一个字符串 <code>hello Cmake</code></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libnative2/src/main/cpp/nativelib.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;jni.h&gt;  </span><br><span class=\"line\">#include &lt;string&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">extern &quot;C&quot; JNIEXPORT jstring JNICALL  </span><br><span class=\"line\">Java_com_xzq_nativelib2_NativeLib_stringFromJNI(  </span><br><span class=\"line\">        JNIEnv* env,  </span><br><span class=\"line\">        jobject /* this */) &#123;  </span><br><span class=\"line\">    std::string hello = &quot;hello Cmake&quot;;  </span><br><span class=\"line\">    return env-&gt;NewStringUTF(hello.c_str());  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 这个 cpp 文件对应的 java 类是 com/xzq/nativelib2/NativeLib.kt 这个类</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libnative2/src/main/kotlin/com/xzq/nativelib2/NativeLib.kt</span><br><span class=\"line\"></span><br><span class=\"line\">package com.xzq.nativelib2  </span><br><span class=\"line\">  </span><br><span class=\"line\">class NativeLib &#123;  </span><br><span class=\"line\">  \t//external对应的是Java中的native方法</span><br><span class=\"line\">\texternal fun stringFromJNI(): String  </span><br><span class=\"line\">  </span><br><span class=\"line\">    companion object &#123;  </span><br><span class=\"line\">        // Used to load the &#x27;nativelib2&#x27; library on application startup.  </span><br><span class=\"line\">        init &#123;</span><br><span class=\"line\">\t\t\t//它会去加载名为libnativelib2.so的动态库文件</span><br><span class=\"line\">            System.loadLibrary(&quot;nativelib2&quot;)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我想要将这个 cpp 编译成 so 文件 <code>libnativelib2.so</code> ，在 app 模块中 MainActivity 中去调用 NativeLib 接口去访问本地 cpp 代码。</p>\n<p>Cmake 有两种用法：gradle 配置和命令行</p>\n<h3 id=\"1gradle配置\"><a class=\"anchor\" href=\"#1gradle配置\">#</a> 1.gradle 配置</h3>\n<p>CMake 可以通过 android build tool 脚本进行配置，在启动 gradle 构建后自动生成对应的文件。</p>\n<p>1. 在 <code>android</code>  配置块中将 gradle 链接到你的 CMake 脚本<br />\n 2. 在 <code>defaultConfig</code>  配置块中可以指定 CMake 可选的参数 (args) 和标记 (flags)<br />\n 3. 在 <code>productFlavor</code>  中针对不同产品来替换对应属性</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;  </span><br><span class=\"line\">    id &#x27;com.android.library&#x27;  </span><br><span class=\"line\">    or</span><br><span class=\"line\">\tid &#x27;com.android.application&#x27;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;  ...  </span><br><span class=\"line\">\tdefaultConfig &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\tbuildTypes &#123;...&#125;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tproductFlavors &#123;    </span><br><span class=\"line\">\t\t...    </span><br><span class=\"line\">\t\tcreate(&quot;demo&quot;) &#123; </span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t\texternalNativeBuild &#123;</span><br><span class=\"line\">\t\t\t\tcmake &#123;     </span><br><span class=\"line\">\t\t\t\t\t... </span><br><span class=\"line\">\t\t\t\t\t// 指定gradle只编译target指定的模块。如果不指定target，那么CMake配置中的所有模块都会被进行编译和打包。</span><br><span class=\"line\">\t\t\t\t\ttargets += listOf(&quot;native-lib-demo&quot;,                 </span><br><span class=\"line\">\t\t\t\t     //可执行文件是可选的，一般情况，仅编译动态库文件能满足要求。\t</span><br><span class=\"line\">\t\t\t\t\t&quot;my-executible-demo&quot;)       </span><br><span class=\"line\">\t\t\t\t&#125;      </span><br><span class=\"line\">\t\t\t&#125;   </span><br><span class=\"line\">\t\t&#125;    </span><br><span class=\"line\">\t\tcreate(&quot;paid&quot;) &#123;     </span><br><span class=\"line\">\t\t\t... </span><br><span class=\"line\">\t\t\texternalNativeBuild &#123; </span><br><span class=\"line\">\t\t\t\tcmake &#123;     </span><br><span class=\"line\">\t\t\t\t\t... </span><br><span class=\"line\">\t\t\t\t\ttargets += listOf(&quot;native-lib-paid&quot;,      </span><br><span class=\"line\">\t\t\t\t\t&quot;my-executible-paid&quot;)     </span><br><span class=\"line\">\t\t\t\t&#125;     </span><br><span class=\"line\">\t\t\t&#125;   </span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 本地编译配置，可以配置ndk-bundle和CMake</span><br><span class=\"line\">\texternalNativeBuild &#123;    </span><br><span class=\"line\">\t\t//CMake编译配置    </span><br><span class=\"line\">\t\tcmake &#123;   </span><br><span class=\"line\">\t\t\t//指定CMakeLists.txt文件路径</span><br><span class=\"line\">\t\t\tpath = file(&quot;CMakeLists.txt&quot;)    </span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2命令行\"><a class=\"anchor\" href=\"#2命令行\">#</a> 2. 命令行</h3>\n<p>使用命令行方式编译本地代码，<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake \\</span><br><span class=\"line\">-DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake \\    </span><br><span class=\"line\">-DANDROID_ABI=$ABI \\    </span><br><span class=\"line\">-DANDROID_PLATFORM=android-$MINSDKVERSION \\    </span><br><span class=\"line\">$OTHER_ARGS</span><br></pre></td></tr></table></figure></p>\n<p>上面命令行中几个参数的含义：</p>\n<ul>\n<li>-DCMAKE_TOLLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake   指定 ndk 中 CMake 编译工具链文件地址</li>\n<li>-DANDROID_ABI=$ABI   指定目标平台的应用程序二进制接口    2022 年 最常见的应该是 arm64-v8a</li>\n<li>-DANDROID_PLATFORM=android-$MINSDKVERSION  指定应用或库支持的最低 Android 平台版本，例如 android-31,android-29</li>\n</ul>\n<p>还有更多的参数可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vbmRrL2d1aWRlcy9jbWFrZT9obD16aC1jbiNjb21tYW5kLWxpbmVfMg==\"> Android 指南 - CMake</span></p>\n<h2 id=\"cmakeliststxt-配置文件编写\"><a class=\"anchor\" href=\"#cmakeliststxt-配置文件编写\">#</a> CMakeLists.txt 配置文件编写</h2>\n<p>CMake 的执行已经知道了，但是我们没讲到如何将 cpp 文件编译成可执行文件或是库文件，CMakeLists.txt 就是用来告诉 CMake, 要如何编译，按照什么规则进行编译，编译需要使用的依赖项目，好像很类似与 Makefile 文件。下面是一个栗子：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定了Cmake的最小支持版本</span><br><span class=\"line\">cmake_minimum_required(VERSION 3.10.2)  </span><br><span class=\"line\">  </span><br><span class=\"line\">#设置这个Cmake项目名，可以通过变量PROJECT_NAME进行访问</span><br><span class=\"line\">  </span><br><span class=\"line\">project(&quot;nativelib2&quot;)  </span><br><span class=\"line\">  </span><br><span class=\"line\">#创建并命名一个库</span><br><span class=\"line\">add_library( </span><br><span class=\"line\">\t\t# 设置这个库的名称  </span><br><span class=\"line\">        nativelib2  </span><br><span class=\"line\">  </span><br><span class=\"line\">        # 这个生成的库的类型，静态库，动态库等 </span><br><span class=\"line\">        SHARED  </span><br><span class=\"line\">  </span><br><span class=\"line\">        # 指定库的源文件相对路径，当在cpp中新增了文件中，需要在这个进行声明，cmake才会将新文件打包进库中。除了可以指定cpp源文件，还可以指定库文件路径</span><br><span class=\"line\">        nativelib2.cpp)  </span><br><span class=\"line\">  </span><br><span class=\"line\"># 搜索ndk环境中的库并自定义命名路径变量</span><br><span class=\"line\">find_library( </span><br><span class=\"line\">\t\t# 定义变量log-lib存储log这个库的路径</span><br><span class=\"line\">        log-lib  </span><br><span class=\"line\">  </span><br><span class=\"line\">        # 指定ndk环境中库的名称     </span><br><span class=\"line\">\t\tlog)  </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">#指定所有需要被链接到目标库的库名称  </span><br><span class=\"line\">target_link_libraries(</span><br><span class=\"line\">\t\t# 目标库</span><br><span class=\"line\">        nativelib2  </span><br><span class=\"line\">  \t\t</span><br><span class=\"line\">\t\t#被链接的库，可以新增多个库名称</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">     \t$&#123;log-lib&#125;)</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure></p>\n<p>配置好了之后，我们直接使用 Android Studio 编译安装 apk，打开 app，能看到打印成功<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2022-05-11 01:25:51.546 20065-20065/com.luffy.mulmedia D/NavigationActivity: stringFromJNI2 hello Cmake</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h2>\n<p>我在学习过程中发现，如果 Android Studio 项目存在多个模块，如果有一个模块需要设置 cmake 的 abiFilter  为 armeabi-v7a，那么每一个模块都要设置 abiFilter，不然就会存在找不到 so 的情况。<br />\n我猜测，可能是因为如果某个模块不设置，那么就会在最终的 apk 的 jniLibs 中创建默认的 arm64-v8a 文件夹，然后运行中，发现了有 arm64-v8a 的文件夹，那么就只会在这个路径下搜索全部的 so 文件；又由于其他指定了 abiFilter 的模块会编译出指定的 armeabi-v7a 架构的文件，所有在 arm64-v8a 中找不到，最终抛出异常。如果有大佬知道原因的话可以告诉我一下。</p>\n",
            "tags": [
                "Android",
                "Cmake"
            ]
        },
        {
            "id": "http://example.com/2022/04/23/%E6%95%B0%E5%AD%97%E7%9A%84%E7%BF%BB%E8%BD%AC/",
            "url": "http://example.com/2022/04/23/%E6%95%B0%E5%AD%97%E7%9A%84%E7%BF%BB%E8%BD%AC/",
            "title": "数字的翻转",
            "date_published": "2022-04-23T09:02:25.000Z",
            "content_html": "<p>最近遇到了几道算法题，都涉及到了如何将一个整形的数字进行翻转，在这里记录一下数字翻转的代码的模板</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int reverseNum(int x) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//记录最后翻转后的值</span><br><span class=\"line\">        int revert = 0;</span><br><span class=\"line\">\t\t//记录从x中从右往左遍历得到的值</span><br><span class=\"line\">        int b = 0;</span><br><span class=\"line\">\t\t//当x的值为0时表明已经遍历完成</span><br><span class=\"line\">        while(x &gt;0)&#123;</span><br><span class=\"line\">\t\t\t//对当前x取余获取x的个位数</span><br><span class=\"line\">            b = x % 10;</span><br><span class=\"line\">\t\t\t//对x除10</span><br><span class=\"line\">            x /= 10;</span><br><span class=\"line\">\t\t\t//这里判断了翻转后的数字是否溢出，如果溢出就直接返回</span><br><span class=\"line\">            if(revert &gt; INT_MAX/10 || (revert == INT_MAX &amp;&amp; b &gt; INT_MAX % 10))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                return INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t   if(revert &lt; INT_MIN/10 || (revert == INT_MAX &amp;&amp; b &lt; INT_MIN % 10))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                return INT_MIN;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t//将新得到的数字加到revert右边。</span><br><span class=\"line\">            revert = revert *10 + b;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return revert;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2022/04/19/Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/",
            "url": "http://example.com/2022/04/19/Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/",
            "title": "Z字形变换",
            "date_published": "2022-04-19T15:25:15.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 &quot;PAYPALISHIRING&quot; 行数为 3 时，排列如下：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P   A   H   N</span><br><span class=\"line\">A P L S I I G</span><br><span class=\"line\">Y   I   R</span><br></pre></td></tr></table></figure><br />\n 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&quot;PAHNAPLSIIGYIR&quot;。</p>\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n<h2 id=\"解法\"><a class=\"anchor\" href=\"#解法\">#</a> 解法</h2>\n<p>仔细观察由字符串构造成的 z 字形，可以发现一下规律：<br />\n对于每个周期每一行都有 2 (1) 个字符，根据字符规律：<br />\n当对构造的 z 型字符有 n 行，对每 (2n-2) 的位置形成重复周期的形状，对第 j 个周期中，第 i 行的位置，下面两个位置 <code>I1</code> , <code>I2</code>  的字符是连在一起的：<br />\n <code>I1 = j*(2n-2) - i</code> <br />\n <code>I2 = j*(2n-2) + i</code> <br />\n 当 <code>I1</code> , <code>I2</code>  相等时，表明他们到了第 0 行或第 n-1 行。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">string convert(string s, int numRows) &#123;</span><br><span class=\"line\">        if(numRows == 1)&#123;</span><br><span class=\"line\">            return s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        string result;</span><br><span class=\"line\">        int last = -1;</span><br><span class=\"line\">        int cur = -1;</span><br><span class=\"line\">        int len = s.length();</span><br><span class=\"line\">        for(int i=0;i&lt;numRows;i++)&#123;</span><br><span class=\"line\">            int j =0;</span><br><span class=\"line\">            //j*(2*numRows - 2) + i &lt; s.length() &amp;&amp; j*(2*numRows - 2) - i &lt; s.length()</span><br><span class=\"line\">            while(true)&#123;</span><br><span class=\"line\">                cur = j*(2*numRows - 2) - i;</span><br><span class=\"line\">                if(cur &gt;= len)&#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(cur &gt;= 0 &amp;&amp; cur != last)&#123;</span><br><span class=\"line\">                    result += s[cur];</span><br><span class=\"line\">                    last = cur;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cur = j*(2*numRows - 2) + i;</span><br><span class=\"line\">                 if(cur &gt;= len)&#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(cur &gt;= 0 &amp;&amp; cur != last)&#123;</span><br><span class=\"line\">                    result += s[cur];</span><br><span class=\"line\">                    last = cur;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法",
                "leetcode"
            ]
        },
        {
            "id": "http://example.com/2022/04/15/OpenGL-ES3-0-%E5%85%A5%E9%97%A8-%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2/",
            "url": "http://example.com/2022/04/15/OpenGL-ES3-0-%E5%85%A5%E9%97%A8-%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2/",
            "title": "OpenGL ES3.0 入门-画三角形",
            "date_published": "2022-04-14T17:56:26.000Z",
            "content_html": "<p>Android OpenGL ES3.0 入门</p>\n<h1 id=\"egl\"><a class=\"anchor\" href=\"#egl\">#</a> EGL</h1>\n<h2 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<p>选择的 EGL 版本为 EGL1.4 版本，对应了 AndroidSdk 中的  <code>EGL14</code> <br />\n 创建可以等到 Surface 初始化完成后进行，比如在 SurfaceHolder 的 surfaceCreate 方法中去初始化。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> //必须要一个surface对象来创建窗口表面</span><br><span class=\"line\">fun initEGL(surface: Surface) : Boolean&#123;  4</span><br><span class=\"line\"></span><br><span class=\"line\">\t//第一步，获取一个EGLDisplay表面，用来建立与设备的窗口系统通信信道，建立连接</span><br><span class=\"line\">    egldisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);  </span><br><span class=\"line\">    if(egldisplay == EGL14.EGL_NO_DISPLAY)&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglGetDisplay fail $egldisplay&quot;)  </span><br><span class=\"line\">        return false  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  \t//初始化EGL，返回EGL的主版本号的次版本号</span><br><span class=\"line\">    if(!EGL14.eglInitialize( egldisplay,versions,0,versions,1))&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglInitialize fail $egldisplay&quot;)  </span><br><span class=\"line\">        return false  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    val config : Array&lt;EGLConfig?&gt; = arrayOfNulls(1)  </span><br><span class=\"line\">    var configNum = intArrayOf(EGL14.EGL_NONE)  </span><br><span class=\"line\">\t//选择设备窗口系统支持的EGL配置列表</span><br><span class=\"line\">    if(!EGL14.eglChooseConfig(egldisplay,configAttribe,0,  </span><br><span class=\"line\">            config,0,1, configNum,0)) &#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglChooseConfig fail $config&quot;)  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    if(config[0] == null)&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;config choose fail $config&quot;)  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">\t//创建一个窗口，作为屏幕上的渲染区域</span><br><span class=\"line\">    eglSurface = EGL14.eglCreateWindowSurface(egldisplay,config[0],surface,  </span><br><span class=\"line\">        intArrayOf(EGL14.EGL_NONE),0)  </span><br><span class=\"line\">    if(eglSurface == EGL14.EGL_NO_SURFACE)&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglCreateWindowSurface fail $eglSurface&quot;)  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">\t//创建渲染上下文</span><br><span class=\"line\">    val eglContext = EGL14.eglCreateContext(egldisplay,config[0],  </span><br><span class=\"line\">        EGL14.EGL_NO_CONTEXT,contextAttribe,0)  </span><br><span class=\"line\">    if(eglContext == EGL14.EGL_NO_CONTEXT)&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglCreateContext fail $eglContext&quot;)  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  \t//将上一步创建的上下文与渲染表面进行关联</span><br><span class=\"line\">    if(!EGL14.eglMakeCurrent(egldisplay,eglSurface,eglSurface,eglContext))&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglMakeCurrent fail $egldisplay&quot;)  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"运行\"><a class=\"anchor\" href=\"#运行\">#</a> 运行</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里是放在一个子线程的run方法体中，执行一个无限循环去渲染OpenGL ES3.0API输出的数据。</span><br><span class=\"line\">override fun run() &#123;  </span><br><span class=\"line\">    super.run()  </span><br><span class=\"line\">    if(!init())&#123;  </span><br><span class=\"line\">        Log.d(TAG,&quot;EGL init fail&quot;)  </span><br><span class=\"line\">        return  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    try &#123;  </span><br><span class=\"line\">        while (true)&#123;  </span><br><span class=\"line\">            for(draw in drawers)&#123;  </span><br><span class=\"line\">                draw.draw()  </span><br><span class=\"line\">                swapBuffer(egldisplay,eglSurface)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            sleep(20)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;catch (e:Exception)&#123;  </span><br><span class=\"line\">        e.printStackTrace()  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    for(draw in drawers)&#123;  </span><br><span class=\"line\">        draw.release()  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private fun swapBuffer (display: EGLDisplay,surface:EGLSurface)&#123;  </span><br><span class=\"line\">    EGL14.eglSwapBuffers(display,surface)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"opengl-es30\"><a class=\"anchor\" href=\"#opengl-es30\">#</a> OpenGL ES3.0</h1>\n",
            "tags": [
                "OpenGL ES3.0"
            ]
        },
        {
            "id": "http://example.com/2022/04/15/ffmpeg%E5%85%A5%E9%97%A8-%E5%9C%A8Windows11%20%E4%B8%8B%E7%BC%96%E8%AF%91Android%E5%B9%B3%E5%8F%B0%E5%AF%B9%E5%BA%94SO/",
            "url": "http://example.com/2022/04/15/ffmpeg%E5%85%A5%E9%97%A8-%E5%9C%A8Windows11%20%E4%B8%8B%E7%BC%96%E8%AF%91Android%E5%B9%B3%E5%8F%B0%E5%AF%B9%E5%BA%94SO/",
            "title": "ffmpeg 的编译",
            "date_published": "2022-04-14T16:06:55.000Z",
            "content_html": "<p>编译参考了<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2F0Y2hpbmcudG9wLyMvYXJ0aWNsZS8xMDAwMDAxNTE4MzU3NzMw\">开发的猫</span> 这位同学的编译教程</p>\n<p>前置环境：<br />\n操作系统：windows 11<br />\nminGW：llvm-mingw-20220323-msvcrt-x86_64<br />\nmsys：msys2-x86_64-20220319.exe<br />\nndk：24.0.8215888<br />\nllvm：ndk 自带<br />\n clang： ndk 自带<br />\n yasm<br />\ngit</p>\n<p>msys 安装缺少工具：   <code>pacman -S &lt;pkgname&gt;</code></p>\n<p>编译工具链地址：C:\\Users\\ZhenqianXu\\AppData\\Local\\Android\\Sdk\\ndk\\24.0.8215888\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin<br />\n 交叉编译工具链地址：C:\\Users\\ZhenqianXu\\AppData\\Local\\Android\\Sdk\\ndk\\24.0.8215888\\toolchains\\llvm\\prebuilt\\windows-x86_64\\sysroot</p>\n<p>找到编译目标 Android 版本 29 需要的 clang 和 clang++ 文件<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;C:\\Users\\ZhenqianXu\\AppData\\Local\\Android\\Sdk\\ndk\\24.0.8215888\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\armv7a-linux-androideabi29-clang&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;C:\\Users\\ZhenqianXu\\AppData\\Local\\Android\\Sdk\\ndk\\24.0.8215888\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\armv7a-linux-androideabi29-clang++&quot;</span><br></pre></td></tr></table></figure><br />\n 进入 <code>configure</code>  文件中，找到 CMDLINE_SET，在其中添加一个变量<br />\n <code>cross-prefix-clang</code> <br />\n 然后就找到 <code>cc_default</code> , <code>cxx_default</code>  这两个变量定义的地方，修改为</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># clang set</span><br><span class=\"line\">cc_default=&quot;$&#123;cross_prefix_clang&#125;$&#123;cc_default&#125;&quot; cxx_default=&quot;$&#123;cross_prefix_clang&#125;$&#123;cxx_default&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以直接改成下面的，这两个变量就是对应上面clang和clang++编译器路径</span><br><span class=\"line\">cc_default=&quot;$&#123;cross_prefix_clang&#125;clang&quot;</span><br><span class=\"line\">cxx_default=&quot;$&#123;cross_prefix_clang&#125;clang++&quot;</span><br></pre></td></tr></table></figure></p>\n<p>新建编译脚本：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">set -x</span><br><span class=\"line\"></span><br><span class=\"line\"># 目标Android版本</span><br><span class=\"line\"></span><br><span class=\"line\">API=29</span><br><span class=\"line\"></span><br><span class=\"line\">CPU=armv7-a</span><br><span class=\"line\"></span><br><span class=\"line\">#so库输出目录</span><br><span class=\"line\"></span><br><span class=\"line\">OUTPUT=/c/Users/XZQ/Desktop/FFmpeg/ffmpeg-4.2.2/android/$CPU</span><br><span class=\"line\"></span><br><span class=\"line\"># NDK的路径，根据自己的NDK位置进行设置</span><br><span class=\"line\"></span><br><span class=\"line\">NDK=/c/Users/XZQ/AppData/Local/Android/Sdk/ndk/24.0.8215888</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译工具链路径</span><br><span class=\"line\"></span><br><span class=\"line\">TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/windows-x86_64</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译环境</span><br><span class=\"line\"></span><br><span class=\"line\">SYSROOT=$TOOLCHAIN/sysroot</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">function build</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ./configure \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --prefix=$OUTPUT \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --target-os=android \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --arch=arm \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --cpu=armv7-a \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --enable-asm \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --enable-neon \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --enable-cross-compile \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --enable-shared \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-static \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-doc \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-ffplay \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-ffprobe \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-symver \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-ffmpeg \\</span><br><span class=\"line\">//禁掉strip优化，避免了找不到strip工具报错</span><br><span class=\"line\">  --disable-stripping \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --sysroot=$SYSROOT \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --cross-prefix-clang=$TOOLCHAIN/bin/armv7a-linux-androideabi$API- \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --extra-cflags=&quot;-fPIC&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  make clean all</span><br><span class=\"line\"></span><br><span class=\"line\">  # 这里是定义用几个线程编译</span><br><span class=\"line\"></span><br><span class=\"line\">  make -j12</span><br><span class=\"line\"></span><br><span class=\"line\">  make install</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">build</span><br></pre></td></tr></table></figure></p>\n<p>在 msys 中运行该脚本：<br />\n <code>./build_android_clang.sh</code></p>\n<p>编译成功<br />\n<img data-src=\"http://tvax3.sinaimg.cn/large/b5348f57gy1h19rj5f737j20wg0dwafa.jpg\" alt=\"屏幕截图 2022-04-15 012650\" /></p>\n",
            "tags": [
                "多媒体",
                "ffmpeg"
            ]
        },
        {
            "id": "http://example.com/2022/04/07/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/2022/04/07/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/",
            "title": "贪心算法",
            "date_published": "2022-04-07T15:52:17.000Z",
            "content_html": "<h2 id=\"leetcode-45-跳跃游戏\"><a class=\"anchor\" href=\"#leetcode-45-跳跃游戏\">#</a> leetcode 45 跳跃游戏</h2>\n<p>给你一个非负整数数组  <code>nums</code>  ，你最初位于数组的第一个位置。</p>\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n<p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>\n<p>假设你总是可以到达数组的最后一个位置。</p>\n<p>输入: nums = [2,3,1,1,4]<br />\n 输出: 2<br />\n 解释：跳到最后一个位置的最小跳跃数是 2。<br />\n从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</p>\n<p>解题思路：<br />\n贪心思路：</p>\n<p><img data-src=\"http://tvax1.sinaimg.cn/large/b5348f57gy1h11n6nuu09j21h31xg4b7.jpg\" alt=\"Page1\" /></p>\n<p><img data-src=\"http://tva1.sinaimg.cn/large/b5348f57gy1h11n5w2bjjj21h31xg0z2.jpg\" alt=\"Page2\" /></p>\n<h2 id=\"leetcode-134-加油站问题\"><a class=\"anchor\" href=\"#leetcode-134-加油站问题\">#</a> Leetcode 134 加油站问题</h2>\n<p>题目：<br />\n在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas [i] 升。</p>\n<p>你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost [i] 升。你从其中的一个加油站出发，开始时油箱为空。</p>\n<p>给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。<br />\n定义 gas [i]-cost [i] 为油量变换，如果油量变换为正，则叫正加油点，否则叫负加油点。<br />\n推论：<br />\n1. 不能从负加油点出发，<br />\n2. 如果从某个加油站 X 到另一个加油站 Y 无法到达，那么从 X 到 Y 之间的加油站出发到 Y 都不可达。待证明<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) &#123;</span><br><span class=\"line\">\t\tint mGas = 0;</span><br><span class=\"line\">\t\tint step = 0;</span><br><span class=\"line\">\t\tint start = 0;</span><br><span class=\"line\">\t\tint size = gas.size();</span><br><span class=\"line\">\t\tvector&lt;int&gt; benefit = vector&lt;int&gt;(size, 0);</span><br><span class=\"line\">\t\tint i = 0;</span><br><span class=\"line\">\t\twhile (step &lt; size &amp;&amp; start &lt; size) &#123;</span><br><span class=\"line\">\t\t\tint j = i % size;</span><br><span class=\"line\">\t\t\tint n = gas[j] - cost[j];</span><br><span class=\"line\">\t\t\tif (mGas + n &lt; 0) &#123;</span><br><span class=\"line\">\t\t\t\tmGas = 0;</span><br><span class=\"line\">\t\t\t\tstart = i + 1;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t\tstep = 0;</span><br><span class=\"line\">\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\tmGas += n;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tstep++;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (start &gt;= size) &#123;</span><br><span class=\"line\">\t\t\treturn -1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn start;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Algorithm"
            ]
        },
        {
            "id": "http://example.com/2022/04/06/Kotlin%E5%8D%8F%E7%A8%8B%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2022/04/06/Kotlin%E5%8D%8F%E7%A8%8B%E4%BD%BF%E7%94%A8/",
            "title": "Kotlin协程使用",
            "date_published": "2022-04-06T15:04:02.000Z",
            "content_html": "<p>runBlocking  是一个协程构建器，它是一个函数，返回值是一个 Coroutine 对象<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个kotlin预制的一个函数，返回值是一个Coroutine对象，同时会阻塞该协程运行的线程。</span><br><span class=\"line\">/**</span><br><span class=\"line\">*params:  context:CoroutineContext ,协程上下文对象</span><br><span class=\"line\">*</span><br><span class=\"line\">*params:  block:suspend CoroutineScope.() -&gt; T 一个lambda函数</span><br><span class=\"line\">*/</span><br><span class=\"line\">public fun &lt;T&gt; runBlocking(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -&gt; T): T&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>启动一个协程，协程只能在协程作用域中运行，协程作用域是 CoroutineScope，协程无法脱离其存在，下面是 launch 的源码，</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public fun CoroutineScope.launch(  </span><br><span class=\"line\">\t//协程上下文</span><br><span class=\"line\">\tcontext: CoroutineContext = EmptyCoroutineContext,  </span><br><span class=\"line\">    //协程启动器的启动选项</span><br><span class=\"line\">\tstart: CoroutineStart = CoroutineStart.DEFAULT,  </span><br><span class=\"line\">\t//协程体</span><br><span class=\"line\">    block: suspend CoroutineScope.() -&gt; Unit  </span><br><span class=\"line\">): Job &#123;  </span><br><span class=\"line\">    val newContext = newCoroutineContext(context)  </span><br><span class=\"line\">    val coroutine = if (start.isLazy)  </span><br><span class=\"line\">        LazyStandaloneCoroutine(newContext, block) else  </span><br><span class=\"line\"> StandaloneCoroutine(newContext, active = true)  </span><br><span class=\"line\">    coroutine.start(start, coroutine, block)  </span><br><span class=\"line\">    return coroutine  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>CoroutineStart 是协程启动器启动选项，有 4 个枚举类型：</p>\n<ul>\n<li>DEFAULT  根据协程上下文环境立即执行协程体</li>\n<li>LAZY   只在协程需要执行的时候才执行</li>\n<li>ATOMIC  类似 DEFAULT，只是不可以取消</li>\n<li>UNDISPATCHED   立即执行协程体直到遇到当前线程第一个挂起点</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//class: StandaloneCoroutine -&gt; AbstractCoroutine</span><br><span class=\"line\">//start: CoroutineStart.DEFAULT</span><br><span class=\"line\">//receiver: StandaloneCoroutine</span><br><span class=\"line\">//block: 协程体</span><br><span class=\"line\">public fun &lt;R&gt; start(start: CoroutineStart, receiver: R, block: suspend R.() -&gt; T) &#123;  </span><br><span class=\"line\">    initParentJob()  </span><br><span class=\"line\">    start(block, receiver, this)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">internal fun initParentJob() &#123;  </span><br><span class=\"line\">    initParentJobInternal(parentContext[Job])  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">internal fun initParentJobInternal(parent: Job?) &#123;  </span><br><span class=\"line\">    assert &#123; parentHandle == null &#125;  </span><br><span class=\"line\"> if (parent == null) &#123;  </span><br><span class=\"line\">        parentHandle = NonDisposableHandle  </span><br><span class=\"line\">        return  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">    parent.start() // make sure the parent is started  </span><br><span class=\"line\"> @Suppress(&quot;DEPRECATION&quot;)  </span><br><span class=\"line\">    val handle = parent.attachChild(this)  </span><br><span class=\"line\">    parentHandle = handle  </span><br><span class=\"line\">    // now check our state _after_ registering (see tryFinalizeSimpleState order of actions)  </span><br><span class=\"line\"> if (isCompleted) &#123;  </span><br><span class=\"line\">        handle.dispose()  </span><br><span class=\"line\">        parentHandle = NonDisposableHandle // release it just in case, to aid GC  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//CoroutineStart 启动协程体</span><br><span class=\"line\">public operator fun &lt;R, T&gt; invoke(block: suspend R.() -&gt; T, receiver: R, completion: Continuation&lt;T&gt;): Unit =  </span><br><span class=\"line\">    when (this) &#123;  </span><br><span class=\"line\">        DEFAULT -&gt; block.startCoroutineCancellable(receiver, completion)  </span><br><span class=\"line\">        ATOMIC -&gt; block.startCoroutine(receiver, completion)  </span><br><span class=\"line\">        UNDISPATCHED -&gt; block.startCoroutineUndispatched(receiver, completion)  </span><br><span class=\"line\">        LAZY -&gt; Unit // will start lazily  </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> internal fun &lt;R, T&gt; (suspend (R) -&gt; T).startCoroutineCancellable(  </span><br><span class=\"line\">    receiver: R, completion: Continuation&lt;T&gt;,  </span><br><span class=\"line\">    onCancellation: ((cause: Throwable) -&gt; Unit)? = null  </span><br><span class=\"line\">) =  </span><br><span class=\"line\">    runSafely(completion) &#123;  </span><br><span class=\"line\">\t\t//创建协程</span><br><span class=\"line\"> \t\tcreateCoroutineUnintercepted(receiver, completion)   </span><br><span class=\"line\">\t\t.intercepted()</span><br><span class=\"line\">\t\t.resumeCancellableWith(Result.success(Unit), onCancellation)  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">//因为kotlin编译器会将协程体表达式编译成一个SuspendLambda对象。</span><br><span class=\"line\">SuspendLambda -&gt; ContinuationImpl -&gt; BaseContinuationImpl -&gt; Continuation</span><br><span class=\"line\">public actual fun &lt;R, T&gt; (suspend R.() -&gt; T).createCoroutineUnintercepted(  </span><br><span class=\"line\">    receiver: R,  </span><br><span class=\"line\">    completion: Continuation&lt;T&gt;  </span><br><span class=\"line\">): Continuation&lt;Unit&gt; &#123;  </span><br><span class=\"line\">    val probeCompletion = probeCoroutineCreated(completion)  </span><br><span class=\"line\">    return if (this is BaseContinuationImpl)  </span><br><span class=\"line\">        create(receiver, probeCompletion)  </span><br><span class=\"line\">    else &#123;  </span><br><span class=\"line\">        createCoroutineFromSuspendFunction(probeCompletion) &#123;  </span><br><span class=\"line\"> (this as Function2&lt;R, Continuation&lt;T&gt;, Any?&gt;).invoke(receiver, it)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/04/04/PathClassLoader%E4%B8%8EDexClassLoader-%E8%A7%A3%E6%9E%90/",
            "url": "http://example.com/2022/04/04/PathClassLoader%E4%B8%8EDexClassLoader-%E8%A7%A3%E6%9E%90/",
            "title": "PathClassLoader与DexClassLoader 解析",
            "date_published": "2022-04-04T15:06:50.000Z",
            "content_html": "<h1 id=\"未完\"><a class=\"anchor\" href=\"#未完\">#</a> 未完</h1>\n<h2 id=\"java中的classloader\"><a class=\"anchor\" href=\"#java中的classloader\">#</a> Java 中的 ClassLoader</h2>\n<p>在 Java 中，类加载器的作用是通过一个类的全限定名获取描述这个类的二进制字节流，然后加载到虚拟机中生成类对象并提供引用。<br />\n对 Java 虚拟机来说，类加载器可以分为 2 中：</p>\n<ul>\n<li>启动类加载器。由 C++ 代码实现，是 Java 虚拟机的一部分</li>\n<li>其他加载器。由 Java 代码实现，独立于虚拟机，并且全都继承自 java.lang.ClassLoader 这个类。</li>\n</ul>\n<p>对于我们开发人员来说，类加载器由 3 种：</p>\n<ul>\n<li>bootstrap ClassLoader</li>\n<li>Extension ClassLoader 加载指定扩展包中的类</li>\n<li>Application ClassLoader  加载 ClassPath 指定路径上的类</li>\n</ul>\n<h2 id=\"双亲委派模型\"><a class=\"anchor\" href=\"#双亲委派模型\">#</a> 双亲委派模型</h2>\n<p>双亲委派模型是一种类加载的模型，是被推荐使用的类加载模型。双亲委派模型的定义是每次去加载一个类时，先判断这个类是否加载过，如果没有加载过，那么判断有没有父类加载器，如果有父类加载器，那么先调用父类加载器的加载方法；如果父类加载器加载失败，那么就调用当前类加载器。</p>\n<p>使用双亲委派模型的好处：<br />\n使 Java 类与 Java 类加载器一起产生了优先级层次，保证了同一个类始终由一个类加载器去加载。</p>\n<p>双亲委派模型的实现：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">protected synchronized Class&lt;?&gt; loadClass(Stirng name,boolean resolve) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\tClass c = findLoadedClass(name);</span><br><span class=\"line\">\tif(c == null)&#123;</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t\tif(parent != null)&#123;</span><br><span class=\"line\">\t\t\t\t//父类加载器存在，继续调用父类加载器的loadClass方法</span><br><span class=\"line\">\t\t\t\tc = parent.loadClass(name,false);</span><br><span class=\"line\">\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t//父类加载器不存在，调用启动类加载器去加载</span><br><span class=\"line\">\t\t\t\tc = findBootstrapClassOrNull(name);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (ClassNotFoundException e)&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//如果父类加载器和启动类加载器都加载失败，使用当前类加载器去加载</span><br><span class=\"line\">\t\tif ( c == null )&#123;</span><br><span class=\"line\">\t\t\tc = findClass(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(resolve)&#123;</span><br><span class=\"line\">\t\tresolveClass(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"android-dalvik虚拟机中的类加载器\"><a class=\"anchor\" href=\"#android-dalvik虚拟机中的类加载器\">#</a> Android Dalvik 虚拟机中的类加载器</h2>\n<h3 id=\"basedexclassloader\"><a class=\"anchor\" href=\"#basedexclassloader\">#</a> BaseDexClassLoader</h3>\n<p>一个基于 Dex 的通用功能的 ClassLoader 实现，其核心代码如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java</span><br><span class=\"line\">Class BaseDexClassLoader extends ClassLoader&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final DexPathList pathList;</span><br><span class=\"line\">\t//一个ClassLoader数组，用来加载pathList pathList中可能依赖的类和资源，用来实现\t</span><br><span class=\"line\">\t//Android中的AndroidManifest.xml中&lt;use-library&gt;标签中的库</span><br><span class=\"line\">\tprotected final ClassLoader[] sharedLibraryLoaders;</span><br><span class=\"line\">\tprotected final ClassLoader[] sharedLibraryLoadersAfter;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic BaseDexClassLoader(String dexPath,String librarySearchPath,</span><br><span class=\"line\">\t\tClassLoader parent,ClassLoader[] sharedLibraryLoaders,</span><br><span class=\"line\">\t\tClassLoader[] sharedLibraryLoadersAfter,boolean isTrust)&#123;</span><br><span class=\"line\">\t\tsuper(parent);</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tthis.pathList = new DexPathList(this,dexPath,librarySearchPath,null,isTrust);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprotected synchronized Class&lt;?&gt; findClass(Stirng name,boolean resolve) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tif(sharedLibraryLoaders != null)&#123;</span><br><span class=\"line\">\t\t\tfor(ClassLoader loader : sharedLibraryLoaders)&#123;</span><br><span class=\"line\">\t\t\t\ttry&#123;</span><br><span class=\"line\">\t\t\t\t\treturn loader.loadClass(name);</span><br><span class=\"line\">\t\t\t\t&#125;catch(ClassNotFoundException ignore)&#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tList&lt;Throwable&gt; suppressedExceptions = new ArrayList&lt;Throwable&gt;();</span><br><span class=\"line\">\t\tClass c = dexPath.findClass(name,suppressedExceptions);</span><br><span class=\"line\">\t\tif(c == null)&#123;</span><br><span class=\"line\">\t\t\treturn c;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(sharedLibraryLoadersAfter != null)&#123;</span><br><span class=\"line\">\t\t\tfor(ClassLoader loader : sharedLibraryLoadersAfter)&#123;</span><br><span class=\"line\">\t\t\t\ttry&#123;</span><br><span class=\"line\">\t\t\t\t\treturn loader.loadClass(name);</span><br><span class=\"line\">\t\t\t\t&#125;catch(ClassNotFoundException ignore)&#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(c == null)&#123;</span><br><span class=\"line\">\t\t\tthrow new ClassNotFoundException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>从上面可以看出，BaseDexClassLoader 并没有遵守 Java 的双亲委托模型。</p>\n<p>BaseDexClassLoader 将代码加载又委托给了 DexPathList 来进行加载。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span><br><span class=\"line\">class DexPathList&#123;</span><br><span class=\"line\">\tElement[] dexElements;</span><br><span class=\"line\">\tpublic DexPathList(...)&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tdexElement = makePathElements(spliteDexPath(dexPath)</span><br><span class=\"line\">\t\t\t,null,null,classLoader,\tisTrust);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//这里有关于热修复实现的知识点，就是将补丁 dex 文件放到 dexElements 数组靠前位置，</span><br><span class=\"line\">\t//这样在加载 class 时，优先找到补丁包中的 dex 文件，加载到 class 之后就不再寻找，从</span><br><span class=\"line\">\t//而原来的 apk 文件中同名的类就不会再使用，从而达到修复的目的</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Class&lt;?&gt; findClass(String name,List&lt;Throwable&gt; suppressed)&#123;</span><br><span class=\"line\">\t\tfor(Element element : dexElements)&#123;</span><br><span class=\"line\">\t\t\tClass&lt;?&gt; clazz = element.findClass(name,classLoader,suppressed);</span><br><span class=\"line\">\t\t\tif(clazz != null)&#123;</span><br><span class=\"line\">\t\t\t\treturn clazz;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static Element[] makeDexElements(List&lt;File&gt; files,File optimizedDictionary,List&lt;IOException&gt; suppressedExceptions,ClassLoader classloader,boolean isTrusted)&#123;</span><br><span class=\"line\">\t\tElement[] elements = new Element[files.size()];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor(Files file : files)&#123;</span><br><span class=\"line\">\t\t\tif(file.isDictionary())&#123;</span><br><span class=\"line\">\t\t\t\telements[elementsPos++] = new Element(file);</span><br><span class=\"line\">\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\tif(file.isFile())&#123;</span><br><span class=\"line\">\t\t\t\t\tDexFile dex = null;</span><br><span class=\"line\">\t\t\t\t\tif(file.path.endWith(&quot;.dex&quot;))&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdex = loadDexFile(file,optimizedDictionary,loader,elements);</span><br><span class=\"line\">\t\t\t\t\t\tif(dex != null)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\telements[elementsPos++] = new Element(dex,null);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdex = loadDexFile(file,optimizedDictionary,loader,elements);</span><br><span class=\"line\">\t\t\t\t\t\tif(dex == null)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\telements[elementsPos++] = new Element(file);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\telements[elementsPos++] = new Element(dex,file);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn elements;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate static DexFile loadDexPath(File file,File optimizedDictionary,ClassLoader loader,Element[] elements)&#123;</span><br><span class=\"line\">\t\tif(optimizeDictory == null)&#123;</span><br><span class=\"line\">\t\t\treturn new DexFile(file,loader,elements);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t//创建一个文件，路径为optimizedDictionary指定文件夹内，file同名的文件。</span><br><span class=\"line\">\t\t\tString optimizedPath = optimizedPathFor(file,optimizedDictionary);</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//libcore/dalvik/src/main/java/dalvik/system/DexFile.java</span><br><span class=\"line\"></span><br><span class=\"line\">final Class DexFile&#123;</span><br><span class=\"line\">\tprivate Object mCookie;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic DexFile(File file,ClassLoader loader,DexPathList.Element[] elements)&#123;</span><br><span class=\"line\">\t\tmCookie = openDexFile(...);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate static Object openDexFile()&#123;</span><br><span class=\"line\">\t\treturn openDexFileNative(...);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pathclassloader\"><a class=\"anchor\" href=\"#pathclassloader\">#</a> PathClassLoader</h3>\n<p>只能加载已经安装过的 Apk</p>\n<h3 id=\"dexclassloader\"><a class=\"anchor\" href=\"#dexclassloader\">#</a> DexClassLoader</h3>\n<p>可以加载 jar,apk,dex, 可以直接从 SD 卡加载未安装的 apk</p>\n",
            "tags": [
                "Android",
                "插件化",
                "Dalvik虚拟机"
            ]
        },
        {
            "id": "http://example.com/2022/04/02/Android-%E6%BA%90%E7%A0%81%E4%B8%AD-C-%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "url": "http://example.com/2022/04/02/Android-%E6%BA%90%E7%A0%81%E4%B8%AD-C-%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "title": "Android 源码中 C++ 知识点",
            "date_published": "2022-04-02T15:36:44.000Z",
            "content_html": "<h2 id=\"c-智能指针\"><a class=\"anchor\" href=\"#c-智能指针\">#</a> C++ 智能指针 ：</h2>\n<h4 id=\"stdauto_ptrt-c-11-已弃用\"><a class=\"anchor\" href=\"#stdauto_ptrt-c-11-已弃用\">#</a> std::auto_ptr&lt;T&gt;  (C++ 11 已弃用)</h4>\n<h4 id=\"stdshared_ptrt-同一时间能有多个智能指针对象指向引用对象\"><a class=\"anchor\" href=\"#stdshared_ptrt-同一时间能有多个智能指针对象指向引用对象\">#</a> std::shared_ptr&lt;T&gt;  同一时间能有多个智能指针对象指向引用对象。</h4>\n<hr />\n<h4 id=\"stdunique_ptrt-同一时间只能有一个智能指针对象指向引用对象\"><a class=\"anchor\" href=\"#stdunique_ptrt-同一时间只能有一个智能指针对象指向引用对象\">#</a> std::unique_ptr&lt;T&gt;  同一时间只能有一个智能指针对象指向引用对象。</h4>\n<pre><code>可以通过std::move()转移到另一个智能指针对象\n</code></pre>\n<hr />\n<h4 id=\"stdmake_uniquet\"><a class=\"anchor\" href=\"#stdmake_uniquet\">#</a> std::make_unique&lt;T&gt;()</h4>\n<pre><code>返回 std::unique_ptr&lt;T&gt;类型\n</code></pre>\n<hr />\n<h4 id=\"stdmake_sharedt\"><a class=\"anchor\" href=\"#stdmake_sharedt\">#</a> std::make_shared&lt;T&gt;()</h4>\n<pre><code>返回 std::shared_ptr&lt;T&gt;类型\n</code></pre>\n<h2 id=\"c对象初始化\"><a class=\"anchor\" href=\"#c对象初始化\">#</a> C++ 对象初始化</h2>\n<h3 id=\"new初始化\"><a class=\"anchor\" href=\"#new初始化\">#</a> new 初始化</h3>\n<ul>\n<li>使用 new 关键字进行初始化的对象是在堆上分配</li>\n<li>使用 new 关键字创建的对象返回的是对象地址，必须由一个类指针接收</li>\n<li>使用 new 关键字创建的对象必须使用 delete 手动清除缓存</li>\n</ul>\n<h3 id=\"不使用new初始化\"><a class=\"anchor\" href=\"#不使用new初始化\">#</a> 不使用 new 初始化</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = new int(1);</span><br><span class=\"line\">int b(1);\t</span><br></pre></td></tr></table></figure></p>\n<p>不是使用 new 进行初始化的方法上面两种，这种初始化是在栈上分配的，由于栈上内存是系统进行管理，所以会自行对空间进行回收。</p>\n<pre><code>### 虚函数\n\n对象中定义的虚函数需要赋值为0，不然会有编译错误\n</code></pre>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "http://example.com/2022/04/02/%E4%BA%91%E9%9B%80/",
            "url": "http://example.com/2022/04/02/%E4%BA%91%E9%9B%80/",
            "title": "云雀",
            "date_published": "2022-04-02T13:40:41.000Z",
            "content_html": "<h1 id=\"雲雀\"><a class=\"anchor\" href=\"#雲雀\">#</a> 雲雀</h1>\n<p>だいじなものをいつも</p>\n<p>わたしはまちがえるの</p>\n<p>ほほえみにみんな　なにかをかくしてる</p>\n<p>もうだれもしらない</p>\n<p>やくそくがひとつ</p>\n<p>ものがたりのはじまりと</p>\n<p>おわりをつないでた</p>\n<p>よびあっているような</p>\n<p>ひばりのこえだけとーく</p>\n<p>くものむこおへ　　そうげんにやさしいかげをのこして</p>\n<p>ねえ　ほんとうはいつだって</p>\n<p>ひかりのなかにいたよね</p>\n<p>あいのかたちお　みつけにいくの</p>\n",
            "tags": [
                "日语",
                "歌词"
            ]
        },
        {
            "id": "http://example.com/2022/04/02/%E6%A0%91/",
            "url": "http://example.com/2022/04/02/%E6%A0%91/",
            "title": "树",
            "date_published": "2022-04-01T16:55:04.000Z",
            "content_html": "<h1 id=\"树的遍历算法\"><a class=\"anchor\" href=\"#树的遍历算法\">#</a> 树的遍历算法</h1>\n<h2 id=\"bfs-广度优先遍历模板代码\"><a class=\"anchor\" href=\"#bfs-广度优先遍历模板代码\">#</a> BFS (广度优先遍历) 模板代码</h2>\n<p>非递归方式，借用队列结构。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; levelOrderBottom1(TreeNode* root) &#123;</span><br><span class=\"line\">\t\tvector&lt;vector&lt;int&gt;&gt; result;</span><br><span class=\"line\">\t\tqueue&lt;TreeNode*&gt; mQueue;</span><br><span class=\"line\">\t\tint level = 0;</span><br><span class=\"line\">\t\tif (root == nullptr) &#123;</span><br><span class=\"line\">\t\t\treturn result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmQueue.push(root);</span><br><span class=\"line\">\t\twhile (!mQueue.empty())</span><br><span class=\"line\">\t\t&#123;\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tresult.push_back(vector&lt;int&gt;());</span><br><span class=\"line\">\t\t\tint size = mQueue.size();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\tTreeNode* front = mQueue.front();</span><br><span class=\"line\">\t\t\t\tmQueue.pop();</span><br><span class=\"line\">\t\t\t\tresult[level].push_back(front-&gt;val);</span><br><span class=\"line\">\t\t\t\tif (front-&gt;left != nullptr) &#123;</span><br><span class=\"line\">\t\t\t\t\tmQueue.push(front-&gt;left);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tif (front-&gt;right != nullptr) &#123;</span><br><span class=\"line\">\t\t\t\t\tmQueue.push(front-&gt;right);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tlevel++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"dfs深度优先遍历模板代码\"><a class=\"anchor\" href=\"#dfs深度优先遍历模板代码\">#</a> DFS (深度优先遍历) 模板代码</h2>\n<p>非递归方式，借用栈数据结构<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">void dfs(TreeNode* root) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vector&lt;int&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">        stack&lt;TreeNode*&gt; mStack;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(root != nullptr)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            mStack.push(root);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        while(!mStack.empty())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            TreeNode* node = mStack.top();</span><br><span class=\"line\"></span><br><span class=\"line\">            mStack.pop();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">            if(node-&gt;right != nullptr)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                mStack.push(node-&gt;right);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(node-&gt;left != nullptr)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                mStack.push(node-&gt;left);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"中序遍历非递归实现\"><a class=\"anchor\" href=\"#中序遍历非递归实现\">#</a> 中序遍历非递归实现</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;int&gt; midorder(TreeNode* root)&#123;</span><br><span class=\"line\">\tvector&lt;int&gt; res;</span><br><span class=\"line\">\tif(root == nullptr)&#123;</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstack&lt;TreeNode*&gt; mStk;</span><br><span class=\"line\">\tif(!mStk.empty() || root != nullptr)&#123;</span><br><span class=\"line\">\t\twhile(root!= nullptr)&#123;</span><br><span class=\"line\">\t\t\tmStk.push(root);</span><br><span class=\"line\">\t\t\troot = root-&gt;left;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t\tTreeNode *node = mStk.top();</span><br><span class=\"line\">\t\tmStk.pop();</span><br><span class=\"line\">\t\tres.push(node-&gt;val);</span><br><span class=\"line\">\t\troot = node-&gt;right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"后序遍历非递归\"><a class=\"anchor\" href=\"#后序遍历非递归\">#</a> 后序遍历非递归</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;int&gt; postOrder(TreeNode* root)&#123;</span><br><span class=\"line\">\tvector&lt;int&gt; res;</span><br><span class=\"line\">\tif(root == nullptr)&#123;</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstack&lt;TreeNode*&gt; mStk;</span><br><span class=\"line\">\tTreeNode* prev;</span><br><span class=\"line\">\twhile(root!= nullptr || !mStk.empty())&#123;</span><br><span class=\"line\">\t\twhile(root != nullptr)&#123;</span><br><span class=\"line\">\t\t\tmStk.push(root);</span><br><span class=\"line\">\t\t\troot = root.left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tTreeNode* node = mStk.top();</span><br><span class=\"line\">\t\tif(node-&gt;right == null || node-&gt;right == prev)&#123;</span><br><span class=\"line\">\t\t\tmStk.pop();</span><br><span class=\"line\">\t\t\tres.push(node-&gt;val);</span><br><span class=\"line\">\t\t\tpre = node;</span><br><span class=\"line\">\t\t\troot = nullptr;</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tmStk.push(node-&gt;right);</span><br><span class=\"line\">\t\t\troot = node-&gt;right;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"224-基本计算器\"><a class=\"anchor\" href=\"#224-基本计算器\">#</a> 224 基本计算器</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int calculate(string s) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t//定义栈存储参数</span><br><span class=\"line\">        stack&lt;int&gt; nums;</span><br><span class=\"line\">\t\t//预存入一个数字0，防止首个字符是运算符号</span><br><span class=\"line\">        nums.push(0);</span><br><span class=\"line\">\t\t//定义栈存储操作符</span><br><span class=\"line\">        stack&lt;char&gt; ops;</span><br><span class=\"line\"></span><br><span class=\"line\">        bool f = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        for(int i=0;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">            if(s[i] ==&#x27; &#x27;)//遇到空格跳过</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                continue;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else if(s[i] == &#x27;+&#x27; || s[i] == &#x27;-&#x27;) //遇到运算符</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                f = false;</span><br><span class=\"line\">\t\t\t\t//判断运算符号签名的字符是否为左括号，如果是，则在参数栈增加一个参数，用于于防止左括号后首个字符是运算符的情况</span><br><span class=\"line\"></span><br><span class=\"line\">                if(i &gt; 0 &amp;&amp; s[i-1] == &#x27;(&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    nums.push(0);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t\t\t//推入符号</span><br><span class=\"line\">                ops.push(s[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else if(s[i] == &#x27;(&#x27;)//遇到左括号</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                 f = false;</span><br><span class=\"line\"></span><br><span class=\"line\">                ops.push(s[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else if(s[i] == &#x27;)&#x27;)//遇到右括号，先弹出符号栈栈顶的左括号（栈顶必须是左括号，否则表达式错误）</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                ops.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                if(!ops.empty() &amp;&amp; ops.top() != &#x27;(&#x27;)&#123;</span><br><span class=\"line\">\t\t\t\t\t//计算括号内与括号左边数字的计算结果</span><br><span class=\"line\"></span><br><span class=\"line\">                    if(ops.top() == &#x27;+&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        int right = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        int left = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        nums.push(left + right);</span><br><span class=\"line\"></span><br><span class=\"line\">                        ops.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;else if(ops.top() == &#x27;-&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        int right = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        int left = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        nums.push(left - right);</span><br><span class=\"line\"></span><br><span class=\"line\">                        ops.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\telse//遇到数字</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t//遇到数字左边也是数字，那就将参数栈顶弹出，与当前数字组成更大的数，然后再压入</span><br><span class=\"line\"></span><br><span class=\"line\">                if(i&gt;0 &amp;&amp;  s[i-1] &gt;= &#x27;0&#x27; &amp;&amp; s[i-1] &lt;= &#x27;9&#x27; )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        int v = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        v = v*10 + (s[i] - &#x27;0&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">                        nums.push(v);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">\t\t\t\t//直接压入</span><br><span class=\"line\"></span><br><span class=\"line\">                    nums.push(s[i] - &#x27;0&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t\t\t//遇到数字右边也是数字，那么先不取符号栈中的符号进行运算，继续遍历</span><br><span class=\"line\">                if(i+1&lt;s.length() &amp;&amp;  s[i+1] &gt;=&#x27;0&#x27; &amp;&amp; s[i+1] &lt;= &#x27;9&#x27; )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">\t\t\t\t\t//参数参加计算得到新参数</span><br><span class=\"line\">                    if(!ops.empty())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        if(ops.top() == &#x27;+&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            int right = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                            int left = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                            nums.push(left + right);</span><br><span class=\"line\"></span><br><span class=\"line\">                            ops.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;else if(ops.top() == &#x27;-&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            int right = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                            int left = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                            nums.push(left - right);</span><br><span class=\"line\"></span><br><span class=\"line\">                            ops.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">        return nums.top(); </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二叉搜索树\"><a class=\"anchor\" href=\"#二叉搜索树\">#</a> 二叉搜索树</h2>\n<p>性质一： 二叉搜索树的中序遍历是递增序列</p>\n<h4 id=\"由一个递增序列构建二叉搜索树\"><a class=\"anchor\" href=\"#由一个递增序列构建二叉搜索树\">#</a> 由一个递增序列构建二叉搜索树</h4>\n<p>使用递归法构建 BST 树<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeNode* buildBinarySearchTree(Vector&lt;int&gt;&amp; nums)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return buildBinarySearchTree(nums,0,nums.size()-1);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">TreeNode* buildBinarySearchTree(Vector&lt;int&gt;&amp; nums, int left,int right)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(left &gt; right)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    int mid = (right - left) / 2 + left;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode* node = new TreeNode(nums[mid]);</span><br><span class=\"line\"></span><br><span class=\"line\">    node-&gt;left = buildBinarySearchTree(nums,left, mid-1);</span><br><span class=\"line\"></span><br><span class=\"line\">    node-&gt;right = buildBinarySearchTree(nums,mid+1,right);</span><br><span class=\"line\"></span><br><span class=\"line\">    return node;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "C++",
                "数据结构",
                "树",
                "BFS"
            ]
        },
        {
            "id": "http://example.com/2022/03/31/Android-%E8%93%9D%E7%89%99%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/",
            "url": "http://example.com/2022/03/31/Android-%E8%93%9D%E7%89%99%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/",
            "title": "Android 蓝牙应用开发流程",
            "date_published": "2022-03-31T14:30:19.000Z",
            "content_html": "<h1 id=\"蓝牙权限申请\"><a class=\"anchor\" href=\"#蓝牙权限申请\">#</a> 蓝牙权限申请</h1>\n<p>目标应用的 targetSdkVersion &gt;= 31，那么应该申请一下权限</p>\n<ul>\n<li>搜索蓝牙设备权限 ：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_SCAN&quot;/&gt;</code></li>\n<li>开启蓝牙对其他设备可见的权限：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADVERTISE&quot;/&gt;</code></li>\n<li>与已经配对过的设备进行通讯：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_CONNECT&quot;/&gt;</code></li>\n<li>传统蓝牙权限，需要声明权限的 maxSdkVersion 来满足兼容性。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Request legacy Bluetooth permissions on older devices. --&gt;  </span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;  \t\t</span><br><span class=\"line\">\tandroid:maxSdkVersion=&quot;30&quot; /&gt;  </span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;  </span><br><span class=\"line\">\tandroid:maxSdkVersion=&quot;30&quot; /&gt;</span><br></pre></td></tr></table></figure></li>\n<li>获取蓝牙设备真实位置信息的权限：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;</code></li>\n</ul>\n<p>目标应用的 targetSdkVersion &lt;= 30，那么应该申请一下权限<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;</span><br><span class=\"line\">//if(version &gt; 29)&#123;</span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;</span><br><span class=\"line\">//&#125; else &#123;</span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;/&gt;</span><br><span class=\"line\">//&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-feature android:name=&quot;android.hardware.bluetooth&quot; android:required=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>// 发现设备权限<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"经典蓝牙连接\"><a class=\"anchor\" href=\"#经典蓝牙连接\">#</a> 经典蓝牙连接</h1>\n<h2 id=\"创建bluetoothadapter对象\"><a class=\"anchor\" href=\"#创建bluetoothadapter对象\">#</a> 创建 BluetoothAdapter 对象</h2>\n<p><code>val adapter = BluetoothAdapter.getDefaultAdapter()</code></p>\n<p>获取蓝牙状态：蓝牙是否开启，如果没有开启，就跳转到蓝牙开启页面</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (bluetoothAdapter?.isEnabled == false) &#123;  </span><br><span class=\"line\">\tval enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)</span><br><span class=\"line\">\tstartActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>监听蓝牙状态变化，蓝牙状态由 4 种：</p>\n<ul>\n<li>STATE_ON   蓝牙已开启，该状态下才能继续使用 BluetoothAdapter 进行蓝牙配对</li>\n<li>STATE_OFF  蓝牙已关闭。</li>\n<li>STATE_TURNING_ON，正在开启种，该状态 BluetoothAdapter 还无法使用</li>\n<li>STATE_TURNING_OFF 正在关闭种，可以在这个状态去关闭蓝牙连接</li>\n</ul>\n<p>使用系统广播<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1 声明权限 </span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//2 开启广播监听</span><br><span class=\"line\">fun registerBluetoothReceiver(context : Context)&#123;  </span><br><span class=\"line\">    val intentFilter = IntentFilter().apply &#123;  </span><br><span class=\"line\"> addAction(BluetoothAdapter.ACTION_STATE_CHANGED)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> context.registerReceiver(bluetoothReceiver,intentFilter)  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">val bluetoothReceiver = object : BroadcastReceiver() &#123;  </span><br><span class=\"line\">    override fun onReceive(context: Context?, intent: Intent?) &#123;  </span><br><span class=\"line\">        when(intent?.action)&#123;  </span><br><span class=\"line\">            BluetoothAdapter.ACTION_STATE_CHANGED -&gt; &#123;  </span><br><span class=\"line\">                val state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,BluetoothAdapter.STATE_OFF)  </span><br><span class=\"line\">                val prestate = intent.getIntExtra(BluetoothAdapter.EXTRA_PREVIOUS_STATE,BluetoothAdapter.STATE_OFF)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"扫描蓝牙设备\"><a class=\"anchor\" href=\"#扫描蓝牙设备\">#</a> 扫描蓝牙设备</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun registerBluetoothReceiver(context : Context)&#123;  </span><br><span class=\"line\">    val intentFilter = IntentFilter().apply &#123;  </span><br><span class=\"line\">        addAction(BluetoothDevice.ACTION_FOUND)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> context.registerReceiver(bluetoothReceiver,intentFilter)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">val bluetoothReceiver = object : BroadcastReceiver() &#123;  </span><br><span class=\"line\">    override fun onReceive(context: Context?, intent: Intent?) &#123;  </span><br><span class=\"line\">        when(intent?.action)&#123;  </span><br><span class=\"line\">            BluetoothDevice.ACTION_FOUND -&gt; &#123;  </span><br><span class=\"line\">                val device: BluetoothDevice? =  </span><br><span class=\"line\">                    intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE)  </span><br><span class=\"line\">                device?.run &#123;  </span><br><span class=\"line\"> val deviceName = name  </span><br><span class=\"line\"> val deviceHardwareAddress = address // MAC address  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配对\"><a class=\"anchor\" href=\"#配对\">#</a> 配对</h2>\n<p>蓝牙建立连接也是一个 C/S 模型，需要一个 Server 和一个 Client</p>\n<ul>\n<li>BluetoothServerSocket   蓝牙服务端 Socket 接口，监听客户端的连接，收到了连接请求后会返回一个 BluetoothSocket 接口对象用来通讯</li>\n<li>BluetoothSocket   蓝牙双方通讯的 socket 接口</li>\n</ul>\n<h3 id=\"服务端\"><a class=\"anchor\" href=\"#服务端\">#</a> 服务端</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private inner class AcceptThread : Thread() &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    private val mmServerSocket: BluetoothServerSocket? by lazy(LazyThreadSafetyMode.NONE) &#123;  </span><br><span class=\"line\"> bluetoothAdapter?.listenUsingInsecureRfcommWithServiceRecord(&quot;YOUR DEVICE NAME&quot;, UUID.fromString(&quot;MY_UUID&quot;))  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> override fun run() &#123;  </span><br><span class=\"line\">        // Keep listening until exception occurs or a socket is returned.  </span><br><span class=\"line\"> var shouldLoop = true  </span><br><span class=\"line\"> while (shouldLoop) &#123;  </span><br><span class=\"line\">            val socket: BluetoothSocket? = try &#123;  </span><br><span class=\"line\">                mmServerSocket?.accept()  </span><br><span class=\"line\">            &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">                Log.e(TAG, &quot;Socket&#x27;s accept() method failed&quot;, e)  </span><br><span class=\"line\">                shouldLoop = false  </span><br><span class=\"line\"> null &#125;  </span><br><span class=\"line\">            socket?.also &#123;  </span><br><span class=\"line\"> manageMyConnectedSocket(it)  </span><br><span class=\"line\">                mmServerSocket?.close()  </span><br><span class=\"line\">                shouldLoop = false  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Closes the connect socket and causes the thread to finish.  </span><br><span class=\"line\"> fun cancel() &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmServerSocket?.close()  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Could not close the connect socket&quot;, e)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">fun manageMyConnectedSocket(socket : BluetoothSocket)&#123;  </span><br><span class=\"line\">    //execute bluetooth communicate  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"客户端\"><a class=\"anchor\" href=\"#客户端\">#</a> 客户端</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private inner class ConnectThread(device: BluetoothDevice) : Thread() &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    private val mmSocket: BluetoothSocket? by lazy(LazyThreadSafetyMode.NONE) &#123;  </span><br><span class=\"line\"> device.createRfcommSocketToServiceRecord(UUID.fromString(&quot;MY_UUID&quot;))  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> public override fun run() &#123;  </span><br><span class=\"line\">        // Cancel discovery because it otherwise slows down the connection.  </span><br><span class=\"line\"> bluetoothAdapter?.cancelDiscovery()  </span><br><span class=\"line\">  </span><br><span class=\"line\">        mmSocket?.let &#123; socket -&gt;  </span><br><span class=\"line\"> // Connect to the remote device through the socket. This call blocks  </span><br><span class=\"line\"> // until it succeeds or throws an exception. socket.connect()  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // The connection attempt succeeded. Perform work associated with  </span><br><span class=\"line\"> // the connection in a separate thread. manageMyConnectedSocket(socket)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Closes the client socket and causes the thread to finish.  </span><br><span class=\"line\"> fun cancel() &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmSocket?.close()  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Could not close the client socket&quot;, e)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据传输\"><a class=\"anchor\" href=\"#数据传输\">#</a> 数据传输</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private val handler: Handler = Handler()  </span><br><span class=\"line\">val MESSAGE_READ: Int = 0  </span><br><span class=\"line\">val MESSAGE_WRITE: Int = 1  </span><br><span class=\"line\">val MESSAGE_TOAST: Int = 2  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">private inner class ConnectedThread(private val mmSocket: BluetoothSocket) : Thread() &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    private val mmInStream: InputStream = mmSocket.inputStream  </span><br><span class=\"line\"> private val mmOutStream: OutputStream = mmSocket.outputStream  </span><br><span class=\"line\"> private val mmBuffer: ByteArray = ByteArray(1024) // mmBuffer store for the stream  </span><br><span class=\"line\">  </span><br><span class=\"line\"> override fun run() &#123;  </span><br><span class=\"line\">        var numBytes: Int // bytes returned from read()  </span><br><span class=\"line\">  </span><br><span class=\"line\"> // Keep listening to the InputStream until an exception occurs. while (true) &#123;  </span><br><span class=\"line\">            // Read from the InputStream.  </span><br><span class=\"line\"> numBytes = try &#123;  </span><br><span class=\"line\">                mmInStream.read(mmBuffer)  </span><br><span class=\"line\">            &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">                Log.d(TAG, &quot;Input stream was disconnected&quot;, e)  </span><br><span class=\"line\">                break  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Send the obtained bytes to the UI activity.  </span><br><span class=\"line\"> val readMsg = handler.obtainMessage(  </span><br><span class=\"line\">                MESSAGE_READ, numBytes, -1,  </span><br><span class=\"line\">                mmBuffer)  </span><br><span class=\"line\">            readMsg.sendToTarget()  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Call this from the main activity to send data to the remote device.  </span><br><span class=\"line\"> fun write(bytes: ByteArray) &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmOutStream.write(bytes)  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Error occurred when sending data&quot;, e)  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Send a failure message back to the activity.  </span><br><span class=\"line\"> val writeErrorMsg = handler.obtainMessage(MESSAGE_TOAST)  </span><br><span class=\"line\">            val bundle = Bundle().apply &#123;  </span><br><span class=\"line\"> putString(&quot;toast&quot;, &quot;Couldn&#x27;t send data to the other device&quot;)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\"> writeErrorMsg.data = bundle  </span><br><span class=\"line\">            handler.sendMessage(writeErrorMsg)  </span><br><span class=\"line\">            return  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Share the sent message with the UI activity.  </span><br><span class=\"line\"> val writtenMsg = handler.obtainMessage(  </span><br><span class=\"line\">            MESSAGE_WRITE, -1, -1, mmBuffer)  </span><br><span class=\"line\">        writtenMsg.sendToTarget()  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Call this method from the main activity to shut down the connection.  </span><br><span class=\"line\"> fun cancel() &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmSocket.close()  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Could not close the connect socket&quot;, e)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"低功耗蓝牙bluetooth-low-energy\"><a class=\"anchor\" href=\"#低功耗蓝牙bluetooth-low-energy\">#</a> 低功耗蓝牙（Bluetooth Low Energy）</h1>\n<h2 id=\"ble设备发现\"><a class=\"anchor\" href=\"#ble设备发现\">#</a> BLE 设备发现</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmx1ZXRvb3RoLmNvbS9ibG9nL2FkdmVydGlzaW5nLXdvcmtzLXBhcnQtMS8=\">https://www.bluetooth.com/blog/advertising-works-part-1/</span><br />\n 低功耗蓝牙协议栈中包含的一个用来帮助设备彼此发现并连接的配置文件：Generic Access Profile (GAP)<br />\n 这个发现过程里面就有一个称之为 &quot;advertise'' 的动作，表明设备想被其他设备发现。<br />\n处于 Advertise 的设备会持续向周围发送很小的数据包，让周围的扫描设备能够发现它。<br />\n对于 GAP 协议来说 发送 advertise 广播的设备可以被看做是边缘设备；也可以作为一个广播者存在，不接受任何的连接请求，单纯只发送广播。</p>\n<p>处于扫描中的设备是作为 GAP 的观察者，当其对连接上其他设备感兴趣时，被作为 GAP 中心设备。</p>\n<p>概念：<br />\nPDU: packat data unit<br />\nADV: advertising 广播</p>\n<p>Android 中低功耗蓝牙发送广播与开启扫描方式：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//第一步依然是初始化BluetoothAdapter，</span><br><span class=\"line\">val adapter = BluetoothAdapter.getDefaultAdapter()</span><br><span class=\"line\"></span><br><span class=\"line\">// next step: </span><br><span class=\"line\"></span><br><span class=\"line\">//发送广播，在边缘设备上实现，Peripheral</span><br><span class=\"line\">fun startAdvertising()&#123;  </span><br><span class=\"line\">    bluetoothAdapter?.bluetoothLeAdvertiser?.run &#123;  </span><br><span class=\"line\"> val setting = AdvertiseSettings.Builder().apply &#123;  </span><br><span class=\"line\"> /*设置Advertise广播的参数  </span><br><span class=\"line\"> * 设置广播模式 三种模式:ADVERTISE_MODE_LOW_POWER 低功耗，默认模式  </span><br><span class=\"line\"> *                   ADVERTISE_MODE_BALANCED 平衡模式，平衡了广播频率与电量消耗  </span><br><span class=\"line\"> *                   ADVERTISE_MODE_LOW_LATENCY 传统模式，高耗电模式。  </span><br><span class=\"line\"> */ setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_POWER)  </span><br><span class=\"line\">            // 广播是否是可连接的  </span><br><span class=\"line\"> setConnectable(true)  </span><br><span class=\"line\">            //设置广播时长，如果为0，则不会中断  </span><br><span class=\"line\"> setTimeout(0)  </span><br><span class=\"line\">            /*  </span><br><span class=\"line\"> * 设置广播传输功耗等级，可以限制广播数据包的可见范围:  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_ULTRA_LOW 最低  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_LOW 低  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_MEDIUM 中  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_HIGH 高  </span><br><span class=\"line\"> * */ setTxPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_LOW)  </span><br><span class=\"line\">        &#125;.build()  </span><br><span class=\"line\">        // Ble广播数据包，需要注意的是AdvertiseData中包含的数据大小不能超过31个字节  </span><br><span class=\"line\"> val data = AdvertiseData.Builder().apply &#123;  </span><br><span class=\"line\"> setIncludeDeviceName(true)  </span><br><span class=\"line\">            setIncludeTxPowerLevel(true)  </span><br><span class=\"line\">            addServiceUuid(ParcelUuid.fromString(UUID.randomUUID().toString()))  </span><br><span class=\"line\">            addManufacturerData(0x0001, byteArrayOf())  </span><br><span class=\"line\">        &#125;.build()  </span><br><span class=\"line\">        val callback = object :AdvertiseCallback()&#123;  </span><br><span class=\"line\">            override fun onStartSuccess(settingsInEffect: AdvertiseSettings?) &#123;  </span><br><span class=\"line\">                super.onStartSuccess(settingsInEffect)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            override fun onStartFailure(errorCode: Int) &#123;  </span><br><span class=\"line\">                super.onStartFailure(errorCode)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        startAdvertising(setting,data,callback)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">//扫描广播，在中心设备上实现,Center  </span><br><span class=\"line\">fun discovery()&#123;  </span><br><span class=\"line\">    bluetoothAdapter?.bluetoothLeScanner?.apply &#123;   </span><br><span class=\"line\">val scanSetting = ScanSettings.Builder().apply &#123;   </span><br><span class=\"line\">setLegacy(true)  </span><br><span class=\"line\">            setScanMode(ScanSettings.SCAN_MODE_BALANCED)  </span><br><span class=\"line\">        &#125;.build()  </span><br><span class=\"line\">        val filter = mutableListOf&lt;ScanFilter&gt;().apply &#123;   </span><br><span class=\"line\">add(ScanFilter.Builder().apply &#123;   </span><br><span class=\"line\">setServiceUuid(ParcelUuid.fromString(UUID.randomUUID().toString()))  </span><br><span class=\"line\">                setManufacturerData(0x0001, byteArrayOf())  </span><br><span class=\"line\">            &#125;.build())  </span><br><span class=\"line\">        &#125;.toList()  </span><br><span class=\"line\">        startScan(filter,scanSetting,object: ScanCallback()&#123;  </span><br><span class=\"line\">            override fun onScanResult(callbackType: Int, result: ScanResult?) &#123;  </span><br><span class=\"line\">                super.onScanResult(callbackType, result)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            override fun onBatchScanResults(results: MutableList&lt;ScanResult&gt;?) &#123;  </span><br><span class=\"line\">                super.onBatchScanResults(results)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            override fun onScanFailed(errorCode: Int) &#123;  </span><br><span class=\"line\">                super.onScanFailed(errorCode)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Android",
                "蓝牙"
            ]
        },
        {
            "id": "http://example.com/2022/03/31/Android-Surface%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/",
            "url": "http://example.com/2022/03/31/Android-Surface%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/",
            "title": "Android Surface渲染机制",
            "date_published": "2022-03-30T16:37:12.000Z",
            "content_html": "<p>Android Surface 的渲染机制</p>\n<h1 id=\"1surface是什么\"><a class=\"anchor\" href=\"#1surface是什么\">#</a> 1.Surface 是什么？</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Handle onto a raw buffer that is being managed by the screen compositor.</span><br><span class=\"line\">A Surface is generally created by or from a consumer of image buffers (such as a SurfaceTexture, android.media.MediaRecorder, or android.renderscript.Allocation), and is handed to some kind of producer (such as OpenGL, MediaPlayer, or CameraDevice) to draw into.</span><br><span class=\"line\">Note: A Surface acts like a weak reference to the consumer it is associated with. By itself it will not keep its parent consumer from being reclaimed.</span><br></pre></td></tr></table></figure></p>\n<p>上面这段话是 Surface.java 这个类的注释，大致意思是：<br />\nSurface 是一个句柄，指向一个 raw buffer 缓冲对象，这个缓冲对象由 screen compositer 管理。Surface 通常由一个图像缓冲的消费者创建，例如 SurfaceTexture，MediaRecorder，Allocation。然后被送给各种消费者来绘制。</p>\n<h2 id=\"window创建流程\"><a class=\"anchor\" href=\"#window创建流程\">#</a> window 创建流程</h2>\n<p>在 Activity 的启动过程中，<br />\nActivityThread.handleLaunchActivity 中<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Override  </span><br><span class=\"line\">public Activity handleLaunchActivity(ActivityClientRecord r,  </span><br><span class=\"line\">        PendingTransactionActions pendingActions, Intent customIntent) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tWindowManagerGlobal.initialize();</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tfinal Activity a = performLaunchActivity(r, customIntent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tContextImpl appContext = createBaseContextForActivity(r);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tActivity activity = null;</span><br><span class=\"line\">\tactivity = mInstrumentation.newActivity(  </span><br><span class=\"line\">        cl, component.getClassName(), r.intent);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tApplication app = r.packageInfo.makeApplication(false, mInstrumentation);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tactivity.attach(appContext, this, getInstrumentation(), r.token,  </span><br><span class=\"line\">        r.ident, app, r.intent, r.activityInfo, title, r.parent,  </span><br><span class=\"line\">        r.embeddedID, r.lastNonConfigurationInstances, config,  </span><br><span class=\"line\">        r.referrer, r.voiceInteractor, window, r.configCallback,  </span><br><span class=\"line\">        r.assistToken, r.shareableActivityToken);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tmInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 在 Activity 的 attch 中，创建创建了 Window 对象。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final void attach(Context context, ActivityThread aThread,  </span><br><span class=\"line\">        Instrumentation instr, IBinder token, int ident,  </span><br><span class=\"line\">        Application application, Intent intent, ActivityInfo info,  </span><br><span class=\"line\">        CharSequence title, Activity parent, String id,  </span><br><span class=\"line\">        NonConfigurationInstances lastNonConfigurationInstances,  </span><br><span class=\"line\">        Configuration config, String referrer, IVoiceInteractor voiceInteractor,  </span><br><span class=\"line\">        Window window, ActivityConfigCallback activityConfigCallback, IBinder assistToken,  </span><br><span class=\"line\">        IBinder shareableActivityToken) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tattachBaseContext(context);  </span><br><span class=\"line\">  </span><br><span class=\"line\">\tmFragments.attachHost(null /*parent*/);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tmWindow = new PhoneWindow(this, window, activityConfigCallback);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tmWindow.setWindowManager(  </span><br><span class=\"line\">        (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),  </span><br><span class=\"line\">        mToken, mComponent.flattenToString(),  </span><br><span class=\"line\">        (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);  </span><br><span class=\"line\">\tif (mParent != null) &#123;  </span><br><span class=\"line\">    \tmWindow.setContainer(mParent.getWindow());  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\tmWindowManager = mWindow.getWindowManager();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\nActivity 中的 WindowManager 的初始化<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public void setWindowManager(WindowManager wm, IBinder appToken, String appName,  </span><br><span class=\"line\">        boolean hardwareAccelerated) &#123;  </span><br><span class=\"line\">    mAppToken = appToken;  </span><br><span class=\"line\">    mAppName = appName;  </span><br><span class=\"line\">    mHardwareAccelerated = hardwareAccelerated;  </span><br><span class=\"line\">    if (wm == null) &#123;  </span><br><span class=\"line\">        wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(this);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//WindowManagerImpl.java</span><br><span class=\"line\">public WindowManagerImpl createLocalWindowManager(Window parentWindow) &#123;  </span><br><span class=\"line\">    Bridge.getLog().fidelityWarning(ILayoutLog.TAG_UNSUPPORTED,  </span><br><span class=\"line\">            &quot;The preview does not support multiple windows.&quot;,  </span><br><span class=\"line\">            null, null, null);  </span><br><span class=\"line\">    return this;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\nActivityThread.handleResumeActivity 中<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//ActivityThread.java</span><br><span class=\"line\">public void handleResumeActivity(ActivityClientRecord r, boolean finalStateRequest,  </span><br><span class=\"line\">        boolean isForward, String reason) &#123;</span><br><span class=\"line\">\tif (r.activity.mVisibleFromClient) &#123;  </span><br><span class=\"line\">    \tr.activity.makeVisible();  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//Activity.java</span><br><span class=\"line\">void makeVisible() &#123;  </span><br><span class=\"line\">    if (!mWindowAdded) &#123;  </span><br><span class=\"line\">        ViewManager wm = getWindowManager();  </span><br><span class=\"line\">        wm.addView(mDecor, getWindow().getAttributes());  </span><br><span class=\"line\">        mWindowAdded = true;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    mDecor.setVisibility(View.VISIBLE);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 会通过 <code>WindowManager.addView(View,Attributes)</code>  将 DecorView 添加到 Window 上。</p>\n<p>WindowManager 实现类是 WindowManagerImpl，他又将添加 View 的操作委托给了 WindowmanagerGlobal。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//WindowmanagerGlobal</span><br><span class=\"line\">public void addView(View view, ViewGroup.LayoutParams params,  </span><br><span class=\"line\">        Display display, Window parentWindow, int userId) &#123;</span><br><span class=\"line\">\tViewRootImpl root = new ViewRootImpl(view.getContext(), display);</span><br><span class=\"line\">\troot.setView(view, wparams, panelParentView, userId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//ViewRootImpl</span><br><span class=\"line\">public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView,  </span><br><span class=\"line\">        int userId) &#123;</span><br><span class=\"line\">\t//启动Choreographer的Vsync信号监听，</span><br><span class=\"line\">\trequestLayout();</span><br><span class=\"line\">\t//通过WindowSession请求wms，这里的WindowSession是一个binder接口。</span><br><span class=\"line\">\tes = mWindowSession.addToDisplayAsUser(mWindow, mWindowAttributes,  </span><br><span class=\"line\">        getHostVisibility(), mDisplay.getDisplayId(), userId,  </span><br><span class=\"line\">        mInsetsController.getRequestedVisibility(), inputChannel, mTempInsets,  </span><br><span class=\"line\">        mTempControls);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//WindowSession初始化</span><br><span class=\"line\">public static IWindowSession getWindowSession() &#123;  </span><br><span class=\"line\">    synchronized (WindowManagerGlobal.class) &#123;  </span><br><span class=\"line\">        if (sWindowSession == null) &#123;  </span><br><span class=\"line\">            try &#123;  </span><br><span class=\"line\">                // Emulate the legacy behavior.  The global instance of InputMethodManager  </span><br><span class=\"line\"> // was instantiated here. // TODO(b/116157766): Remove this hack after cleaning up @UnsupportedAppUsage InputMethodManager.ensureDefaultInstanceForDefaultDisplayIfNecessary();  </span><br><span class=\"line\">                IWindowManager windowManager = getWindowManagerService();  </span><br><span class=\"line\">                sWindowSession = windowManager.openSession(  </span><br><span class=\"line\">                        new IWindowSessionCallback.Stub() &#123;  </span><br><span class=\"line\">                            @Override  </span><br><span class=\"line\"> public void onAnimatorScaleChanged(float scale) &#123;  </span><br><span class=\"line\">                                ValueAnimator.setDurationScale(scale);  </span><br><span class=\"line\">                            &#125;  </span><br><span class=\"line\">                        &#125;);  </span><br><span class=\"line\">            &#125; catch (RemoteException e) &#123;  </span><br><span class=\"line\">                throw e.rethrowFromSystemServer();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return sWindowSession;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 从这里进入了 system_server 中的 WMS 进行执行<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Session.java   Session是IWindowSession这个AIDL接口的实现类，是应用与WMS进行交互的接口</span><br><span class=\"line\">@Override  </span><br><span class=\"line\">public int addToDisplay(IWindow window, WindowManager.LayoutParams attrs,  </span><br><span class=\"line\">        int viewVisibility, int displayId, InsetsState requestedVisibility,  </span><br><span class=\"line\">        InputChannel outInputChannel, InsetsState outInsetsState,  </span><br><span class=\"line\">        InsetsSourceControl[] outActiveControls) &#123;  </span><br><span class=\"line\">    return mService.addWindow(this, window, attrs, viewVisibility, displayId,  </span><br><span class=\"line\">            UserHandle.getUserId(mUid), requestedVisibility, outInputChannel, outInsetsState,  </span><br><span class=\"line\">            outActiveControls);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 最后进入了 WindowManagerService 中执行：</p>\n<h2 id=\"surface的创建\"><a class=\"anchor\" href=\"#surface的创建\">#</a> Surface 的创建</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.WindowManagerService.addWindow()</span><br><span class=\"line\">public int addWindow(Session session, IWindow client, LayoutParams attrs, int viewVisibility,  </span><br><span class=\"line\">        int displayId, int requestUserId, InsetsState requestedVisibility,  </span><br><span class=\"line\">        InputChannel outInputChannel, InsetsState outInsetsState,  </span><br><span class=\"line\">        InsetsSourceControl[] outActiveControls) &#123;</span><br><span class=\"line\">\tfinal DisplayContent displayContent = getDisplayContentOrCreate(displayId, attrs.token);</span><br><span class=\"line\">\tWindowToken token = displayContent.getWindowToken(  </span><br><span class=\"line\">        hasParent ? parentWindow.mAttrs.token : attrs.token);</span><br><span class=\"line\">\tif (token == null) &#123;</span><br><span class=\"line\">\t\ttoken = new WindowToken.Builder(this, binder, type)  </span><br><span class=\"line\">        .setDisplayContent(displayContent)  </span><br><span class=\"line\">        .setOwnerCanManageAppTokens(session.mCanAddInternalSystemWindow)  </span><br><span class=\"line\">        .setRoundedCornerOverlay(isRoundedCornerOverlay)  </span><br><span class=\"line\">        .build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfinal WindowState win = new WindowState(this, session, client, token, parentWindow,  </span><br><span class=\"line\">        appOp[0], attrs, viewVisibility, session.mUid, userId,  </span><br><span class=\"line\">        session.mCanAddInternalSystemWindow);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\twin.attach();</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//2.WindowSession.attach()</span><br><span class=\"line\">void attach() &#123;  </span><br><span class=\"line\">    mSession.windowAddedLocked();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//3.Session.windowAddedLocked()</span><br><span class=\"line\"> void windowAddedLocked()&#123;</span><br><span class=\"line\"> \t...</span><br><span class=\"line\"> \tmSurfaceSession = new SurfaceSession();</span><br><span class=\"line\"> \t...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> //4.SurfaceSession</span><br><span class=\"line\"> public SurfaceSession() &#123;  </span><br><span class=\"line\">    mNativeClient = nativeCreate();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">5.android_view_SurfaceSession.nativeCreate()</span><br><span class=\"line\">static jlong nativeCreate()&#123;</span><br><span class=\"line\">\tSurfaceClientComposer* client = new SurfaceClientComposer();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"surface上屏流程\"><a class=\"anchor\" href=\"#surface上屏流程\">#</a> Surface 上屏流程</h2>\n<p>1.Android 发送了 Vsync 垂直同步脉冲信号</p>\n<p>-&gt; DisplaySync<br />\n-&gt;Choreographer 接收到 Vsync-app 信号<br />\n -&gt;Choreographer 回调 doFrame<br />\n-&gt;ViewRootImpl 执行 scheduleTravesals, 同时发送一个同步屏障<br />\n -&gt; 取消同步屏障，执行 performTravesals<br />\n-&gt;performMeasure(),performLayout(),performDraw()<br />\n-&gt; 申请 BufferQueue 中的图像缓冲区对象<br />\n -&gt;RenderThread 发送 OpenGL 命令<br />\n -&gt;queueBuffer</p>\n<p>-&gt;DisplaySync<br />\n-&gt;SurfaceFlinger 收到 Vsync-sf<br />\n-&gt; 释放上一次获取 buffer 缓冲区对象<br />\n -&gt;onMessageReceive (INVALIDATE)   判断当前是否有 Layer 状态发生变化，BufferQueue 中是否有新数据<br />\n -&gt;onMessageReceive (REFRESH)  获取了 LAYER 后，将 buffer 发送给 HWC 进行合成图层<br />\n -&gt; 图层合成后通过 drm 将帧送显上屏<br />\n -&gt;HWC 归还 buffer 给 surfaceFlinger，待下一次 Vsync-sf 时 release 这次的 buffer。</p>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "http://example.com/2022/03/30/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/",
            "url": "http://example.com/2022/03/30/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/",
            "title": "Android系统启动流程",
            "date_published": "2022-03-29T16:12:13.000Z",
            "content_html": "<p>Android 启动分 5 个阶段：</p>\n<h2 id=\"bootloader\"><a class=\"anchor\" href=\"#bootloader\">#</a> BootLoader</h2>\n<p>上电后引导芯片从指定位置加载 bootloader 程序，初始化 ram，<br />\n然后启动 linux 内核</p>\n<h2 id=\"linux内核\"><a class=\"anchor\" href=\"#linux内核\">#</a> Linux 内核</h2>\n<p>启动 linux 内核后，会初始化内存管理单元和缓存，进程管理。<br />\n加载驱动：Display Driver，Camera Driver, Input，Binder Driver 等。<br />\n最后启动 init 进程</p>\n<h2 id=\"init进程\"><a class=\"anchor\" href=\"#init进程\">#</a> init 进程</h2>\n<p>linux 内核启动中创建，是内核创建的第一个用户进程，pid 为 1，执行分两个阶段，分别在从内核态和用户态执行。</p>\n<ul>\n<li>\n<p>第一阶段，设置环境变量，创建挂载文件系统，设置 selinux，</p>\n</li>\n<li>\n<p>第二阶段，初始化启动属性服务，解析 init.rc 文件，启动 ServiceManager, 然后启动 Zygote 进程，最后自身进入一个无限循环等待事件处理。</p>\n</li>\n</ul>\n<h2 id=\"zygote\"><a class=\"anchor\" href=\"#zygote\">#</a> Zygote</h2>\n<p>创建 Java 虚拟机（Dalvik/ART）<br />\n注册 JNI 函数<br />\n通过 JNI 调用到 zygoteInit.java 类中的 main 方法，第一次进入 Java 世界。<br />\n创建一个 Socket 并监听来自 AMS 的 fork 请求<br />\n启动 system_server 进程</p>\n<h2 id=\"system_server\"><a class=\"anchor\" href=\"#system_server\">#</a> system_server</h2>\n<p>启动 binder 线程池<br />\n创建 SystemServiceManager 负责创建其他系统服务<br />\n创建 AMS,WMS,PWS,IMS 等系统服务</p>\n",
            "tags": [
                "Android",
                "系统"
            ]
        },
        {
            "id": "http://example.com/2022/03/26/ExoPlayer-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%881%EF%BC%89/",
            "url": "http://example.com/2022/03/26/ExoPlayer-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%881%EF%BC%89/",
            "title": "ExoPlayer 源码解析（1）",
            "date_published": "2022-03-26T10:52:40.000Z",
            "content_html": "<h1 id=\"start\"><a class=\"anchor\" href=\"#start\">#</a> Start</h1>\n<h2 id=\"1exoplayer起播时序图\"><a class=\"anchor\" href=\"#1exoplayer起播时序图\">#</a> 1.ExoPlayer 起播时序图</h2>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/b5348f57gy1h0oaiq9lpej21e313iqpe.jpg\" alt=\"ExoPlayer播放.drawio\" /></p>\n<h2 id=\"2exoplayer的初始化\"><a class=\"anchor\" href=\"#2exoplayer的初始化\">#</a> 2.ExoPlayer 的初始化</h2>\n<p>先看看 ExoPlayer 的初始化</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected StyledPlayerView playerView;</span><br><span class=\"line\">private DataSource.Factory dataSourceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">void onCreate(@Nullable Bundle savedInstanceState)&#123;</span><br><span class=\"line\">\t//创建</span><br><span class=\"line\">\tdataSourceFactory = DemoUtil.getDataSourceFactory(/* context= */ this);</span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t//获取在XML中声明的StyledPlayerView对象</span><br><span class=\"line\">\tplayerView = findViewById(R.id.player_view);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化ExoPlayer</span><br><span class=\"line\">void initializePlayer()&#123;</span><br><span class=\"line\">\t//创建播放媒体列表对象</span><br><span class=\"line\">\tmediaItems = createMediaItems(intent);</span><br><span class=\"line\">\t//创建渲染器工厂对象</span><br><span class=\"line\">\tRenderersFactory renderersFactory =  </span><br><span class=\"line\">   DemoUtil.buildRenderersFactory(/* context= */ this, preferExtensionDecoders);</span><br><span class=\"line\">\t//创建媒体通道选择器对象</span><br><span class=\"line\">\ttrackSelector = new DefaultTrackSelector(/* context= */ this);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t//创建ExoPlayer对象</span><br><span class=\"line\">\tplayer =  new ExoPlayer.Builder(/* context= */ this)  </span><br><span class=\"line\">       \t.setRenderersFactory(renderersFactory)  //设置渲染器工厂对象  </span><br><span class=\"line\">       \t.setMediaSourceFactory(createMediaSourceFactory())    //设置媒体源工厂对象  </span><br><span class=\"line\">       \t.setTrackSelector(trackSelector)    //设置媒体通道选择器  </span><br><span class=\"line\">       \t.build();</span><br><span class=\"line\">\tplayer.setTrackSelectionParameters(trackSelectionParameters);</span><br><span class=\"line\">\t//设置播放器事件回调</span><br><span class=\"line\">\tplayer.addListener(new PlayerEventListener());  </span><br><span class=\"line\">\t//设置音频参数</span><br><span class=\"line\">\tplayer.setAudioAttributes(AudioAttributes.DEFAULT, /* handleAudioFocus= */ true);  </span><br><span class=\"line\">\t//设置是否自动开始播放</span><br><span class=\"line\">\tplayer.setPlayWhenReady(startAutoPlay);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tplayer.prepare();</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>上面就是 ExoPlayer 的播放代码，总结一下播放的流程：</p>\n<ol>\n<li>创建 DataSource.Factory 工厂对象</li>\n<li>创建 StyledPlayerView 播放器 UI 对象</li>\n<li>创建 RenderersFactory 对象</li>\n<li>创建 MediaSource.Factory 对象</li>\n<li>创建 TrackSelector 对象</li>\n<li>通过 ExoPlayer.Builder 对象构造 ExoPlayer 对象</li>\n<li>添加播放器事件回调，设置默认音频参数</li>\n<li>设置是否自动开始播放</li>\n<li>开始起播</li>\n</ol>\n<h2 id=\"3重要的对象\"><a class=\"anchor\" href=\"#3重要的对象\">#</a> 3. 重要的对象</h2>\n<ol>\n<li>\n<p>DataSource.Factory<br />\nDataSource.Factory 是负责创建 DataSource 对象的工厂类</p>\n</li>\n<li>\n<p>DataSource 代表 Uri 识别的数据源，根据不同的协议从不同媒体介质中获取视频数据流<br />\n下面是 ExoPlayer 实现了的数据源类型<br />\n<img data-src=\"https://tvax3.sinaimg.cn/large/b5348f57gy1h0oajo70wvj20xz0pdb0a.jpg\" alt=\"DataSource实现类\" /></p>\n</li>\n<li>\n<p>StyledPlayerView<br />\n 播放器 UI 对象，包含了视频 UI，控制器 UI，字幕，专辑等</p>\n</li>\n<li>\n<p>RenderersFactory<br />\nRenderersFactory 是负责创建 Renderer 的工厂对象。</p>\n</li>\n<li>\n<p>Renderer 渲染器<br />\n ExoPlayer 定义了 6 种 Renderer 对象：</p>\n</li>\n</ol>\n<ul>\n<li>VideoRenderer    视频渲染器，负责视频渲染，实现类有 MediaCodecVideoRenderer，还有 ffmpeg 扩展</li>\n<li>AudioRenderer   音频渲染器</li>\n<li>TextRenderer  字幕渲染器</li>\n<li>MetadataRenderer  视频元数据渲染器</li>\n<li>CameraMotionRenderer  相机动作渲染器，CameraMotionRenderer 是处理相机拍摄的视频播放时，相机在物理上可能会有旋转动作，导致相机拍摄的视频也会产生 rotation，所以在播放相机拍摄的视频时需要解析视频中的 rotation 属性，然后在 OpenGL ES 渲染的时候，将窗口进行旋转，使画面恢复正常方向。</li>\n<li>MiscellaneousRenderer  混合渲染器 ，Google 暂时没有实现该渲染器，应该是留作扩展用。<br />\n<img data-src=\"https://tvax4.sinaimg.cn/large/b5348f57gy1h0oak2u83fj20y80ieasz.jpg\" alt=\"Renderer实现类\" /></li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>MediaSource.Factory<br />\nMediaSource.Factory 是负责构造 MediaSource 对象的工厂类</p>\n</li>\n<li>\n<p>MediaSource 媒体源，ExoPlayer 使用 MediaSource 实现了多视频播放逻辑，还有不停了流媒体协议类型等。<br />\nExoPlayer 预定义的 MediaSource 类型：<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/b5348f57gy1h0oakcx1ssj20xi0exk6h.jpg\" alt=\"MediaSource实现类\" /></p>\n</li>\n<li>\n<p>TrackSelector<br />\n 选择器：</p>\n</li>\n</ol>\n<ul>\n<li>媒体流：用于在播放时选择容器中封装的的不同的视频、音频通道，比如在 HLS\\DASH 流播放时根据网络带宽，设备性能选择不同分辨率的流。</li>\n<li>通道：播放时根据情况选择视频中不同的视频 \\ 音频 \\ 字幕通道。</li>\n</ul>\n<h1 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> End</h1>\n<p>这里先粗略分析了一下 ExoPlayer 大致播放流程，还有部分的类的介绍，后面再根据情况对不同模块进行分析。</p>\n",
            "tags": [
                "Android",
                "多媒体",
                "ExoPlayer"
            ]
        },
        {
            "id": "http://example.com/2019/03/28/LeetCode-17/",
            "url": "http://example.com/2019/03/28/LeetCode-17/",
            "title": "LeetCode 17",
            "date_published": "2019-03-28T12:30:25.000Z",
            "content_html": "<p>LeetCode 第 17 题 Java 实现<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbGV0dGVyLWNvbWJpbmF0aW9ucy1vZi1hLXBob25lLW51bWJlci8=\">电话号码的字母组合</span></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static Map&lt;String, String&gt; map;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        map = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        map.put(&quot;0&quot;, &quot;&quot;);</span><br><span class=\"line\">        map.put(&quot;1&quot;, &quot;&quot;);</span><br><span class=\"line\">        map.put(&quot;2&quot;, &quot;abc&quot;);</span><br><span class=\"line\">        map.put(&quot;3&quot;, &quot;def&quot;);</span><br><span class=\"line\">        map.put(&quot;4&quot;, &quot;ghi&quot;);</span><br><span class=\"line\">        map.put(&quot;5&quot;, &quot;jkl&quot;);</span><br><span class=\"line\">        map.put(&quot;6&quot;, &quot;mno&quot;);</span><br><span class=\"line\">        map.put(&quot;7&quot;, &quot;pqrs&quot;);</span><br><span class=\"line\">        map.put(&quot;8&quot;, &quot;tuv&quot;);</span><br><span class=\"line\">        map.put(&quot;9&quot;, &quot;wxyz&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public List&lt;String&gt; letterCombinations(String digits) &#123;</span><br><span class=\"line\">        if(digits == null || digits.length() == 0)&#123;</span><br><span class=\"line\">            return new ArrayList&lt;String&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return recusiveResult(digits, 0, digits.length() - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;String&gt; recusiveResult(String digits, int left, int right) &#123;</span><br><span class=\"line\">        List&lt;String&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        if (left == right) &#123;</span><br><span class=\"line\">            String str = map.get(digits.charAt(left) + &quot;&quot;);</span><br><span class=\"line\">            for (int j = 0; j &lt; str.length(); j++) &#123;</span><br><span class=\"line\">                result.add(str.charAt(j) + &quot;&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else if (left == right - 1) &#123;</span><br><span class=\"line\">            String Sleft = map.get(digits.charAt(left) + &quot;&quot;);</span><br><span class=\"line\">            String Sright = map.get(digits.charAt(right) + &quot;&quot;);</span><br><span class=\"line\">            if (Sleft != null &amp;&amp; Sleft.length() &gt; 0 &amp;&amp; Sright != null &amp;&amp; Sright.length() &gt; 0) &#123;</span><br><span class=\"line\">                for (int i = 0; i &lt; Sleft.length(); i++) &#123;</span><br><span class=\"line\">                    for (int j = 0; j &lt; Sright.length(); j++) &#123;</span><br><span class=\"line\">                        result.add(Sleft.charAt(i) + &quot;&quot; + Sright.charAt(j));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                if (Sleft != null &amp;&amp; Sleft.length() &gt; 0) &#123;</span><br><span class=\"line\">                    for (int i = 0; i &lt; Sleft.length(); i++) &#123;</span><br><span class=\"line\">                        result.add(Sleft.charAt(i) + &quot;&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    for (int i = 0; i &lt; Sright.length(); i++) &#123;</span><br><span class=\"line\">                        result.add(Sright.charAt(i) + &quot;&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            int mid = (left + right) / 2;</span><br><span class=\"line\">            List&lt;String&gt; lefStrings = recusiveResult(digits, left, mid);</span><br><span class=\"line\">            List&lt;String&gt; rightStrings = recusiveResult(digits, mid + 1, right);</span><br><span class=\"line\"></span><br><span class=\"line\">            for (int i = 0; i &lt; lefStrings.size(); i++) &#123;</span><br><span class=\"line\">                for (int j = 0; j &lt; rightStrings.size(); j++) &#123;</span><br><span class=\"line\">                    result.add(lefStrings.get(i) + rightStrings.get(j));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/2018/06/10/HLS%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "url": "http://example.com/2018/06/10/HLS%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "title": "HLS知识点",
            "date_published": "2018-06-10T12:07:41.000Z",
            "content_html": "<h2 id=\"hls协议简介\"><a class=\"anchor\" href=\"#hls协议简介\">#</a> HLS 协议简介</h2>\n<p>全称 HTTP Live Streaming，是由苹果公司开发的用于支持在线音视频播放的流媒体协议，该协议是基于 HTTP 协议实现的。</p>\n<p>HLS 是由 m3u8 配置文件和 TS 分片文件组成的。</p>\n<h2 id=\"m3u8\"><a class=\"anchor\" href=\"#m3u8\">#</a> m3u8</h2>\n<p>m3u8 是 m3u 文件的一种，是 HLS 定义的配置文件，客户端从该文件中解析出播放所需的元数据后，从中寻找可用的媒体流的地址，然后下载媒体流进行播放。</p>\n<p>m3u8 其实是一个播放列表文件 playlist，里面记录了可用的媒体片段信息，m3u8 文件支持嵌套。</p>\n<p>m3u8 文件结构：</p>\n<ul>\n<li>EXTM3U    文件第一行配置指定这是一个 M3u8 文件</li>\n<li>EXT-X-MEDIA-SEQUENCE  第一个 TS 分片起始位置序号；直播时则为直播段起始位置</li>\n<li>EXT-X-TARGETDURATION 每个分片最大时长</li>\n<li>EXT-X-ALLOW-CACHE 是否运行缓存</li>\n<li>EXT-X-ENDLIST 文件结束符，如果是直播流，则没有文件结束符</li>\n<li>EXTINF 附加信息，分片的时长，带宽等</li>\n<li>EXT-X-VERSION m3u8 版本号</li>\n<li>EXT-X-DISCONTINUITY 分片中断</li>\n<li>EXT-X-PLAYLIST-TYPE 流媒体类型\n<ul>\n<li>类型： VOD  表明是点播源，文件中应该也有 ENDLIST 标签</li>\n<li>类型： EVENT   表明是直播源，文件中应该没有 ENDLIST 标签，不允许服务器修改已有的数据，但是可以在文件结尾添加新数据。</li>\n</ul>\n</li>\n<li>EXT-X-KEY  是否加密解析</li>\n</ul>\n<h3 id=\"广告插入\"><a class=\"anchor\" href=\"#广告插入\">#</a> 广告插入</h3>\n<p>可以在 m3u8 中插入广告的 ts，实现广告的播放，但是有个问题是广告的视频编码格式与原视频可能不一样，所以需要在广告的 TS 分片前后加上 DISCONTINUITY 这个标签，表明视频前后中断，需要客户端去处理该情况。</p>\n<h2 id=\"mpeg-2-transport-stream\"><a class=\"anchor\" href=\"#mpeg-2-transport-stream\">#</a> MPEG-2 Transport Stream</h2>\n<p>更有弹性避免包丢失和损坏</p>\n<p>ts 流的数据包固定大小为 188 字节，由 4 个字节的头和 184 字节组成，</p>\n",
            "tags": [
                "多媒体",
                "流媒体协议",
                "HLS"
            ]
        },
        {
            "id": "http://example.com/2017/07/12/OpenGL-ES2-0%E4%B8%AD%E7%9A%84%E7%BA%B9%E7%90%86/",
            "url": "http://example.com/2017/07/12/OpenGL-ES2-0%E4%B8%AD%E7%9A%84%E7%BA%B9%E7%90%86/",
            "title": "OpenGL ES2.0中的纹理",
            "date_published": "2017-07-12T02:49:46.000Z",
            "content_html": "<h1 id=\"opengl-中的texture纹理\"><a class=\"anchor\" href=\"#opengl-中的texture纹理\">#</a> OpenGL 中的 Texture（纹理）</h1>\n<p>翻译自<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sZWFybm9wZW5nbGVzLmNvbS9hbmRyb2lkLWxlc3Nvbi1mb3VyLWludHJvZHVjaW5nLWJhc2ljLXRleHR1cmluZy8=\"> Android 课程 3：基础纹理</span> 英语好的小伙伴可以直接去这个网站学习 OpenGL ES2</p>\n<h2 id=\"纹理介绍\"><a class=\"anchor\" href=\"#纹理介绍\">#</a> 纹理介绍</h2>\n<p>纹理映射技术是构建一个真实 3D 世界最重要的方式。没有纹理映射的话，所以的东西都是光滑的渐变，看起来像人造的，像是 90 年代的控制台游戏</p>\n<p>首先大量使用了纹理技术的游戏，比如 Doom 和 Duke Nukem 3D，通过添加的视觉影响能极大的增强了游戏的真实性。</p>\n<h2 id=\"纹理坐标系\"><a class=\"anchor\" href=\"#纹理坐标系\">#</a> 纹理坐标系</h2>\n<p>在 OpenGL 中，纹理坐标系使用（s，t）来代替（x，y）坐标，代表纹理上的点，最终映射到几何形上。另外需要注意的是纹理坐标系和其他的 OpenGL 坐标系一样，t（y）轴指向上，因此位置越高值越大。</p>\n<p>[外链图片转存失败，源站可能有防盗链机制，建议将图片保存下来直接上传 (img-AiDSpFC1-1648314308409)(<span class=\"exturl\" data-url=\"aHR0cDovL2ltZzQuaW1ndG4uYmRpbWcuY29tL2l0L3U9MjIyNjEzNjg0MywxNjkzMDA3ODk1JmFtcDtmbT0yNiZhbXA7Z3A9MC5qcGc=\">http://img4.imgtn.bdimg.com/it/u=2226136843,1693007895&amp;fm=26&amp;gp=0.jpg</span>)]</p>\n<h2 id=\"纹理映射\"><a class=\"anchor\" href=\"#纹理映射\">#</a> 纹理映射</h2>\n<p>在这课中注意看 2D 纹理 (GL_TEXTURE_2D)。OpenGL ES 也提供了其他的纹理模型让你做不同和专业的效果。</p>\n<h3 id=\"顶点着色器\"><a class=\"anchor\" href=\"#顶点着色器\">#</a> 顶点着色器</h3>\n<p>从之前博客中的顶点着色器，增加一些修改：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attribute vec2 a_TexCoordinate;</span><br><span class=\"line\">...</span><br><span class=\"line\">varying vec2 v_TexCoordinate;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">//将纹理坐标信息传递给片段着色器</span><br><span class=\"line\">v_TexCoordinate = a_TexCoordinate;</span><br></pre></td></tr></table></figure><br />\n 在顶点着色器中我们添加了一个新的 attribute 类型 2 维向量来携带纹理的坐标信息作为输入数据。这会是基于每个顶点的，就像是位置，颜色，法线数据一样。我们还添加了一个新的 varying 型的变量来将数据传递进片段着色器中，通过三角形表面线性插入。</p>\n<h3 id=\"片段着色器\"><a class=\"anchor\" href=\"#片段着色器\">#</a> 片段着色器</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uniform sampler2D u_Texture;</span><br><span class=\"line\">...</span><br><span class=\"line\">\u0010varing vec2 v_TexCoordinate;</span><br><span class=\"line\">..</span><br><span class=\"line\">diffuse = diffuse * (1.0/(1.0+(0.1.*distance)));</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">diffuse = diffuse + 0.3;</span><br><span class=\"line\"></span><br><span class=\"line\">gl_FragColor = (c_Color*diffuse*texture2D(u_Texture,v_TexCoordinate));</span><br></pre></td></tr></table></figure></p>\n<p>我们添加了一个新的 uniform 类型 sampler2D 代表了实际的纹理数据 ()，v_TexCoordinate 从顶点着色器中获取到了纹理坐标数据，之后我们调用 texture2D (texture,textureCoordinate) 来读出纹理在当前坐标处的值。获取到了这个值后将它与其它项相乘就得到了最后的输出颜色。这种方式添加的纹理会有时在整个环境中较暗，所以可以将环境光上调一些来减少光的衰减。</p>\n<h3 id=\"从一个图像中加载纹理\"><a class=\"anchor\" href=\"#从一个图像中加载纹理\">#</a> 从一个图像中加载纹理</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int loadTexture(Bitmap bitmap)&#123;</span><br><span class=\"line\">       int[] textureHandle = new int[1];</span><br><span class=\"line\">       //由OpenGL ES生成一个纹理句柄并存放到textureHandle中</span><br><span class=\"line\">       GLES20.glGenTextures(1,textureHandle,0);</span><br><span class=\"line\">       if(textureHandle[0]!=0)&#123;</span><br><span class=\"line\">           //将纹理绑定到OpenGL上</span><br><span class=\"line\">           GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,textureHandle[0]);</span><br><span class=\"line\">           // Set filtering</span><br><span class=\"line\">           GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);</span><br><span class=\"line\">           GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);</span><br><span class=\"line\"></span><br><span class=\"line\">           GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">           // Recycle the bitmap, since its data has been loaded into OpenGL.</span><br><span class=\"line\">           bitmap.recycle();</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       if (textureHandle[0] == 0)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           throw new RuntimeException(&quot;Error loading texture.&quot;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       return textureHandle[0];</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure><br />\n 传入一个 Bitmap 对象并将其加载到 OpenGL 中</p>\n<h3 id=\"定义纹理坐标\"><a class=\"anchor\" href=\"#定义纹理坐标\">#</a> 定义纹理坐标</h3>\n<p>我们知道纹理坐标系左下是（0，0），而右上是（1，1），而我们的之前定义一个矩形是</p>\n<p>-1,1，</p>\n<p>-1,-1,</p>\n<p>1,1,</p>\n<p>-1,-1,</p>\n<p>1,-1,</p>\n<p>1,1</p>\n<p>这样的顺序定义的，<br />\n我们的纹理坐标应该是怎么样的呢：</p>\n<p>0f,0f,</p>\n<p>0f,1f,</p>\n<p>1f,0f,</p>\n<p>0f,1f,</p>\n<p>1f,1f,</p>\n<p>1f,0f.</p>\n<p>这个坐标的对应顺序可以自己在纸上画一下来增强理解.<br />\n(我个人理解和这个文章的作者不一样，在 Android 上，纹理坐标系好像是和 Android 的 2d 坐标系相同，Android 的 2D 坐标系是 y 轴向下为正，x 轴向右为正，坐标原点为左上，以左上角为 (0,0)，所以将纹理映射到 OpenGL 坐标系中就是上面这样)</p>\n<h3 id=\"使用纹理\"><a class=\"anchor\" href=\"#使用纹理\">#</a> 使用纹理</h3>\n<p>在 GLES20.glUseProgram 之后添加下面的代码：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//纹理坐标句柄</span><br><span class=\"line\">mTextureHandle = GLES20.glGetAttribLocation(Program,&quot;a_TexCoordinate&quot;);</span><br><span class=\"line\">//纹理采样器句柄</span><br><span class=\"line\">mTextureCoordHandle = GLES20.glGetUniformLocation(Program,&quot;u_Texture&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">//将纹理坐标传递进着色器程序</span><br><span class=\"line\">mTriangleTexture.position(0);</span><br><span class=\"line\">GLES20.glVertexAttribPointer(mTextureHandle,2 ,GLES20.GL_FLOAT,false,0,mTriangleTexture);</span><br><span class=\"line\">GLES20.glEnableVertexAttribArray(mTextureHandle);</span><br><span class=\"line\"></span><br><span class=\"line\">//激活第一个纹理单元</span><br><span class=\"line\">GLES20.glActiveTexture(GLES20.GL_TEXTURE0);</span><br><span class=\"line\">//绑定纹理到指定的纹理通道，GL_TEXTURE_2D在着色器中就会使用simpler2D。</span><br><span class=\"line\">GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mTextureDataHandle);</span><br><span class=\"line\">//只使用一个纹理的话给Simpler2D传0就可以</span><br><span class=\"line\">GLES20.glUniform1i(mTextureCoordHandle,0);</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "图像处理",
                "OpenGL ES",
                "OpenGL ES2.0"
            ]
        },
        {
            "id": "http://example.com/2017/07/10/OpenGL-ES2-0%E4%B8%AD%E7%9A%84%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2/",
            "url": "http://example.com/2017/07/10/OpenGL-ES2-0%E4%B8%AD%E7%9A%84%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2/",
            "title": "OpenGL ES2.0中的坐标变换",
            "date_published": "2017-07-10T13:20:47.000Z",
            "content_html": "<h1 id=\"opengl-es中的坐标变换\"><a class=\"anchor\" href=\"#opengl-es中的坐标变换\">#</a> OpenGL ES 中的坐标变换</h1>\n<h2 id=\"opengl-es中的坐标系\"><a class=\"anchor\" href=\"#opengl-es中的坐标系\">#</a> OpenGL ES 中的坐标系</h2>\n<ul>\n<li>世界坐标系</li>\n<li>纹理坐标系</li>\n<li>物体坐标系</li>\n<li>眼坐标系或相机坐标系</li>\n<li>裁剪坐标系</li>\n<li>屏幕坐标系</li>\n</ul>\n<h3 id=\"世界坐标系\"><a class=\"anchor\" href=\"#世界坐标系\">#</a> 世界坐标系</h3>\n<p>世界坐标系是 OpenGL 中描绘三位空间的坐标系</p>\n<h3 id=\"纹理坐标系\"><a class=\"anchor\" href=\"#纹理坐标系\">#</a> 纹理坐标系</h3>\n<p>一种假象的坐标系<br />\n可以叫 UV 坐标系<br />\n一个纹理的纹理坐标左上角为（0，0），右下为（1，1），坐标用浮点数表示<br />\n [外链图片转存中...(img-RtLrvTin-1648314227884)]</p>\n<h3 id=\"物体坐标系\"><a class=\"anchor\" href=\"#物体坐标系\">#</a> 物体坐标系</h3>\n<p>相对于单个物体的坐标系</p>\n<h3 id=\"相机坐标系\"><a class=\"anchor\" href=\"#相机坐标系\">#</a> 相机坐标系</h3>\n<p>相机坐标系是以相机为原地，相机观察方向 z 轴向内为正方向的坐标系</p>\n<h3 id=\"裁剪坐标系\"><a class=\"anchor\" href=\"#裁剪坐标系\">#</a> 裁剪坐标系</h3>\n<p>将相机坐标系乘以 ProjectionMatrix 就可以得到裁剪坐标系</p>\n<h3 id=\"屏幕坐标系\"><a class=\"anchor\" href=\"#屏幕坐标系\">#</a> 屏幕坐标系</h3>\n<p>最终显示到屏幕上的坐标系</p>\n<h3 id=\"坐标变换\"><a class=\"anchor\" href=\"#坐标变换\">#</a> 坐标变换</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/4b5aa0e7049bdab4fcd7db83190de3f0.png\" alt=\"OpenGL中的坐标变换\" /></p>\n<h3 id=\"在android进行opengles的坐标矩阵变换\"><a class=\"anchor\" href=\"#在android进行opengles的坐标矩阵变换\">#</a> 在 Android 进行 OpenGLES 的坐标矩阵变换</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float ModelMatrix = new float[16];//一个4*4矩阵</span><br><span class=\"line\">float ViewMatrix = new float[16];</span><br><span class=\"line\">float ProjectionMatrix = new float[16];</span><br><span class=\"line\">float MVPMatrix = new float[16];</span><br><span class=\"line\"></span><br><span class=\"line\">float eyeX = 0f;</span><br><span class=\"line\">float eyeY = 0f;</span><br><span class=\"line\">float eyeZ = -5f;</span><br><span class=\"line\"></span><br><span class=\"line\">float lookAtX = 0f;</span><br><span class=\"line\">float lookAtY  = 0f;</span><br><span class=\"line\">float lookAtZ = 0f;</span><br><span class=\"line\"></span><br><span class=\"line\">float upX = 0f;</span><br><span class=\"line\">float upY = 1f;</span><br><span class=\"line\">float upZ = 0f; </span><br><span class=\"line\">//设置ViewMatrix矩阵，up为垂直于视线的向量</span><br><span class=\"line\">Matrix.setLookAtM(ViewMatrix,0，eyeX,eyeY,eyeZ,lookAtX,lookAtY,lookAtZ,upX,upY,upZ);</span><br><span class=\"line\"></span><br><span class=\"line\">//矩阵乘以矩阵</span><br><span class=\"line\">Matrix.multiplyMM();</span><br><span class=\"line\">//矩阵乘以向量</span><br><span class=\"line\">Matrix.multiplyMV();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "图像处理",
                "OpenGL ES",
                "OpenGL ES2.0"
            ]
        },
        {
            "id": "http://example.com/2017/07/10/OpenGL-ES2-0%E4%B8%AD%E7%9A%84%E5%85%89%E7%85%A7/",
            "url": "http://example.com/2017/07/10/OpenGL-ES2-0%E4%B8%AD%E7%9A%84%E5%85%89%E7%85%A7/",
            "title": "OpenGL ES2.0中的光照",
            "date_published": "2017-07-10T12:53:21.000Z",
            "content_html": "<h1 id=\"opengles20中的光照\"><a class=\"anchor\" href=\"#opengles20中的光照\">#</a> OpenGLES2.0 中的光照</h1>\n<p>翻译自<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sZWFybm9wZW5nbGVzLmNvbS9hbmRyb2lkLWxlc3Nvbi10d28tYW1iaWVudC1hbmQtZGlmZnVzZS1saWdodGluZy8=\"> Android 课程二：环境光和漫反射光</span></p>\n<h2 id=\"1什么是光\"><a class=\"anchor\" href=\"#1什么是光\">#</a> 1. 什么是光？</h2>\n<p>世界没有光就会什么也看不到，我们将无法感知这个世界活着物体。</p>\n<p>在真实的世界里，光是由无数的光子聚合在一起形成的，它从一个光源出发，经过无数时间，最后传递到了我们的眼睛里</p>\n<p>我们应该如何用计算机图像模拟光呢，现在有 2 种热门技术可以实现：光线跟踪和栅格化。光线跟踪通过数学计算跟踪真实的光线，能给出十分准确和真实的结果，但是不足之处是模拟所有的光线十分消耗计算资源，并且实时渲染速度很慢。由于这个限制，大多数的实时计算机图像使用的是栅格化技术，通过接近结果模拟光线。</p>\n<h2 id=\"2光线的分类\"><a class=\"anchor\" href=\"#2光线的分类\">#</a> 2. 光线的分类</h2>\n<p>我们可以抽象出光工作的方式形成三种基本的光线类型</p>\n<ul>\n<li>环境光</li>\n</ul>\n<p>环境光是一种基础的光线，它遍布整个场景，它没有表现出来自任何其他的光源，因为它在到达你之前经过了无数的反射。这种光能阴天的户外，或是许多不同光源累积影响的室内。没有分别计算所有独立的光，我们可以为对象或场景设置一个基本的光照等级。</p>\n<ul>\n<li>漫反射光</li>\n</ul>\n<p>这种光在到达教你的眼睛里经过了物体之间反射。物体的光照等级随它与光线的角度不同而变化。直面它的时候更加明亮。同样我们感知物体时无论我们相对物体的位置在哪里，亮点都是相同的。这种现象也叫兰伯特余弦定律（Lambert's cosine law），漫反射和兰伯特反射在生活中是很常见的。</p>\n<ul>\n<li>高光</li>\n</ul>\n<p>和漫反射不同，高光随我们和物体的位置不同而不同，它让物体发亮和更加光滑</p>\n<h2 id=\"2模拟光\"><a class=\"anchor\" href=\"#2模拟光\">#</a> 2. 模拟光</h2>\n<p>与在 3D 场景中的光有 3 种一样，光源也有 3 种：直接光源、Point lighting、Spot lighting。</p>\n<h3 id=\"1数学\"><a class=\"anchor\" href=\"#1数学\">#</a> 1. 数学</h3>\n<p>学习来自一个点光源的环境光和漫反射光</p>\n<h4 id=\"环境光\"><a class=\"anchor\" href=\"#环境光\">#</a> 环境光</h4>\n<p>环境光其实是漫反射光的一种，但是它也能被看作是充满整个场景的低级光。这样想的话，它会很容易计算</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final color = material color * ambient light color</span><br></pre></td></tr></table></figure><br />\n 例如，有个物体是红色的，我们的环境光是灰白的。让我们假定将颜色存储为有 3 个颜色的数组红、绿、蓝，使用 RGB 颜色模型：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final color = &#123; 1 , 0 , 0 &#125; * &#123; 0.1 , 0.1 , 0.1 &#125; = &#123; 0.1 , 0.0 , 0.0 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>最终物体的颜色会是淡红色。基础的场景光就是这样的，除非你想要更加高级的视觉技术</p>\n<h4 id=\"漫反射光-点光源\"><a class=\"anchor\" href=\"#漫反射光-点光源\">#</a> 漫反射光 - 点光源</h4>\n<p>对漫反射光，我们需要增加衰减和光的位置。光的位置会用来计算光和表面的角度，它会影响表面的光照的整个等级。它还用来计算光和表面的距离，并决定了那个点的光照强度。</p>\n<p><em>步骤一： 计算兰伯特因子</em></p>\n<p>我们需要的第一个主要的计算是计算出表明和光的角度。直面光线的表层会处于光照的最大强度。计算出这个属性的合适的方式是使用兰伯特余弦定理。如果我们有 2 个向量，一个是从光线到表面的一个点，第二个是曲面法线，我们可以计算出余弦值：先将各个向量归一化，因此有它们的长度为 1，然后计算出 2 个向量的点积。这个操作能通过 OpenGL ES 的两个着色器轻松完成。</p>\n<p>我们声明 lambert 因子，它的范围是 0 到 1</p>\n<ol>\n<li></li>\n</ol>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">light vector = light position - obejct position</span><br><span class=\"line\">cosine = dot product(object normal,normalize(light vector))</span><br><span class=\"line\">lambert factor = max(cosine,0)</span><br></pre></td></tr></table></figure><br />\n 首先我们通过对象位置减去光线位置计算出光线的向量，然后我们获取物体的法线和光线向量的点积，就得到了这个余弦了。归一化光线向量的意思就是改变它的长度为 1。因为点积德范围是 - 1 到 1，我们把它固定到（0，1）。</p>\n<p>这是一个例子：有个光滑的平面，表面的法线笔直的指向天。光线的位置为「0，10，-10」，或是向上 10 个单位，向前 10 个单位，我们要计算出原地的光</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">light vector = &#123; 0, 10, -10&#125; - &#123;0, 0, 0&#125; = &#123;0, 10, -10&#125;</span><br><span class=\"line\">obejct normal = &#123;0, 1, 0&#125;</span><br></pre></td></tr></table></figure><br />\n 用平白的语言来说，如果我们沿着光线向量出发移动，到达光线的位置。要归一化这个向量，我们让向量的每一个标量处以向量的长度：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">light vector length = square root( 0*0 + 10*10 + -10*-10) = square root(200) = 14.14</span><br><span class=\"line\">normalized light vector = &#123;0/14.14, 10/14.14, -10/14.14&#125; = &#123;0, 0.707, -0.707&#125;</span><br></pre></td></tr></table></figure><br />\n 然后我们计算点积</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dot product(&#123;0,1,0&#125;,&#123;0,0.707, -0.707&#125;) = 0*0 + 1*0.707 + 0*-0.707 = 0.707</span><br><span class=\"line\">lambert factor = max(0.707,0) = 0.707</span><br></pre></td></tr></table></figure></p>\n<p>OpenGL ES 2 的着色器语言已经内置了一些这种函数，所以我们不需要手动做所有的数学，但是这对我们的理解仍然有帮助。</p>\n<p><em>步骤二：计算衰减因子</em></p>\n<p>接着，我们需要计算衰减，真实的点光源的光线衰减遵从<span class=\"exturl\" data-url=\"aHR0cDovL2JhaWtlLmJhaWR1LmNvbS9saW5rP3VybD1fa2RXcG5oNXJJVnZ0Y0tlQU1wZGRsWkdKUDJlNjVCM2V2cGQ4QS1mVFA0UFpqTG9RN09PdHpqQXJURHpWdmVMUEt2UllvaUxnQjJZSXdyTmswVVp3V3FQbHVsdnF4VjdKcjF0dXltZ3Y0eDhKS21hSVJpbGhKc0dxN1JuMmRFOHRHOHY3bFFtTnQ1aGVFRXExdDhrRUs=\">平方反比定律</span>，它可以表述为：<br />\n <code>luminosity = 1 / (distance* distance)</code> <br />\n 回到我们的例子，我们知道了一个距离为 14.14，所以最后我们的亮度看起来是：<br />\n <code>luminosity = 1/ (14.14*14.14) = 0.005</code> <br />\n 你可以看到，平方反比定律在距离上会导致剧烈的衰减。这就是光在真实世界中从点光源出发是怎么回事，但是我们的图像显示有限制范围，因此抑制衰减因子，我们能得到更加真实的光照而不会使物体看起来太暗了。</p>\n<p><em>步骤三：计算最后的颜色</em></p>\n<p>现在我们同时有了余弦和衰减因子，我们能计算出最终的光照等级：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final color = meterial color * (light color * lambert factor * luminosity)</span><br></pre></td></tr></table></figure></p>\n<p>回到之前一个例子，我们有红色的材料和全白的光源，最终的计算：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final color = &#123;1, 0, 0&#125; *(&#123;1,1,1&#125;*0.707*0.005) </span><br><span class=\"line\">= &#123;1,0,0&#125;*&#123;0.0035,0.0035,0.0035&#125; </span><br><span class=\"line\">= &#123;0.0035,0,0&#125;</span><br></pre></td></tr></table></figure></p>\n<p>简单的总结一下，对漫反射光我们需要使用表面和光线的角度，还有表面和光线的距离来最终计算出整个漫反射照明等级。下面是步骤：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//one</span><br><span class=\"line\">light vector = light position - object position</span><br><span class=\"line\">cosine = dot product(object normal,normalize(light vector))</span><br><span class=\"line\">lambert factor = max(cosine,0)</span><br><span class=\"line\"></span><br><span class=\"line\">//two</span><br><span class=\"line\">luminosity = 1/(distance*distance)</span><br><span class=\"line\"></span><br><span class=\"line\">//three</span><br><span class=\"line\">final color = material color * (light\u0010 color*lambert factor * luminosity)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"顶点着色器\"><a class=\"anchor\" href=\"#顶点着色器\">#</a> 顶点着色器</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final String vertexShader =</span><br><span class=\"line\">    &quot;uniform mat4 u_MVPMatrix;      \\n&quot;     // 一个表示进行了Model变换、View变换、投影变换的矩阵</span><br><span class=\"line\">  + &quot;uniform mat4 u_MVMatrix;       \\n&quot;     // 一个表示进行了Model变换和View变换的矩阵</span><br><span class=\"line\">  + &quot;uniform vec3 u_LightPos;       \\n&quot;     // 在眼坐标系中光的位置</span><br><span class=\"line\"> </span><br><span class=\"line\">  + &quot;attribute vec4 a_Position;     \\n&quot;     // 传入的顶点位置信息</span><br><span class=\"line\">  + &quot;attribute vec4 a_Color;        \\n&quot;     // 传人的每个顶点的颜色信息</span><br><span class=\"line\">  + &quot;attribute vec3 a_Normal;       \\n&quot;     // 每个顶点的法线信息</span><br><span class=\"line\"> </span><br><span class=\"line\">  + &quot;varying vec4 v_Color;          \\n&quot;     // 颜色信息，这个变量会传递进片段着色器中</span><br><span class=\"line\"> </span><br><span class=\"line\">  + &quot;void main()                    \\n&quot;     </span><br><span class=\"line\">  + &quot;&#123;                              \\n&quot;</span><br><span class=\"line\">// 将顶点转化为眼坐标系</span><br><span class=\"line\">  + &quot;   vec3 modelViewVertex = vec3(u_MVMatrix * a_Position);              \\n&quot;</span><br><span class=\"line\">// 将法线方向转移进眼坐标系</span><br><span class=\"line\">  + &quot;   vec3 modelViewNormal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));     \\n&quot;</span><br><span class=\"line\">// 计算出顶点和光线的距离  </span><br><span class=\"line\">  + &quot;   float distance = length(u_LightPos - modelViewVertex);             \\n&quot;</span><br><span class=\"line\">// 获取从光线处到顶点的光线向量</span><br><span class=\"line\">  + &quot;   vec3 lightVector = normalize(u_LightPos - modelViewVertex);        \\n&quot;</span><br><span class=\"line\">// 计算lambert factor，也就是计算光线向量和顶点法线的点积. 如果法线向量和光线向量指向同一个方向，则会得出最大的光照强度.</span><br><span class=\"line\">  + &quot;   float lambert = max(dot(modelViewNormal, lightVector), 0.1);       \\n&quot;</span><br><span class=\"line\">// 光线随距离的衰减</span><br><span class=\"line\">  + &quot;   float diffuse = lambert * (1.0 / (1.0 + (0.25 * distance * distance)));  \\n&quot;</span><br><span class=\"line\">// 将颜色乘以衰减度， It will be interpolated across the triangle.</span><br><span class=\"line\">  + &quot;   v_Color = a_Color * diffuse;                                       \\n&quot;</span><br><span class=\"line\">// gl_Position 存储最终的位置.</span><br><span class=\"line\">// 将这个向量乘以变换矩阵得到在归一屏幕坐标系中的点</span><br><span class=\"line\">  + &quot;   gl_Position = u_MVPMatrix * a_Position;                            \\n&quot;</span><br><span class=\"line\">  + &quot;&#125;                                                                     \\n&quot;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"片段着色器\"><a class=\"anchor\" href=\"#片段着色器\">#</a> 片段着色器</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final String fragmentShader =</span><br><span class=\"line\">  &quot;precision mediump float;       \\n&quot;     // Set the default precision to medium. We don&#x27;t need as high of a</span><br><span class=\"line\">                                          // precision in the fragment shader.</span><br><span class=\"line\">+ &quot;varying vec4 v_Color;          \\n&quot;     // This is the color from the vertex shader interpolated across the</span><br><span class=\"line\">                                          // triangle per fragment.</span><br><span class=\"line\">+ &quot;void main()                    \\n&quot;     // The entry point for our fragment shader.</span><br><span class=\"line\">+ &quot;&#123;                              \\n&quot;</span><br><span class=\"line\">+ &quot;   gl_FragColor = v_Color;     \\n&quot;     // Pass the color directly through the pipeline.</span><br><span class=\"line\">+ &quot;&#125;                              \\n&quot;;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"光源的顶点-片段着色器\"><a class=\"anchor\" href=\"#光源的顶点-片段着色器\">#</a> 光源的顶点、片段着色器</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Define a simple shader program for our point.</span><br><span class=\"line\">final String pointVertexShader =</span><br><span class=\"line\">    &quot;uniform mat4 u_MVPMatrix;      \\n&quot;</span><br><span class=\"line\">  + &quot;attribute vec4 a_Position;     \\n&quot;</span><br><span class=\"line\">  + &quot;void main()                    \\n&quot;</span><br><span class=\"line\">  + &quot;&#123;                              \\n&quot;</span><br><span class=\"line\">  + &quot;   gl_Position = u_MVPMatrix   \\n&quot;</span><br><span class=\"line\">  + &quot;               * a_Position;   \\n&quot;</span><br><span class=\"line\">  + &quot;   gl_PointSize = 5.0;         \\n&quot;</span><br><span class=\"line\">  + &quot;&#125;                              \\n&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">final String pointFragmentShader =</span><br><span class=\"line\">    &quot;precision mediump float;       \\n&quot;</span><br><span class=\"line\">  + &quot;void main()                    \\n&quot;</span><br><span class=\"line\">  + &quot;&#123;                              \\n&quot;</span><br><span class=\"line\">  + &quot;   gl_FragColor = vec4(1.0,    \\n&quot; //直接指定片段颜色为白色</span><br><span class=\"line\">  + &quot;   1.0, 1.0, 1.0);             \\n&quot;</span><br><span class=\"line\">  + &quot;&#125;                              \\n&quot;;</span><br></pre></td></tr></table></figure></p>\n<p>有一个新的属性叫 <code>gl_PointSize</code>  是点在空间中的大小为多少个像素。</p>\n",
            "tags": [
                "图像处理",
                "OpenGL ES",
                "OpenGL ES2.0"
            ]
        },
        {
            "id": "http://example.com/2017/06/25/Android-Matrix%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2017/06/25/Android-Matrix%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Android Matrix的使用",
            "date_published": "2017-06-25T13:46:23.000Z",
            "content_html": "<p>#Learn the Matrix Class in Android</p>\n<p>参考:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nY3NzbG9vcC5jb20vY3VzdG9tdmlldy9NYXRyaXhfQmFzaWM=\">GcsSloop 的博客</span></p>\n<h3 id=\"1matrix是android中graphics包下的一个类主要用来对图像进行平移-缩放-旋转-透视-错切等操作\"><a class=\"anchor\" href=\"#1matrix是android中graphics包下的一个类主要用来对图像进行平移-缩放-旋转-透视-错切等操作\">#</a> 1.Matrix 是 Android 中 Graphics 包下的一个类，主要用来对图像进行平移、缩放、旋转、透视、错切等操作。</h3>\n<p>Matrix 对象实际是一个 3x3 的矩阵。每个值都有不同的用处：</p>\n<p>mScalaX     mSkewX    mTransfX</p>\n<p>mSkewY      mScalaY   mTransfY</p>\n<p>mPersp0     mPersp1   mPersp 2</p>\n<p>scalax, scalay 用于缩放<br />\n skewx,skewy 用于错切<br />\n transfx,transfy 用于平移<br />\n persp0,persp1,persp2 用于透视</p>\n<h3 id=\"2关于matrix的要点\"><a class=\"anchor\" href=\"#2关于matrix的要点\">#</a> 2. 关于 Matrix 的要点</h3>\n<ul>\n<li>所有的操作 (旋转、平移、缩放、错切) 默认都是以坐标原点为基准点的。</li>\n<li>之前操作的坐标系状态会保留，并且影响到后续状态。</li>\n</ul>\n<h3 id=\"3martirx的方法\"><a class=\"anchor\" href=\"#3martirx的方法\">#</a> 3.Martirx 的方法</h3>\n<blockquote>\n<p>pre<br />\npre 为前缀的方法的意思是右乘，意思是当前矩阵乘以目标矩阵</p>\n<blockquote>\n<p>preScala()</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>preTranslate()</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>preRotate()</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>post<br />\npost 为前缀的方法的意思是左乘，意思是目标矩阵乘以当前矩阵</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>postScala()</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>postTranslate()</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>postRotate()</p>\n</blockquote>\n</blockquote>\n",
            "tags": [
                "Android",
                "图像处理"
            ]
        },
        {
            "id": "http://example.com/2017/06/11/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/2017/06/11/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "希尔排序算法",
            "date_published": "2017-06-11T07:25:18.000Z",
            "content_html": "<h1 id=\"shell-sort\"><a class=\"anchor\" href=\"#shell-sort\">#</a> Shell Sort</h1>\n<p>##1. 介绍<br />\n希尔排序是插入排序的一种，它的步骤如下：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.对这些分组内的项进行单独的直接插入排序。</span><br><span class=\"line\">3.当每个组内的排序完成后，再将整歌序列按另一个更小的Gap来进行分组。</span><br><span class=\"line\">4.重复2、3，直到gap的值变为1，对整个序列进行一次直接插入排序。</span><br></pre></td></tr></table></figure><br />\n##2.Gap 的选值<br />\n gap 的选值可以只用最简单的，每次都区 gap／2，第一个 gap 取 arr.len/2。也有一些更加效率的选值方式，此处不提了。</p>\n<p>##3. 代码</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C语言： </span><br><span class=\"line\">    void shellSort(int* arr，int len)&#123;</span><br><span class=\"line\">    int gap = len/2;</span><br><span class=\"line\">    while(gap&gt;=1)&#123;</span><br><span class=\"line\">        for(int i = gap;i&lt;len;i++)&#123;</span><br><span class=\"line\">            int temp = arr[i];</span><br><span class=\"line\">            int k = i-gap;</span><br><span class=\"line\">            while(k&gt;=0&amp;&amp;arr[k]&gt;arr[i])&#123;</span><br><span class=\"line\">                arr[i]=arr[k];</span><br><span class=\"line\">                k-=gap;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // if (k != i - gap) &#123;</span><br><span class=\"line\">                arr[k+gap] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            gap /=2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法",
                "排序算法"
            ]
        },
        {
            "id": "http://example.com/2016/04/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/2016/04/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "快速排序算法",
            "date_published": "2016-04-01T11:17:39.000Z",
            "content_html": "<h1 id=\"排序算法学习之快速排序算法\"><a class=\"anchor\" href=\"#排序算法学习之快速排序算法\">#</a> 排序算法学习之快速排序算法</h1>\n<p>##1. 快速排序算法的原理</p>\n<pre><code>快速排序算法的原理是选取一个值作为标志，将一个数组分为2部分，左边部分的数全部都比标志值小，右边部分都比标志值大，然后分别对左边数组和又边数组进行递归，直到排序完成。\n下面是进行一次数组处理的过程：\n</code></pre>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对以下的数组进行排序：</span><br><span class=\"line\">                      [key]</span><br><span class=\"line\">                        i                                    j</span><br><span class=\"line\">                        33  17  54  15  23  21  37  20  32  24</span><br><span class=\"line\">将数组的第一个数设置为标志</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">               [key]</span><br><span class=\"line\">[第一次处理]：比较str[i]与str[j］（ 如果str[i]&lt;str[j],就执行&#x27;j--&#x27;，然后重复［第一次处理］），发现33&gt;24，即str[i]&gt;str[j]，所以将str[i],str[j]互换位置，i 向前进一位，得到如下的数组</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">                        i--&gt;i                                j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  54  15  23  21  37  20  32  33  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t    i                                j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  54  15  23  21  37  20  32  33 </span><br><span class=\"line\"></span><br><span class=\"line\">                        [key]</span><br><span class=\"line\">[第二次处理]：比较str[i]与str[j]，17&gt;33,即str[i]&lt;str[j],所以执行&#x27;i++&#x27;操作,i右移一位。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t    i--&gt;i                            j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  54  15  23  21  37  20  32  33  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t        i                            j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  54  15  23  21  37  20  32  33 </span><br><span class=\"line\"></span><br><span class=\"line\">                        [key]</span><br><span class=\"line\">[第三次处理]：比较str[i]与str[j]，54&gt;33,即str[i]&gt;str[j],所以将str[i],str[j]互换位置，然后执行&#x27;j--&#x27;操作</span><br><span class=\"line\"></span><br><span class=\"line\">  \t\t\t\t\t\t        i                            j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  54  15  23  21  37  20  32  33  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t        i                        j&lt;--j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  37  20  32  54  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t        i                        j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  37  20  32  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t[key]\t\t</span><br><span class=\"line\">[第四次处理]：比较str[i]与str[j]，33&gt;32,即str[i]&gt;str[j],所以将str[i],str[j]互换位置，然后执行&#x27;i++&#x27;操作</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t        i                        j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  37  20  32  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t        i--&gt;i                    j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  37  20  33  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t            i                    j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  37  20  33  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t[key]</span><br><span class=\"line\">[第五次处理]：比较str[i]与str[j]，15&lt;33,即str[i]&lt;str[j],所以执行&#x27;i++&#x27;操作,i右移一位。</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t            i                    j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  37  20  32  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t            i--&gt;i                j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  37  20  33  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                i                j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  37  20  33  54</span><br><span class=\"line\"></span><br><span class=\"line\">[第六次处理]</span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\"></span><br><span class=\"line\">\t   \t\t\t\t   [key]\t\t\t\t</span><br><span class=\"line\">[第八次处理]:比较str[i]与str[j]，37&gt;33,即str[i]&gt;str[j],所以将str[i],str[j]互换位置，然后执行&#x27;j--&#x27;操作</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                        i        j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  37  20  33  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                        i    j&lt;--j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  33  20  37  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                        i    j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  33  20  37  54</span><br><span class=\"line\"></span><br><span class=\"line\">               [key]</span><br><span class=\"line\">[第九次处理]:比较str[i]与str[j]，54&gt;33,即str[i]&gt;str[j],所以将str[i],str[j]互换位置，然后执行&#x27;i++&#x27;操作</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t                        i    j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  33  20  37  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                        i---&gt;j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  20  33  37  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                            ij</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  20  33  37  54</span><br><span class=\"line\"></span><br><span class=\"line\">发现i,j已经相等，此次循环处理结束。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<pre><code>通过上面的过程，成功的将所有比33大的数排在了它的后面，把比33小的数排在了33的前面，得到了第一次处理的结果。\n</code></pre>\n<p>然后再通过对左边 2 边分别进行递归处理，最终得到排序结果。<br />\n##2. 下面是完整的 C 语言代码：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//快速排序函数声明 str为数组地址，left，right分别为排序数组的的左边界和右边界</span><br><span class=\"line\">void sqrtNum(long *str,int left,int right);</span><br><span class=\"line\"></span><br><span class=\"line\">//传进来的a，b是2个指针，并将指针所指向地址中储存的数据进行交换</span><br><span class=\"line\">void exchange(long* a,long* b)&#123;</span><br><span class=\"line\">    long temp;</span><br><span class=\"line\">    temp=*a;</span><br><span class=\"line\">    *a=*b;</span><br><span class=\"line\">    *b=temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//主函数</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    long str[10];</span><br><span class=\"line\">    for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">        scanf(&quot;%ld&quot;,&amp;str[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sqrtNum(str,0,9);</span><br><span class=\"line\">    for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">        printf(&quot;  %ld&quot;,str[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//排序函数的具体内容</span><br><span class=\"line\">void sqrtNum(long *str,int left,int right)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //long key=str[left];</span><br><span class=\"line\">    int  kn=left;</span><br><span class=\"line\">    int m=left;</span><br><span class=\"line\">    int n=right;</span><br><span class=\"line\">    while(m&lt;n)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        //当从右读的标志n大于从左开始读的标志m时，一直循环，判断右边读的数组中的数是否比标志[key]大，如果大，就一直执行n--直到str[m]的值大于等于str[n]：执行第二个if语句中的内容，然后break；跳出内循环</span><br><span class=\"line\">        while(m&lt;n)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if(str[m]&lt;str[n])&#123;</span><br><span class=\"line\">                n--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(str[m]&gt;=str[n])&#123;</span><br><span class=\"line\">                exchange(&amp;str[n],&amp;str[m]);</span><br><span class=\"line\">                m++;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        //当从右读的标志n大于从左开始读的标志m时，一直循环，判断左边读的数组中的数是否比标志[key]大，如果大，就一直执行m++直到str[m]的值大于等于str[n]：执行第二个if语句中的内容，然后break；跳出内循环</span><br><span class=\"line\">        while(m&lt;n)&#123;</span><br><span class=\"line\">            if(str[m]&lt;str[n])&#123;</span><br><span class=\"line\">                m++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(str[m]&gt;=str[n])&#123;</span><br><span class=\"line\">                exchange(&amp;str[n],&amp;str[m]);</span><br><span class=\"line\">                n--;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    kn=m;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(left&lt;right)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        sqrtNum(str, left,kn-1);</span><br><span class=\"line\"></span><br><span class=\"line\">        sqrtNum(str, kn+1,right);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法",
                "排序算法"
            ]
        }
    ]
}