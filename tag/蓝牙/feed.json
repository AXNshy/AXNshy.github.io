{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く • All posts by \"蓝牙\" tag",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/03/31/Android-%E8%93%9D%E7%89%99%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/",
            "url": "http://example.com/2022/03/31/Android-%E8%93%9D%E7%89%99%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/",
            "title": "Android 蓝牙应用开发流程",
            "date_published": "2022-03-31T14:30:19.000Z",
            "content_html": "<h1 id=\"蓝牙权限申请\"><a class=\"anchor\" href=\"#蓝牙权限申请\">#</a> 蓝牙权限申请</h1>\n<p>目标应用的 targetSdkVersion &gt;= 31，那么应该申请一下权限</p>\n<ul>\n<li>搜索蓝牙设备权限 ：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_SCAN&quot;/&gt;</code></li>\n<li>开启蓝牙对其他设备可见的权限：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADVERTISE&quot;/&gt;</code></li>\n<li>与已经配对过的设备进行通讯：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_CONNECT&quot;/&gt;</code></li>\n<li>传统蓝牙权限，需要声明权限的 maxSdkVersion 来满足兼容性。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Request legacy Bluetooth permissions on older devices. --&gt;  </span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;  \t\t</span><br><span class=\"line\">\tandroid:maxSdkVersion=&quot;30&quot; /&gt;  </span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;  </span><br><span class=\"line\">\tandroid:maxSdkVersion=&quot;30&quot; /&gt;</span><br></pre></td></tr></table></figure></li>\n<li>获取蓝牙设备真实位置信息的权限：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;</code></li>\n</ul>\n<p>目标应用的 targetSdkVersion &lt;= 30，那么应该申请一下权限<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;</span><br><span class=\"line\">//if(version &gt; 29)&#123;</span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;</span><br><span class=\"line\">//&#125; else &#123;</span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;/&gt;</span><br><span class=\"line\">//&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-feature android:name=&quot;android.hardware.bluetooth&quot; android:required=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>// 发现设备权限<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"经典蓝牙连接\"><a class=\"anchor\" href=\"#经典蓝牙连接\">#</a> 经典蓝牙连接</h1>\n<h2 id=\"创建bluetoothadapter对象\"><a class=\"anchor\" href=\"#创建bluetoothadapter对象\">#</a> 创建 BluetoothAdapter 对象</h2>\n<p><code>val adapter = BluetoothAdapter.getDefaultAdapter()</code></p>\n<p>获取蓝牙状态：蓝牙是否开启，如果没有开启，就跳转到蓝牙开启页面</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (bluetoothAdapter?.isEnabled == false) &#123;  </span><br><span class=\"line\">\tval enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)</span><br><span class=\"line\">\tstartActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>监听蓝牙状态变化，蓝牙状态由 4 种：</p>\n<ul>\n<li>STATE_ON   蓝牙已开启，该状态下才能继续使用 BluetoothAdapter 进行蓝牙配对</li>\n<li>STATE_OFF  蓝牙已关闭。</li>\n<li>STATE_TURNING_ON，正在开启种，该状态 BluetoothAdapter 还无法使用</li>\n<li>STATE_TURNING_OFF 正在关闭种，可以在这个状态去关闭蓝牙连接</li>\n</ul>\n<p>使用系统广播<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1 声明权限 </span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//2 开启广播监听</span><br><span class=\"line\">fun registerBluetoothReceiver(context : Context)&#123;  </span><br><span class=\"line\">    val intentFilter = IntentFilter().apply &#123;  </span><br><span class=\"line\"> addAction(BluetoothAdapter.ACTION_STATE_CHANGED)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> context.registerReceiver(bluetoothReceiver,intentFilter)  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">val bluetoothReceiver = object : BroadcastReceiver() &#123;  </span><br><span class=\"line\">    override fun onReceive(context: Context?, intent: Intent?) &#123;  </span><br><span class=\"line\">        when(intent?.action)&#123;  </span><br><span class=\"line\">            BluetoothAdapter.ACTION_STATE_CHANGED -&gt; &#123;  </span><br><span class=\"line\">                val state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,BluetoothAdapter.STATE_OFF)  </span><br><span class=\"line\">                val prestate = intent.getIntExtra(BluetoothAdapter.EXTRA_PREVIOUS_STATE,BluetoothAdapter.STATE_OFF)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"扫描蓝牙设备\"><a class=\"anchor\" href=\"#扫描蓝牙设备\">#</a> 扫描蓝牙设备</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun registerBluetoothReceiver(context : Context)&#123;  </span><br><span class=\"line\">    val intentFilter = IntentFilter().apply &#123;  </span><br><span class=\"line\">        addAction(BluetoothDevice.ACTION_FOUND)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> context.registerReceiver(bluetoothReceiver,intentFilter)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">val bluetoothReceiver = object : BroadcastReceiver() &#123;  </span><br><span class=\"line\">    override fun onReceive(context: Context?, intent: Intent?) &#123;  </span><br><span class=\"line\">        when(intent?.action)&#123;  </span><br><span class=\"line\">            BluetoothDevice.ACTION_FOUND -&gt; &#123;  </span><br><span class=\"line\">                val device: BluetoothDevice? =  </span><br><span class=\"line\">                    intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE)  </span><br><span class=\"line\">                device?.run &#123;  </span><br><span class=\"line\"> val deviceName = name  </span><br><span class=\"line\"> val deviceHardwareAddress = address // MAC address  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配对\"><a class=\"anchor\" href=\"#配对\">#</a> 配对</h2>\n<p>蓝牙建立连接也是一个 C/S 模型，需要一个 Server 和一个 Client</p>\n<ul>\n<li>BluetoothServerSocket   蓝牙服务端 Socket 接口，监听客户端的连接，收到了连接请求后会返回一个 BluetoothSocket 接口对象用来通讯</li>\n<li>BluetoothSocket   蓝牙双方通讯的 socket 接口</li>\n</ul>\n<h3 id=\"服务端\"><a class=\"anchor\" href=\"#服务端\">#</a> 服务端</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private inner class AcceptThread : Thread() &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    private val mmServerSocket: BluetoothServerSocket? by lazy(LazyThreadSafetyMode.NONE) &#123;  </span><br><span class=\"line\"> bluetoothAdapter?.listenUsingInsecureRfcommWithServiceRecord(&quot;YOUR DEVICE NAME&quot;, UUID.fromString(&quot;MY_UUID&quot;))  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> override fun run() &#123;  </span><br><span class=\"line\">        // Keep listening until exception occurs or a socket is returned.  </span><br><span class=\"line\"> var shouldLoop = true  </span><br><span class=\"line\"> while (shouldLoop) &#123;  </span><br><span class=\"line\">            val socket: BluetoothSocket? = try &#123;  </span><br><span class=\"line\">                mmServerSocket?.accept()  </span><br><span class=\"line\">            &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">                Log.e(TAG, &quot;Socket&#x27;s accept() method failed&quot;, e)  </span><br><span class=\"line\">                shouldLoop = false  </span><br><span class=\"line\"> null &#125;  </span><br><span class=\"line\">            socket?.also &#123;  </span><br><span class=\"line\"> manageMyConnectedSocket(it)  </span><br><span class=\"line\">                mmServerSocket?.close()  </span><br><span class=\"line\">                shouldLoop = false  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Closes the connect socket and causes the thread to finish.  </span><br><span class=\"line\"> fun cancel() &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmServerSocket?.close()  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Could not close the connect socket&quot;, e)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">fun manageMyConnectedSocket(socket : BluetoothSocket)&#123;  </span><br><span class=\"line\">    //execute bluetooth communicate  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"客户端\"><a class=\"anchor\" href=\"#客户端\">#</a> 客户端</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private inner class ConnectThread(device: BluetoothDevice) : Thread() &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    private val mmSocket: BluetoothSocket? by lazy(LazyThreadSafetyMode.NONE) &#123;  </span><br><span class=\"line\"> device.createRfcommSocketToServiceRecord(UUID.fromString(&quot;MY_UUID&quot;))  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> public override fun run() &#123;  </span><br><span class=\"line\">        // Cancel discovery because it otherwise slows down the connection.  </span><br><span class=\"line\"> bluetoothAdapter?.cancelDiscovery()  </span><br><span class=\"line\">  </span><br><span class=\"line\">        mmSocket?.let &#123; socket -&gt;  </span><br><span class=\"line\"> // Connect to the remote device through the socket. This call blocks  </span><br><span class=\"line\"> // until it succeeds or throws an exception. socket.connect()  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // The connection attempt succeeded. Perform work associated with  </span><br><span class=\"line\"> // the connection in a separate thread. manageMyConnectedSocket(socket)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Closes the client socket and causes the thread to finish.  </span><br><span class=\"line\"> fun cancel() &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmSocket?.close()  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Could not close the client socket&quot;, e)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据传输\"><a class=\"anchor\" href=\"#数据传输\">#</a> 数据传输</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private val handler: Handler = Handler()  </span><br><span class=\"line\">val MESSAGE_READ: Int = 0  </span><br><span class=\"line\">val MESSAGE_WRITE: Int = 1  </span><br><span class=\"line\">val MESSAGE_TOAST: Int = 2  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">private inner class ConnectedThread(private val mmSocket: BluetoothSocket) : Thread() &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    private val mmInStream: InputStream = mmSocket.inputStream  </span><br><span class=\"line\"> private val mmOutStream: OutputStream = mmSocket.outputStream  </span><br><span class=\"line\"> private val mmBuffer: ByteArray = ByteArray(1024) // mmBuffer store for the stream  </span><br><span class=\"line\">  </span><br><span class=\"line\"> override fun run() &#123;  </span><br><span class=\"line\">        var numBytes: Int // bytes returned from read()  </span><br><span class=\"line\">  </span><br><span class=\"line\"> // Keep listening to the InputStream until an exception occurs. while (true) &#123;  </span><br><span class=\"line\">            // Read from the InputStream.  </span><br><span class=\"line\"> numBytes = try &#123;  </span><br><span class=\"line\">                mmInStream.read(mmBuffer)  </span><br><span class=\"line\">            &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">                Log.d(TAG, &quot;Input stream was disconnected&quot;, e)  </span><br><span class=\"line\">                break  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Send the obtained bytes to the UI activity.  </span><br><span class=\"line\"> val readMsg = handler.obtainMessage(  </span><br><span class=\"line\">                MESSAGE_READ, numBytes, -1,  </span><br><span class=\"line\">                mmBuffer)  </span><br><span class=\"line\">            readMsg.sendToTarget()  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Call this from the main activity to send data to the remote device.  </span><br><span class=\"line\"> fun write(bytes: ByteArray) &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmOutStream.write(bytes)  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Error occurred when sending data&quot;, e)  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Send a failure message back to the activity.  </span><br><span class=\"line\"> val writeErrorMsg = handler.obtainMessage(MESSAGE_TOAST)  </span><br><span class=\"line\">            val bundle = Bundle().apply &#123;  </span><br><span class=\"line\"> putString(&quot;toast&quot;, &quot;Couldn&#x27;t send data to the other device&quot;)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\"> writeErrorMsg.data = bundle  </span><br><span class=\"line\">            handler.sendMessage(writeErrorMsg)  </span><br><span class=\"line\">            return  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Share the sent message with the UI activity.  </span><br><span class=\"line\"> val writtenMsg = handler.obtainMessage(  </span><br><span class=\"line\">            MESSAGE_WRITE, -1, -1, mmBuffer)  </span><br><span class=\"line\">        writtenMsg.sendToTarget()  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Call this method from the main activity to shut down the connection.  </span><br><span class=\"line\"> fun cancel() &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmSocket.close()  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Could not close the connect socket&quot;, e)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"低功耗蓝牙bluetooth-low-energy\"><a class=\"anchor\" href=\"#低功耗蓝牙bluetooth-low-energy\">#</a> 低功耗蓝牙（Bluetooth Low Energy）</h1>\n<h2 id=\"ble设备发现\"><a class=\"anchor\" href=\"#ble设备发现\">#</a> BLE 设备发现</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmx1ZXRvb3RoLmNvbS9ibG9nL2FkdmVydGlzaW5nLXdvcmtzLXBhcnQtMS8=\">https://www.bluetooth.com/blog/advertising-works-part-1/</span><br />\n 低功耗蓝牙协议栈中包含的一个用来帮助设备彼此发现并连接的配置文件：Generic Access Profile (GAP)<br />\n 这个发现过程里面就有一个称之为 &quot;advertise'' 的动作，表明设备想被其他设备发现。<br />\n处于 Advertise 的设备会持续向周围发送很小的数据包，让周围的扫描设备能够发现它。<br />\n对于 GAP 协议来说 发送 advertise 广播的设备可以被看做是边缘设备；也可以作为一个广播者存在，不接受任何的连接请求，单纯只发送广播。</p>\n<p>处于扫描中的设备是作为 GAP 的观察者，当其对连接上其他设备感兴趣时，被作为 GAP 中心设备。</p>\n<p>概念：<br />\nPDU: packat data unit<br />\nADV: advertising 广播</p>\n<p>Android 中低功耗蓝牙发送广播与开启扫描方式：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//第一步依然是初始化BluetoothAdapter，</span><br><span class=\"line\">val adapter = BluetoothAdapter.getDefaultAdapter()</span><br><span class=\"line\"></span><br><span class=\"line\">// next step: </span><br><span class=\"line\"></span><br><span class=\"line\">//发送广播，在边缘设备上实现，Peripheral</span><br><span class=\"line\">fun startAdvertising()&#123;  </span><br><span class=\"line\">    bluetoothAdapter?.bluetoothLeAdvertiser?.run &#123;  </span><br><span class=\"line\"> val setting = AdvertiseSettings.Builder().apply &#123;  </span><br><span class=\"line\"> /*设置Advertise广播的参数  </span><br><span class=\"line\"> * 设置广播模式 三种模式:ADVERTISE_MODE_LOW_POWER 低功耗，默认模式  </span><br><span class=\"line\"> *                   ADVERTISE_MODE_BALANCED 平衡模式，平衡了广播频率与电量消耗  </span><br><span class=\"line\"> *                   ADVERTISE_MODE_LOW_LATENCY 传统模式，高耗电模式。  </span><br><span class=\"line\"> */ setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_POWER)  </span><br><span class=\"line\">            // 广播是否是可连接的  </span><br><span class=\"line\"> setConnectable(true)  </span><br><span class=\"line\">            //设置广播时长，如果为0，则不会中断  </span><br><span class=\"line\"> setTimeout(0)  </span><br><span class=\"line\">            /*  </span><br><span class=\"line\"> * 设置广播传输功耗等级，可以限制广播数据包的可见范围:  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_ULTRA_LOW 最低  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_LOW 低  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_MEDIUM 中  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_HIGH 高  </span><br><span class=\"line\"> * */ setTxPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_LOW)  </span><br><span class=\"line\">        &#125;.build()  </span><br><span class=\"line\">        // Ble广播数据包，需要注意的是AdvertiseData中包含的数据大小不能超过31个字节  </span><br><span class=\"line\"> val data = AdvertiseData.Builder().apply &#123;  </span><br><span class=\"line\"> setIncludeDeviceName(true)  </span><br><span class=\"line\">            setIncludeTxPowerLevel(true)  </span><br><span class=\"line\">            addServiceUuid(ParcelUuid.fromString(UUID.randomUUID().toString()))  </span><br><span class=\"line\">            addManufacturerData(0x0001, byteArrayOf())  </span><br><span class=\"line\">        &#125;.build()  </span><br><span class=\"line\">        val callback = object :AdvertiseCallback()&#123;  </span><br><span class=\"line\">            override fun onStartSuccess(settingsInEffect: AdvertiseSettings?) &#123;  </span><br><span class=\"line\">                super.onStartSuccess(settingsInEffect)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            override fun onStartFailure(errorCode: Int) &#123;  </span><br><span class=\"line\">                super.onStartFailure(errorCode)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        startAdvertising(setting,data,callback)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">//扫描广播，在中心设备上实现,Center  </span><br><span class=\"line\">fun discovery()&#123;  </span><br><span class=\"line\">    bluetoothAdapter?.bluetoothLeScanner?.apply &#123;   </span><br><span class=\"line\">val scanSetting = ScanSettings.Builder().apply &#123;   </span><br><span class=\"line\">setLegacy(true)  </span><br><span class=\"line\">            setScanMode(ScanSettings.SCAN_MODE_BALANCED)  </span><br><span class=\"line\">        &#125;.build()  </span><br><span class=\"line\">        val filter = mutableListOf&lt;ScanFilter&gt;().apply &#123;   </span><br><span class=\"line\">add(ScanFilter.Builder().apply &#123;   </span><br><span class=\"line\">setServiceUuid(ParcelUuid.fromString(UUID.randomUUID().toString()))  </span><br><span class=\"line\">                setManufacturerData(0x0001, byteArrayOf())  </span><br><span class=\"line\">            &#125;.build())  </span><br><span class=\"line\">        &#125;.toList()  </span><br><span class=\"line\">        startScan(filter,scanSetting,object: ScanCallback()&#123;  </span><br><span class=\"line\">            override fun onScanResult(callbackType: Int, result: ScanResult?) &#123;  </span><br><span class=\"line\">                super.onScanResult(callbackType, result)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            override fun onBatchScanResults(results: MutableList&lt;ScanResult&gt;?) &#123;  </span><br><span class=\"line\">                super.onBatchScanResults(results)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            override fun onScanFailed(errorCode: Int) &#123;  </span><br><span class=\"line\">                super.onScanFailed(errorCode)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Android",
                "蓝牙"
            ]
        }
    ]
}