{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く • All posts by \"android\" tag",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/06/20/Android-%E7%9B%B8%E6%9C%BA%E5%AD%90%E7%B3%BB%E7%BB%9F/",
            "url": "http://example.com/2022/06/20/Android-%E7%9B%B8%E6%9C%BA%E5%AD%90%E7%B3%BB%E7%BB%9F/",
            "title": "Android 相机子系统",
            "date_published": "2022-06-20T15:42:47.000Z",
            "content_html": "<p>Android Camera 架构</p>\n<p><img data-src=\"http://tva3.sinaimg.cn/large/b5348f57gy1h3f5lczmiuj20kt0gkgqt.jpg\" alt=\"相机系统\" /></p>\n<p>第一层： Java  APP<br />\n 第二层： Framework 封装 java 层的调用；实现 native 层的 CameraService<br />\n 第三层： Camera HAL google 实现的 HIDL 标准接口，同时芯片厂商和 OEM 厂商基于 HIDL 接口实现自己的功能<br />\n第四层： Driver 相机驱动层<br />\n第五层： 各种电子、感光元件以及相机依赖的硬件</p>\n<p>类：</p>\n<p>CameraServiceClient</p>\n<p>CameraDevice  CameraProviderManager</p>\n<p>Camera3Device</p>\n<p>CameraHAL</p>\n<h2 id=\"数据\"><a class=\"anchor\" href=\"#数据\">#</a> 数据</h2>\n<h3 id=\"camerametadata\"><a class=\"anchor\" href=\"#camerametadata\">#</a> CameraMetaData</h3>\n<p>以 key-value 的形式存储数据<br />\n Camera 系统中流转的三种主要数据都是继承了 CameraMetaData</p>\n<h3 id=\"capturechractoristics-静态数据\"><a class=\"anchor\" href=\"#capturechractoristics-静态数据\">#</a> CaptureChractoristics  静态数据</h3>\n<p>相机静态配置数据：</p>\n<ul>\n<li>输入流配置</li>\n<li>输出流配置</li>\n<li>高分辨率配置</li>\n<li>高帧率配置</li>\n</ul>\n<h3 id=\"capturerequest-拍摄请求\"><a class=\"anchor\" href=\"#capturerequest-拍摄请求\">#</a> CaptureRequest  拍摄请求</h3>\n<p>有 2 种类型的请求：</p>\n<ul>\n<li>capture   非重复请求</li>\n<li>repeating   重复请求   例如：实现预览的请求可以用 repeating 请求实现</li>\n</ul>\n<p>CameraCaptureSession 管理相机连接的会话</p>\n<p>CameraCaptureSession 由 createCameraSession 方法创建</p>\n<h3 id=\"captureresult-拍摄结果\"><a class=\"anchor\" href=\"#captureresult-拍摄结果\">#</a> CaptureResult  拍摄结果</h3>\n<h2 id=\"数据流向\"><a class=\"anchor\" href=\"#数据流向\">#</a> 数据流向</h2>\n<p>CameraDevice   CameraCaptureSession    CameraManager.AvailabilityCallback</p>\n",
            "tags": [
                "Android",
                "Camera"
            ]
        },
        {
            "id": "http://example.com/2022/05/25/Android-SharedPreference%E8%A7%A3%E6%9E%90/",
            "url": "http://example.com/2022/05/25/Android-SharedPreference%E8%A7%A3%E6%9E%90/",
            "title": "Android SharedPreference解析",
            "date_published": "2022-05-24T16:02:22.000Z",
            "content_html": "<h2 id=\"contextgetsharedpreferences\"><a class=\"anchor\" href=\"#contextgetsharedpreferences\">#</a>  <code>Context.getSharedPreferences()</code></h2>\n<p>获取 <code>SharedPreferences</code>  对象<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//android.app.Context.java</span><br><span class=\"line\">@Override  </span><br><span class=\"line\">public SharedPreferences getSharedPreferences(String name, int mode) &#123;  </span><br><span class=\"line\">    return mBase.getSharedPreferences(name, mode);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mBase 是Context的实现类 ContextImpl</span><br><span class=\"line\"></span><br><span class=\"line\">//android.app.ContextImpl.java</span><br><span class=\"line\">@Override  </span><br><span class=\"line\">public SharedPreferences getSharedPreferences(String name, int mode) &#123;  </span><br><span class=\"line\">    // At least one application in the world actually passes in a null  </span><br><span class=\"line\">    // name.  This happened to work because when we generated the file name    // we would stringify it to &quot;null.xml&quot;.  Nice.    if (mPackageInfo.getApplicationInfo().targetSdkVersion &lt;  </span><br><span class=\"line\">            Build.VERSION_CODES.KITKAT) &#123;  </span><br><span class=\"line\">        if (name == null) &#123;  </span><br><span class=\"line\">            name = &quot;null&quot;;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    File file;  </span><br><span class=\"line\">    synchronized (ContextImpl.class) &#123;  </span><br><span class=\"line\">        if (mSharedPrefsPaths == null) &#123;  </span><br><span class=\"line\">            mSharedPrefsPaths = new ArrayMap&lt;&gt;();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        file = mSharedPrefsPaths.get(name);  </span><br><span class=\"line\">        if (file == null) &#123;  </span><br><span class=\"line\">\t\t\t//根据传入的name创建一个File对象</span><br><span class=\"line\">            file = getSharedPreferencesPath(name);  </span><br><span class=\"line\">            mSharedPrefsPaths.put(name, file);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return getSharedPreferences(file, mode);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@Override  </span><br><span class=\"line\">public SharedPreferences getSharedPreferences(File file, int mode) &#123;  </span><br><span class=\"line\">    SharedPreferencesImpl sp;  </span><br><span class=\"line\">    synchronized (ContextImpl.class) &#123; </span><br><span class=\"line\">\t\t//先在缓存中查找，如果没有找到对应文件的sp对象，就创建一个新的sp对象</span><br><span class=\"line\">        final ArrayMap&lt;File, SharedPreferencesImpl&gt; cache = getSharedPreferencesCacheLocked();  </span><br><span class=\"line\">        sp = cache.get(file);  </span><br><span class=\"line\">        if (sp == null) &#123;  </span><br><span class=\"line\">            checkMode(mode);  </span><br><span class=\"line\">            if (getApplicationInfo().targetSdkVersion &gt;= android.os.Build.VERSION_CODES.O) &#123;  </span><br><span class=\"line\">                if (isCredentialProtectedStorage()  </span><br><span class=\"line\">                        &amp;&amp; !getSystemService(UserManager.class)  </span><br><span class=\"line\">                                .isUserUnlockingOrUnlocked(UserHandle.myUserId())) &#123;  </span><br><span class=\"line\">                    throw new IllegalStateException(&quot;SharedPreferences in credential encrypted &quot;  </span><br><span class=\"line\">                            + &quot;storage are not available until after user is unlocked&quot;);  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">\t\t\t//创建一个新SharedPreferencesImpl对象</span><br><span class=\"line\">            sp = new SharedPreferencesImpl(file, mode);  </span><br><span class=\"line\">            cache.put(file, sp);  </span><br><span class=\"line\">            return sp;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    if ((mode &amp; Context.MODE_MULTI_PROCESS) != 0 ||  </span><br><span class=\"line\">        getApplicationInfo().targetSdkVersion &lt; android.os.Build.VERSION_CODES.HONEYCOMB) &#123;  </span><br><span class=\"line\">        // If somebody else (some other process) changed the prefs  </span><br><span class=\"line\">        // file behind our back, we reload it.  This has been the        // historical (if undocumented) behavior.        sp.startReloadIfChangedUnexpectedly();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return sp;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><code>SharedPreferences</code>  是一个接口，实现类是 <code>SharedPreferencesImpl</code> ,</p>\n<h2 id=\"sharedpreferenceseditor\"><a class=\"anchor\" href=\"#sharedpreferenceseditor\">#</a>  <code>SharedPreferences.Editor</code></h2>\n<p><code>sp编辑器</code> ，用来操作修改 sp 中的数据</p>\n<h3 id=\"commit\"><a class=\"anchor\" href=\"#commit\">#</a>  <code>commit</code></h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//android.app.SharedPreferencesImpl$EditorImpl</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"> public final class EditorImpl implements Editor &#123;</span><br><span class=\"line\"> \t//存储本次修改的键值</span><br><span class=\"line\">\tprivate final Map&lt;String, Object&gt; mModified = new HashMap&lt;&gt;();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t@Override  </span><br><span class=\"line\">\tpublic boolean commit() &#123;  </span><br><span class=\"line\">    \tlong startTime = 0;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    \tMemoryCommitResult mcr = commitToMemory();  </span><br><span class=\"line\">  </span><br><span class=\"line\">    \tSharedPreferencesImpl.this.enqueueDiskWrite(  </span><br><span class=\"line\">        \tmcr, null /* sync write on this thread okay */);  </span><br><span class=\"line\">    \ttry &#123;  </span><br><span class=\"line\">\t\t\t//如果没有执行mcr.setDiskWriteResult();那么mcr.writtenToDiskLatch的state&gt;0，调用await会进入挂起状态，走commit方法时，在enqueueDiskWrite这个方法中已经执行了setDiskWriteResult，所以这里不会阻塞，直接返回结果</span><br><span class=\"line\">        \tmcr.writtenToDiskLatch.await();  </span><br><span class=\"line\">    \t&#125; catch (InterruptedException e) &#123;  </span><br><span class=\"line\">        \treturn false;  </span><br><span class=\"line\">    \t&#125; finally &#123;  </span><br><span class=\"line\">    \t&#125;  </span><br><span class=\"line\">    \tnotifyListeners(mcr);  </span><br><span class=\"line\">    \treturn mcr.writeToDiskResult;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> private void enqueueDiskWrite(final MemoryCommitResult mcr,  </span><br><span class=\"line\">                              final Runnable postWriteRunnable) &#123;  </span><br><span class=\"line\">\t\t\t\t\t\t\t  </span><br><span class=\"line\">\t//是否是执行同步提交</span><br><span class=\"line\">    final boolean isFromSyncCommit = (postWriteRunnable == null);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    final Runnable writeToDiskRunnable = new Runnable() &#123;  </span><br><span class=\"line\">            @Override  </span><br><span class=\"line\">            public void run() &#123;  </span><br><span class=\"line\">                synchronized (mWritingToDiskLock) &#123;  </span><br><span class=\"line\">                    writeToFile(mcr, isFromSyncCommit);  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                synchronized (mLock) &#123;  </span><br><span class=\"line\">                    mDiskWritesInFlight--;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                if (postWriteRunnable != null) &#123;  </span><br><span class=\"line\">                    postWriteRunnable.run();  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Typical #commit() path with fewer allocations, doing a write on  </span><br><span class=\"line\">    // the current thread.    </span><br><span class=\"line\">\tif (isFromSyncCommit) &#123;  </span><br><span class=\"line\">        boolean wasEmpty = false;  </span><br><span class=\"line\">        synchronized (mLock) &#123;  </span><br><span class=\"line\">            wasEmpty = mDiskWritesInFlight == 1;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        if (wasEmpty) &#123;  </span><br><span class=\"line\">            writeToDiskRunnable.run();  </span><br><span class=\"line\">            return;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    QueuedWork.queue(writeToDiskRunnable, !isFromSyncCommit);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//写入修改到文件</span><br><span class=\"line\">private void writeToFile(MemoryCommitResult mcr, boolean isFromSyncCommit) &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Attempt to write the file, delete the backup and return true as atomically as  </span><br><span class=\"line\">    // possible.  If any exception occurs, delete the new file; next time we will restore    </span><br><span class=\"line\">\t// from the backup.    </span><br><span class=\"line\">\ttry &#123;  </span><br><span class=\"line\">        FileOutputStream str = createFileOutputStream(mFile);  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//将本次修改数据写入到文件中</span><br><span class=\"line\">        XmlUtils.writeMapXml(mcr.mapToWriteToDisk, str);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        writeTime = System.currentTimeMillis();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        FileUtils.sync(str);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        fsyncTime = System.currentTimeMillis();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        str.close();  </span><br><span class=\"line\">        ContextImpl.setFilePermissionsFromMode(mFile.getPath(), mMode, 0);  </span><br><span class=\"line\">  </span><br><span class=\"line\">       </span><br><span class=\"line\">        mcr.setDiskWriteResult(true, true);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        long fsyncDuration = fsyncTime - writeTime;  </span><br><span class=\"line\">        mSyncTimes.add((int) fsyncDuration);  </span><br><span class=\"line\">        mNumSync++;  </span><br><span class=\"line\"></span><br><span class=\"line\">        return;  </span><br><span class=\"line\">    &#125; catch (XmlPullParserException e) &#123;  </span><br><span class=\"line\">        Log.w(TAG, &quot;writeToFile: Got exception:&quot;, e);  </span><br><span class=\"line\">    &#125; catch (IOException e) &#123;  </span><br><span class=\"line\">        Log.w(TAG, &quot;writeToFile: Got exception:&quot;, e);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Clean up an unsuccessfully written file  </span><br><span class=\"line\">    if (mFile.exists()) &#123;  </span><br><span class=\"line\">        if (!mFile.delete()) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Couldn&#x27;t clean up partially-written file &quot; + mFile);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    mcr.setDiskWriteResult(false, false);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面的流程可以看出， <code>commit</code>  调用中没有创建子线程去执行，而是在当前线程去执行，所以 <code>commit</code>  会产生 IO 调用，如果写入数据太多，会对主线程由影响，所以最好将 <code>commit</code>  放在子线程中去执行。</p>\n<p>.</p>\n<h3 id=\"apply\"><a class=\"anchor\" href=\"#apply\">#</a> apply</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Override  </span><br><span class=\"line\">public void apply() &#123;  </span><br><span class=\"line\">    final long startTime = System.currentTimeMillis();  </span><br><span class=\"line\">  </span><br><span class=\"line\">    final MemoryCommitResult mcr = commitToMemory();  </span><br><span class=\"line\">    final Runnable awaitCommit = new Runnable() &#123;  </span><br><span class=\"line\">            @Override  </span><br><span class=\"line\">            public void run() &#123;  </span><br><span class=\"line\">                try &#123;  </span><br><span class=\"line\">                    mcr.writtenToDiskLatch.await();  </span><br><span class=\"line\">                &#125; catch (InterruptedException ignored) &#123;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    QueuedWork.addFinisher(awaitCommit);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    Runnable postWriteRunnable = new Runnable() &#123;  </span><br><span class=\"line\">            @Override  </span><br><span class=\"line\">            public void run() &#123;  </span><br><span class=\"line\">                awaitCommit.run();  </span><br><span class=\"line\">                QueuedWork.removeFinisher(awaitCommit);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t//第二个参数传了一个runnable对象所以不会走commit的流程，会执行</span><br><span class=\"line\">    SharedPreferencesImpl.this.enqueueDiskWrite(mcr, postWriteRunnable);  </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">\tnotifyListeners(mcr);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从上面可以看到<br />\n <code>SharedPreferencesImpl.this.enqueueDiskWrite(mcr, postWriteRunnable); </code> <br />\n第二个参数传了一个 runnable 对象所以不会走 commit 的流程， <code>enqueueDiskWrite</code>  最后会执行下面的代码<br />\n <code>QueuedWork.queue(writeToDiskRunnable, !isFromSyncCommit);  </code></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//sholdDeley 为true，sCanDelay也为true，除非在执行Activity销毁时，会变成false,这里会延迟100ms然后执行MSG_RUN</span><br><span class=\"line\">public static void queue(Runnable work, boolean shouldDelay) &#123;  </span><br><span class=\"line\">    Handler handler = getHandler();  </span><br><span class=\"line\">  </span><br><span class=\"line\">    synchronized (sLock) &#123;  </span><br><span class=\"line\">        sWork.add(work);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        if (shouldDelay &amp;&amp; sCanDelay) &#123;  </span><br><span class=\"line\">            handler.sendEmptyMessageDelayed(QueuedWorkHandler.MSG_RUN, DELAY);  </span><br><span class=\"line\">        &#125; else &#123;  </span><br><span class=\"line\">            handler.sendEmptyMessage(QueuedWorkHandler.MSG_RUN);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//android.app.QueueWork.java</span><br><span class=\"line\">private static class QueuedWorkHandler extends Handler &#123;  </span><br><span class=\"line\">    static final int MSG_RUN = 1;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    QueuedWorkHandler(Looper looper) &#123;  </span><br><span class=\"line\">        super(looper);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    public void handleMessage(Message msg) &#123;  </span><br><span class=\"line\">        if (msg.what == MSG_RUN) &#123;  </span><br><span class=\"line\">            processPendingWork();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">private static void processPendingWork() &#123;  </span><br><span class=\"line\">    long startTime = 0;  </span><br><span class=\"line\"></span><br><span class=\"line\">    synchronized (sProcessingWork) &#123;  </span><br><span class=\"line\">        LinkedList&lt;Runnable&gt; work;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        synchronized (sLock) &#123;  </span><br><span class=\"line\">\t\t\t//sWork中就是QueueWork.queue中的runnable对象</span><br><span class=\"line\">            work = (LinkedList&lt;Runnable&gt;) sWork.clone();  </span><br><span class=\"line\">            sWork.clear();  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Remove all msg-s as all work will be processed now  </span><br><span class=\"line\">            getHandler().removeMessages(QueuedWorkHandler.MSG_RUN);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        if (work.size() &gt; 0) &#123;  </span><br><span class=\"line\">            for (Runnable w : work) &#123;  </span><br><span class=\"line\">\t\t\t\t//遍历执行sWork中的任务</span><br><span class=\"line\">                w.run();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>QueueWorkHandler</code>  这个线程中就会执行上面方法 <code>enqueueDiskWrite</code>  中创建的 <code>writeToDiskRunnable</code>  对象<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Runnable writeToDiskRunnable = new Runnable() &#123;  </span><br><span class=\"line\">        @Override  </span><br><span class=\"line\">        public void run() &#123;  </span><br><span class=\"line\">            synchronized (mWritingToDiskLock) &#123;  </span><br><span class=\"line\">                writeToFile(mcr, isFromSyncCommit);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            synchronized (mLock) &#123;  </span><br><span class=\"line\">                mDiskWritesInFlight--;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            if (postWriteRunnable != null) &#123;  </span><br><span class=\"line\">                postWriteRunnable.run();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure><br />\n 执行 <code>writeToFile</code>   进行数据写入，</p>\n<p>执行 <code>apply</code>  中创建的 <code>postWriteRunnable</code>  对象<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Runnable postWriteRunnable = new Runnable() &#123;  </span><br><span class=\"line\">        @Override  </span><br><span class=\"line\">        public void run() &#123;  </span><br><span class=\"line\">            awaitCommit.run();  </span><br><span class=\"line\">            QueuedWork.removeFinisher(awaitCommit);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;;  </span><br></pre></td></tr></table></figure><br />\n 执行 <code>awaitCommit</code>  任务<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final Runnable awaitCommit = new Runnable() &#123;  </span><br><span class=\"line\">         @Override  </span><br><span class=\"line\">         public void run() &#123;  </span><br><span class=\"line\">             try &#123;  </span><br><span class=\"line\">                 mcr.writtenToDiskLatch.await();  </span><br><span class=\"line\">             &#125; catch (InterruptedException ignored) &#123;  </span><br><span class=\"line\">             &#125;  </span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\">     &#125;;  </span><br></pre></td></tr></table></figure><br />\n 执行 <code>mcr.writtenToDiskLatch.await();</code> ，因为 <code>mcr.writtenToDiskLatch</code>  已经在 <code>wrinteToFile</code>  中执行了 <code>mcr.setDiskWriteResult</code> ，所以 state 已经变成了 0，不会挂起当前的 (QueueWrok) 线程</p>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "http://example.com/2022/05/22/OpenSLES%E7%AE%80%E4%BB%8B/",
            "url": "http://example.com/2022/05/22/OpenSLES%E7%AE%80%E4%BB%8B/",
            "title": "OpenSLES",
            "date_published": "2022-05-22T15:20:23.000Z",
            "content_html": "<p>接受 pcm 原始音频脉冲数据</p>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"object-sl对象\"><a class=\"anchor\" href=\"#object-sl对象\">#</a>  <code>Object</code>  SL 对象</h3>\n<p>代码中的 <code>SLObjectItf</code>  类型，<br />\n每个对象都有三种状态：</p>\n<ul>\n<li>Unrelalized (initial state) : 不可用状态 ， 对接是活跃的，但是还没有分配资源，处于不可用状态，对象内接口的方法不能使用。</li>\n<li>Realized ：可用状态。对象资源已分配，可以使用对象</li>\n<li>Suspended (optional state): 挂起状态，所需资源比可用状态要少，但是在挂起期间保留了状态信息。当资源不足时，系统可以选择将对象状态改成挂起状态或是不可用状态</li>\n</ul>\n<p><img data-src=\"http://tvax2.sinaimg.cn/large/b5348f57gy1h2iqkwi4e2j20od0d2jsy.jpg\" alt=\"OpenSLES Object state diagram\" /></p>\n<h3 id=\"interface-接口\"><a class=\"anchor\" href=\"#interface-接口\">#</a>  <code>Interface</code>  接口</h3>\n<p>由特定对象提供的相关特性集合的抽象，在代码中一般为 <code>SLxxxxItf</code> . 接口必须由特定对象进行生成。</p>\n<h3 id=\"一般使用方法\"><a class=\"anchor\" href=\"#一般使用方法\">#</a> 一般使用方法</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明对象和接口</span><br><span class=\"line\">SLObjectItf object = nullptr;</span><br><span class=\"line\">SLxxxxItf itf = nullptr;</span><br><span class=\"line\">// init object创建对象</span><br><span class=\"line\">...</span><br><span class=\"line\">// 初始化对象，分配资源</span><br><span class=\"line\">(*object)-&gt;Realize(object,SL_BOOLEAN_FALSE);</span><br><span class=\"line\">//check result</span><br><span class=\"line\">...</span><br><span class=\"line\">// 初始化接口，第二个参数指定接口类型</span><br><span class=\"line\">(*object)-&gt;GetInterface(object,SL_IID_XXX,&amp;itf);</span><br><span class=\"line\">...</span><br><span class=\"line\">//接口可以使用了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>可以理解为一个对象代表了一个资源和状态，它内部有一系列的接口，对象本身不提供操作，而是由对象内部的接口提供方法调用。</p>\n<h2 id=\"opensles使用流程\"><a class=\"anchor\" href=\"#opensles使用流程\">#</a> OpenSLES 使用流程：</h2>\n<h3 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h3>\n<p>Android 环境配置，在 CMakeLists 中将 OpenSLES 加入到目标库链接库列表中<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">CMakeLists.txt</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(nativelib  </span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t....        </span><br><span class=\"line\">\t\tOpenSLES  </span><br><span class=\"line\">        $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>\n<p>需要在头文件中加上引用<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opensles_player.h</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;SLES/OpenSLES.h&gt;  </span><br><span class=\"line\">#include &lt;SLES/OpenSLES_Android.h&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<p>先看一个图<br />\n<img data-src=\"http://tva2.sinaimg.cn/large/b5348f57gy1h2iss734x0j20uc0ckq5i.jpg\" alt=\"OpenSLES audio flow diagram\" /></p>\n<h4 id=\"1初始化引擎\"><a class=\"anchor\" href=\"#1初始化引擎\">#</a> 1. 初始化引擎</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">SLObjectItf m_engine_obj = nullptr;  </span><br><span class=\"line\">SLEngineItf m_engine = nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::CreateEngine() &#123;  </span><br><span class=\"line\">    SLresult lresult =slCreateEngine(&amp;m_engine_obj,0, nullptr,0, nullptr, nullptr);  </span><br><span class=\"line\">    if(CheckError(lresult, &quot;Engine&quot;)) return false;  </span><br><span class=\"line\">    lresult = asInterface(m_engine_obj)-&gt;Realize(m_engine_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;EngineRealize&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    lresult = asInterface(m_engine_obj)-&gt;GetInterface(m_engine_obj,SL_IID_ENGINE,&amp;m_engine);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2初始化合成器\"><a class=\"anchor\" href=\"#2初始化合成器\">#</a> 2. 初始化合成器</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 合成器对象</span><br><span class=\"line\">SLObjectItf m_output_mix_obj = nullptr;</span><br><span class=\"line\">// 环境混响接口</span><br><span class=\"line\">SLEnvironmentalReverbItf m_output_mix_evn_reverb = nullptr;  </span><br><span class=\"line\">// 环境混响设置参数</span><br><span class=\"line\">SLEnvironmentalReverbSettings m_output_mix_evn_settings = SL_I3DL2_ENVIRONMENT_PRESET_DEFAULT;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::CreateOutputMixer() &#123;  </span><br><span class=\"line\">    const SLInterfaceID mids[1] = &#123;SL_IID_ENVIRONMENTALREVERB&#125;;  </span><br><span class=\"line\">    const SLboolean mreq[1] = &#123;SL_BOOLEAN_FALSE&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t//使用Engine接口创建合成器对象</span><br><span class=\"line\">    SLresult lresult = asInterface(m_engine)-&gt;CreateOutputMix(m_engine,&amp;m_output_mix_obj,1,mids,mreq);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Output Mix&quot;)) return false;  </span><br><span class=\"line\">  \t//合成器对象初始化</span><br><span class=\"line\">    lresult = asInterface(m_output_mix_obj)-&gt;Realize(m_output_mix_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Mix Realize&quot;)) return false;  </span><br><span class=\"line\">  \t//使用合成器对象获取环境混响接口</span><br><span class=\"line\">    lresult = asInterface(m_output_mix_obj)-&gt;GetInterface(m_output_mix_obj,SL_IID_ENVIRONMENTALREVERB,&amp;m_output_mix_evn_reverb);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Mix Env Reverb&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t//如果环境混响接口获取成功，设置环境混响属性为上面定义的默认值</span><br><span class=\"line\">    if(lresult == SL_RESULT_SUCCESS)&#123;\t  </span><br><span class=\"line\">        (*m_output_mix_evn_reverb)-&gt;SetEnvironmentalReverbProperties(m_output_mix_evn_reverb,&amp;m_output_mix_evn_settings);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3初始化并配置播放器对象\"><a class=\"anchor\" href=\"#3初始化并配置播放器对象\">#</a> 3. 初始化并配置播放器对象</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//播放器对象</span><br><span class=\"line\">SLObjectItf m_pcm_player_obj = nullptr;</span><br><span class=\"line\">//播放器接口</span><br><span class=\"line\">SLPlayItf m_pcm_player = nullptr;</span><br><span class=\"line\">//音量接口</span><br><span class=\"line\">SLVolumeItf m_pcm_volume = nullptr;  </span><br><span class=\"line\">  </span><br><span class=\"line\">// Android缓冲区队列接口</span><br><span class=\"line\">SLAndroidSimpleBufferQueueItf m_pcm_buffer = nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::ConfigPlayer() &#123;          </span><br><span class=\"line\">    SLDataLocator_AndroidSimpleBufferQueue android_queue =&#123;SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE,SL_QUEUE_BUFFER_COUNT&#125;;  </span><br><span class=\"line\">\t// 定义PCM数据格式</span><br><span class=\"line\">    SLDataFormat_PCM pcm = &#123;  </span><br><span class=\"line\">SL_DATAFORMAT_PCM,  </span><br><span class=\"line\">(SLuint32)2,  </span><br><span class=\"line\">SL_SAMPLINGRATE_44_1,  </span><br><span class=\"line\">SL_PCMSAMPLEFORMAT_FIXED_16,  </span><br><span class=\"line\">SL_PCMSAMPLEFORMAT_FIXED_16,  </span><br><span class=\"line\">SL_SPEAKER_FRONT_LEFT|SL_SPEAKER_FRONT_RIGHT,  </span><br><span class=\"line\">SL_BYTEORDER_LITTLEENDIAN  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    SLDataSource slDataSource =&#123;&amp;android_queue,&amp;pcm&#125;;  </span><br><span class=\"line\">    SLDataLocator_OutputMix outputMix = &#123;SL_DATALOCATOR_OUTPUTMIX,m_output_mix_obj&#125;;  </span><br><span class=\"line\">    SLDataSink dataSink = &#123;&amp;outputMix, nullptr&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    SLInterfaceID ids[3] = &#123;SL_IID_BUFFERQUEUE,SL_IID_EFFECTSEND,SL_IID_VOLUME&#125;;  </span><br><span class=\"line\">    SLboolean reqs[3] = &#123;SL_BOOLEAN_TRUE,SL_BOOLEAN_TRUE,SL_BOOLEAN_TRUE,&#125;;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">  \t// 通过Engine接口创建音频播放器对象</span><br><span class=\"line\">    SLresult  lresult = asInterface(m_engine)-&gt;CreateAudioPlayer(m_engine,&amp;m_pcm_player_obj,&amp;slDataSource,&amp;dataSink,3,ids,reqs);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Create Audio Player&quot;)) return false;  </span><br><span class=\"line\">  \t// 初始化音频播放器对象</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;Realize(m_pcm_player_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player Realize&quot;)) return false;  </span><br><span class=\"line\">  \t// 使用音频播放器对象获取播放接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_PLAY,&amp;m_pcm_player);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t// 使用音频播放器对象获取缓冲区队列接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_BUFFERQUEUE,&amp;m_pcm_buffer);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Buffer GetInterface&quot;)) return false;  </span><br><span class=\"line\">  \t</span><br><span class=\"line\">\t// 缓冲区队列注册缓冲区数据可用回调接口</span><br><span class=\"line\">    lresult = (*m_pcm_buffer)-&gt;RegisterCallback(m_pcm_buffer,sReadPcmBufferCbFun,this);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Buffer RegisterCallback&quot;)) return false;  </span><br><span class=\"line\">  \t</span><br><span class=\"line\">  \t// 使用音频播放器对象获取音量接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_VOLUME,&amp;m_pcm_volume);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player Volume  GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    LOGD(TAG,&quot;OpenSL ES init success&quot;);  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"播放\"><a class=\"anchor\" href=\"#播放\">#</a> 播放</h3>\n<p>创建一个播放线程，<br />\n解码器将解码数据 push 到 PCM 数据缓冲队列中，通知播放器线程启动播放</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">void createThread()&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tstd::thread t = std::thread(cb.render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">void cb(OpenSLRender *render)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Android",
                "多媒体",
                "OpenSLES"
            ]
        },
        {
            "id": "http://example.com/2022/05/11/Cmake%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2022/05/11/Cmake%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Cmake的使用",
            "date_published": "2022-05-10T16:00:53.000Z",
            "content_html": "<p>在 Android Studio 中使用 Cmake 来构建 C,C++ 应用</p>\n<p>今天尝试了学习使用 ffmpeg 来编写播放器，需要使用 C,C++ 来编写代码，所有学习一下 Cmake 的使用。</p>\n<p>Cmake 是一个开源，跨平台的工具，被用来构建、测试、打包软件。Cmake 使用了简单的和平台、编译器无关的配置文件，来生成当前平台的软件、链接库。</p>\n<h2 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> 用法</h2>\n<p>举个栗子：<br />\n我有一个 jni 接口，Java 层调用这个接口，返回一个字符串 <code>hello Cmake</code></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libnative2/src/main/cpp/nativelib.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;jni.h&gt;  </span><br><span class=\"line\">#include &lt;string&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">extern &quot;C&quot; JNIEXPORT jstring JNICALL  </span><br><span class=\"line\">Java_com_xzq_nativelib2_NativeLib_stringFromJNI(  </span><br><span class=\"line\">        JNIEnv* env,  </span><br><span class=\"line\">        jobject /* this */) &#123;  </span><br><span class=\"line\">    std::string hello = &quot;hello Cmake&quot;;  </span><br><span class=\"line\">    return env-&gt;NewStringUTF(hello.c_str());  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 这个 cpp 文件对应的 java 类是 com/xzq/nativelib2/NativeLib.kt 这个类</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libnative2/src/main/kotlin/com/xzq/nativelib2/NativeLib.kt</span><br><span class=\"line\"></span><br><span class=\"line\">package com.xzq.nativelib2  </span><br><span class=\"line\">  </span><br><span class=\"line\">class NativeLib &#123;  </span><br><span class=\"line\">  \t//external对应的是Java中的native方法</span><br><span class=\"line\">\texternal fun stringFromJNI(): String  </span><br><span class=\"line\">  </span><br><span class=\"line\">    companion object &#123;  </span><br><span class=\"line\">        // Used to load the &#x27;nativelib2&#x27; library on application startup.  </span><br><span class=\"line\">        init &#123;</span><br><span class=\"line\">\t\t\t//它会去加载名为libnativelib2.so的动态库文件</span><br><span class=\"line\">            System.loadLibrary(&quot;nativelib2&quot;)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我想要将这个 cpp 编译成 so 文件 <code>libnativelib2.so</code> ，在 app 模块中 MainActivity 中去调用 NativeLib 接口去访问本地 cpp 代码。</p>\n<p>Cmake 有两种用法：gradle 配置和命令行</p>\n<h3 id=\"1gradle配置\"><a class=\"anchor\" href=\"#1gradle配置\">#</a> 1.gradle 配置</h3>\n<p>CMake 可以通过 android build tool 脚本进行配置，在启动 gradle 构建后自动生成对应的文件。</p>\n<p>1. 在 <code>android</code>  配置块中将 gradle 链接到你的 CMake 脚本<br />\n 2. 在 <code>defaultConfig</code>  配置块中可以指定 CMake 可选的参数 (args) 和标记 (flags)<br />\n 3. 在 <code>productFlavor</code>  中针对不同产品来替换对应属性</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;  </span><br><span class=\"line\">    id &#x27;com.android.library&#x27;  </span><br><span class=\"line\">    or</span><br><span class=\"line\">\tid &#x27;com.android.application&#x27;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;  ...  </span><br><span class=\"line\">\tdefaultConfig &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\tbuildTypes &#123;...&#125;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tproductFlavors &#123;    </span><br><span class=\"line\">\t\t...    </span><br><span class=\"line\">\t\tcreate(&quot;demo&quot;) &#123; </span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t\texternalNativeBuild &#123;</span><br><span class=\"line\">\t\t\t\tcmake &#123;     </span><br><span class=\"line\">\t\t\t\t\t... </span><br><span class=\"line\">\t\t\t\t\t// 指定gradle只编译target指定的模块。如果不指定target，那么CMake配置中的所有模块都会被进行编译和打包。</span><br><span class=\"line\">\t\t\t\t\ttargets += listOf(&quot;native-lib-demo&quot;,                 </span><br><span class=\"line\">\t\t\t\t     //可执行文件是可选的，一般情况，仅编译动态库文件能满足要求。\t</span><br><span class=\"line\">\t\t\t\t\t&quot;my-executible-demo&quot;)       </span><br><span class=\"line\">\t\t\t\t&#125;      </span><br><span class=\"line\">\t\t\t&#125;   </span><br><span class=\"line\">\t\t&#125;    </span><br><span class=\"line\">\t\tcreate(&quot;paid&quot;) &#123;     </span><br><span class=\"line\">\t\t\t... </span><br><span class=\"line\">\t\t\texternalNativeBuild &#123; </span><br><span class=\"line\">\t\t\t\tcmake &#123;     </span><br><span class=\"line\">\t\t\t\t\t... </span><br><span class=\"line\">\t\t\t\t\ttargets += listOf(&quot;native-lib-paid&quot;,      </span><br><span class=\"line\">\t\t\t\t\t&quot;my-executible-paid&quot;)     </span><br><span class=\"line\">\t\t\t\t&#125;     </span><br><span class=\"line\">\t\t\t&#125;   </span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 本地编译配置，可以配置ndk-bundle和CMake</span><br><span class=\"line\">\texternalNativeBuild &#123;    </span><br><span class=\"line\">\t\t//CMake编译配置    </span><br><span class=\"line\">\t\tcmake &#123;   </span><br><span class=\"line\">\t\t\t//指定CMakeLists.txt文件路径</span><br><span class=\"line\">\t\t\tpath = file(&quot;CMakeLists.txt&quot;)    </span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2命令行\"><a class=\"anchor\" href=\"#2命令行\">#</a> 2. 命令行</h3>\n<p>使用命令行方式编译本地代码，<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake \\</span><br><span class=\"line\">-DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake \\    </span><br><span class=\"line\">-DANDROID_ABI=$ABI \\    </span><br><span class=\"line\">-DANDROID_PLATFORM=android-$MINSDKVERSION \\    </span><br><span class=\"line\">$OTHER_ARGS</span><br></pre></td></tr></table></figure></p>\n<p>上面命令行中几个参数的含义：</p>\n<ul>\n<li>-DCMAKE_TOLLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake   指定 ndk 中 CMake 编译工具链文件地址</li>\n<li>-DANDROID_ABI=$ABI   指定目标平台的应用程序二进制接口    2022 年 最常见的应该是 arm64-v8a</li>\n<li>-DANDROID_PLATFORM=android-$MINSDKVERSION  指定应用或库支持的最低 Android 平台版本，例如 android-31,android-29</li>\n</ul>\n<p>还有更多的参数可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vbmRrL2d1aWRlcy9jbWFrZT9obD16aC1jbiNjb21tYW5kLWxpbmVfMg==\"> Android 指南 - CMake</span></p>\n<h2 id=\"cmakeliststxt-配置文件编写\"><a class=\"anchor\" href=\"#cmakeliststxt-配置文件编写\">#</a> CMakeLists.txt 配置文件编写</h2>\n<p>CMake 的执行已经知道了，但是我们没讲到如何将 cpp 文件编译成可执行文件或是库文件，CMakeLists.txt 就是用来告诉 CMake, 要如何编译，按照什么规则进行编译，编译需要使用的依赖项目，好像很类似与 Makefile 文件。下面是一个栗子：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定了Cmake的最小支持版本</span><br><span class=\"line\">cmake_minimum_required(VERSION 3.10.2)  </span><br><span class=\"line\">  </span><br><span class=\"line\">#设置这个Cmake项目名，可以通过变量PROJECT_NAME进行访问</span><br><span class=\"line\">  </span><br><span class=\"line\">project(&quot;nativelib2&quot;)  </span><br><span class=\"line\">  </span><br><span class=\"line\">#创建并命名一个库</span><br><span class=\"line\">add_library( </span><br><span class=\"line\">\t\t# 设置这个库的名称  </span><br><span class=\"line\">        nativelib2  </span><br><span class=\"line\">  </span><br><span class=\"line\">        # 这个生成的库的类型，静态库，动态库等 </span><br><span class=\"line\">        SHARED  </span><br><span class=\"line\">  </span><br><span class=\"line\">        # 指定库的源文件相对路径，当在cpp中新增了文件中，需要在这个进行声明，cmake才会将新文件打包进库中。除了可以指定cpp源文件，还可以指定库文件路径</span><br><span class=\"line\">        nativelib2.cpp)  </span><br><span class=\"line\">  </span><br><span class=\"line\"># 搜索ndk环境中的库并自定义命名路径变量</span><br><span class=\"line\">find_library( </span><br><span class=\"line\">\t\t# 定义变量log-lib存储log这个库的路径</span><br><span class=\"line\">        log-lib  </span><br><span class=\"line\">  </span><br><span class=\"line\">        # 指定ndk环境中库的名称     </span><br><span class=\"line\">\t\tlog)  </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">#指定所有需要被链接到目标库的库名称  </span><br><span class=\"line\">target_link_libraries(</span><br><span class=\"line\">\t\t# 目标库</span><br><span class=\"line\">        nativelib2  </span><br><span class=\"line\">  \t\t</span><br><span class=\"line\">\t\t#被链接的库，可以新增多个库名称</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">     \t$&#123;log-lib&#125;)</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure></p>\n<p>配置好了之后，我们直接使用 Android Studio 编译安装 apk，打开 app，能看到打印成功<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2022-05-11 01:25:51.546 20065-20065/com.luffy.mulmedia D/NavigationActivity: stringFromJNI2 hello Cmake</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h2>\n<p>我在学习过程中发现，如果 Android Studio 项目存在多个模块，如果有一个模块需要设置 cmake 的 abiFilter  为 armeabi-v7a，那么每一个模块都要设置 abiFilter，不然就会存在找不到 so 的情况。<br />\n我猜测，可能是因为如果某个模块不设置，那么就会在最终的 apk 的 jniLibs 中创建默认的 arm64-v8a 文件夹，然后运行中，发现了有 arm64-v8a 的文件夹，那么就只会在这个路径下搜索全部的 so 文件；又由于其他指定了 abiFilter 的模块会编译出指定的 armeabi-v7a 架构的文件，所有在 arm64-v8a 中找不到，最终抛出异常。如果有大佬知道原因的话可以告诉我一下。</p>\n",
            "tags": [
                "Android",
                "Cmake"
            ]
        },
        {
            "id": "http://example.com/2022/04/04/PathClassLoader%E4%B8%8EDexClassLoader-%E8%A7%A3%E6%9E%90/",
            "url": "http://example.com/2022/04/04/PathClassLoader%E4%B8%8EDexClassLoader-%E8%A7%A3%E6%9E%90/",
            "title": "PathClassLoader与DexClassLoader 解析",
            "date_published": "2022-04-04T15:06:50.000Z",
            "content_html": "<h1 id=\"未完\"><a class=\"anchor\" href=\"#未完\">#</a> 未完</h1>\n<h2 id=\"java中的classloader\"><a class=\"anchor\" href=\"#java中的classloader\">#</a> Java 中的 ClassLoader</h2>\n<p>在 Java 中，类加载器的作用是通过一个类的全限定名获取描述这个类的二进制字节流，然后加载到虚拟机中生成类对象并提供引用。<br />\n对 Java 虚拟机来说，类加载器可以分为 2 中：</p>\n<ul>\n<li>启动类加载器。由 C++ 代码实现，是 Java 虚拟机的一部分</li>\n<li>其他加载器。由 Java 代码实现，独立于虚拟机，并且全都继承自 java.lang.ClassLoader 这个类。</li>\n</ul>\n<p>对于我们开发人员来说，类加载器由 3 种：</p>\n<ul>\n<li>bootstrap ClassLoader</li>\n<li>Extension ClassLoader 加载指定扩展包中的类</li>\n<li>Application ClassLoader  加载 ClassPath 指定路径上的类</li>\n</ul>\n<h2 id=\"双亲委派模型\"><a class=\"anchor\" href=\"#双亲委派模型\">#</a> 双亲委派模型</h2>\n<p>双亲委派模型是一种类加载的模型，是被推荐使用的类加载模型。双亲委派模型的定义是每次去加载一个类时，先判断这个类是否加载过，如果没有加载过，那么判断有没有父类加载器，如果有父类加载器，那么先调用父类加载器的加载方法；如果父类加载器加载失败，那么就调用当前类加载器。</p>\n<p>使用双亲委派模型的好处：<br />\n使 Java 类与 Java 类加载器一起产生了优先级层次，保证了同一个类始终由一个类加载器去加载。</p>\n<p>双亲委派模型的实现：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">protected synchronized Class&lt;?&gt; loadClass(Stirng name,boolean resolve) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\tClass c = findLoadedClass(name);</span><br><span class=\"line\">\tif(c == null)&#123;</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t\tif(parent != null)&#123;</span><br><span class=\"line\">\t\t\t\t//父类加载器存在，继续调用父类加载器的loadClass方法</span><br><span class=\"line\">\t\t\t\tc = parent.loadClass(name,false);</span><br><span class=\"line\">\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t//父类加载器不存在，调用启动类加载器去加载</span><br><span class=\"line\">\t\t\t\tc = findBootstrapClassOrNull(name);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (ClassNotFoundException e)&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//如果父类加载器和启动类加载器都加载失败，使用当前类加载器去加载</span><br><span class=\"line\">\t\tif ( c == null )&#123;</span><br><span class=\"line\">\t\t\tc = findClass(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(resolve)&#123;</span><br><span class=\"line\">\t\tresolveClass(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"android-dalvik虚拟机中的类加载器\"><a class=\"anchor\" href=\"#android-dalvik虚拟机中的类加载器\">#</a> Android Dalvik 虚拟机中的类加载器</h2>\n<h3 id=\"basedexclassloader\"><a class=\"anchor\" href=\"#basedexclassloader\">#</a> BaseDexClassLoader</h3>\n<p>一个基于 Dex 的通用功能的 ClassLoader 实现，其核心代码如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java</span><br><span class=\"line\">Class BaseDexClassLoader extends ClassLoader&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final DexPathList pathList;</span><br><span class=\"line\">\t//一个ClassLoader数组，用来加载pathList pathList中可能依赖的类和资源，用来实现\t</span><br><span class=\"line\">\t//Android中的AndroidManifest.xml中&lt;use-library&gt;标签中的库</span><br><span class=\"line\">\tprotected final ClassLoader[] sharedLibraryLoaders;</span><br><span class=\"line\">\tprotected final ClassLoader[] sharedLibraryLoadersAfter;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic BaseDexClassLoader(String dexPath,String librarySearchPath,</span><br><span class=\"line\">\t\tClassLoader parent,ClassLoader[] sharedLibraryLoaders,</span><br><span class=\"line\">\t\tClassLoader[] sharedLibraryLoadersAfter,boolean isTrust)&#123;</span><br><span class=\"line\">\t\tsuper(parent);</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tthis.pathList = new DexPathList(this,dexPath,librarySearchPath,null,isTrust);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprotected synchronized Class&lt;?&gt; findClass(Stirng name,boolean resolve) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tif(sharedLibraryLoaders != null)&#123;</span><br><span class=\"line\">\t\t\tfor(ClassLoader loader : sharedLibraryLoaders)&#123;</span><br><span class=\"line\">\t\t\t\ttry&#123;</span><br><span class=\"line\">\t\t\t\t\treturn loader.loadClass(name);</span><br><span class=\"line\">\t\t\t\t&#125;catch(ClassNotFoundException ignore)&#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tList&lt;Throwable&gt; suppressedExceptions = new ArrayList&lt;Throwable&gt;();</span><br><span class=\"line\">\t\tClass c = dexPath.findClass(name,suppressedExceptions);</span><br><span class=\"line\">\t\tif(c == null)&#123;</span><br><span class=\"line\">\t\t\treturn c;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(sharedLibraryLoadersAfter != null)&#123;</span><br><span class=\"line\">\t\t\tfor(ClassLoader loader : sharedLibraryLoadersAfter)&#123;</span><br><span class=\"line\">\t\t\t\ttry&#123;</span><br><span class=\"line\">\t\t\t\t\treturn loader.loadClass(name);</span><br><span class=\"line\">\t\t\t\t&#125;catch(ClassNotFoundException ignore)&#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(c == null)&#123;</span><br><span class=\"line\">\t\t\tthrow new ClassNotFoundException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>从上面可以看出，BaseDexClassLoader 并没有遵守 Java 的双亲委托模型。</p>\n<p>BaseDexClassLoader 将代码加载又委托给了 DexPathList 来进行加载。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span><br><span class=\"line\">class DexPathList&#123;</span><br><span class=\"line\">\tElement[] dexElements;</span><br><span class=\"line\">\tpublic DexPathList(...)&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tdexElement = makePathElements(spliteDexPath(dexPath)</span><br><span class=\"line\">\t\t\t,null,null,classLoader,\tisTrust);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//这里有关于热修复实现的知识点，就是将补丁 dex 文件放到 dexElements 数组靠前位置，</span><br><span class=\"line\">\t//这样在加载 class 时，优先找到补丁包中的 dex 文件，加载到 class 之后就不再寻找，从</span><br><span class=\"line\">\t//而原来的 apk 文件中同名的类就不会再使用，从而达到修复的目的</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Class&lt;?&gt; findClass(String name,List&lt;Throwable&gt; suppressed)&#123;</span><br><span class=\"line\">\t\tfor(Element element : dexElements)&#123;</span><br><span class=\"line\">\t\t\tClass&lt;?&gt; clazz = element.findClass(name,classLoader,suppressed);</span><br><span class=\"line\">\t\t\tif(clazz != null)&#123;</span><br><span class=\"line\">\t\t\t\treturn clazz;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static Element[] makeDexElements(List&lt;File&gt; files,File optimizedDictionary,List&lt;IOException&gt; suppressedExceptions,ClassLoader classloader,boolean isTrusted)&#123;</span><br><span class=\"line\">\t\tElement[] elements = new Element[files.size()];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor(Files file : files)&#123;</span><br><span class=\"line\">\t\t\tif(file.isDictionary())&#123;</span><br><span class=\"line\">\t\t\t\telements[elementsPos++] = new Element(file);</span><br><span class=\"line\">\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\tif(file.isFile())&#123;</span><br><span class=\"line\">\t\t\t\t\tDexFile dex = null;</span><br><span class=\"line\">\t\t\t\t\tif(file.path.endWith(&quot;.dex&quot;))&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdex = loadDexFile(file,optimizedDictionary,loader,elements);</span><br><span class=\"line\">\t\t\t\t\t\tif(dex != null)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\telements[elementsPos++] = new Element(dex,null);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdex = loadDexFile(file,optimizedDictionary,loader,elements);</span><br><span class=\"line\">\t\t\t\t\t\tif(dex == null)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\telements[elementsPos++] = new Element(file);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\telements[elementsPos++] = new Element(dex,file);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn elements;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate static DexFile loadDexPath(File file,File optimizedDictionary,ClassLoader loader,Element[] elements)&#123;</span><br><span class=\"line\">\t\tif(optimizeDictory == null)&#123;</span><br><span class=\"line\">\t\t\treturn new DexFile(file,loader,elements);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t//创建一个文件，路径为optimizedDictionary指定文件夹内，file同名的文件。</span><br><span class=\"line\">\t\t\tString optimizedPath = optimizedPathFor(file,optimizedDictionary);</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//libcore/dalvik/src/main/java/dalvik/system/DexFile.java</span><br><span class=\"line\"></span><br><span class=\"line\">final Class DexFile&#123;</span><br><span class=\"line\">\tprivate Object mCookie;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic DexFile(File file,ClassLoader loader,DexPathList.Element[] elements)&#123;</span><br><span class=\"line\">\t\tmCookie = openDexFile(...);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate static Object openDexFile()&#123;</span><br><span class=\"line\">\t\treturn openDexFileNative(...);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pathclassloader\"><a class=\"anchor\" href=\"#pathclassloader\">#</a> PathClassLoader</h3>\n<p>只能加载已经安装过的 Apk</p>\n<h3 id=\"dexclassloader\"><a class=\"anchor\" href=\"#dexclassloader\">#</a> DexClassLoader</h3>\n<p>可以加载 jar,apk,dex, 可以直接从 SD 卡加载未安装的 apk</p>\n",
            "tags": [
                "Android",
                "插件化",
                "Dalvik虚拟机"
            ]
        },
        {
            "id": "http://example.com/2022/03/31/Android-%E8%93%9D%E7%89%99%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/",
            "url": "http://example.com/2022/03/31/Android-%E8%93%9D%E7%89%99%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/",
            "title": "Android 蓝牙应用开发流程",
            "date_published": "2022-03-31T14:30:19.000Z",
            "content_html": "<h1 id=\"蓝牙权限申请\"><a class=\"anchor\" href=\"#蓝牙权限申请\">#</a> 蓝牙权限申请</h1>\n<p>目标应用的 targetSdkVersion &gt;= 31，那么应该申请一下权限</p>\n<ul>\n<li>搜索蓝牙设备权限 ：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_SCAN&quot;/&gt;</code></li>\n<li>开启蓝牙对其他设备可见的权限：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADVERTISE&quot;/&gt;</code></li>\n<li>与已经配对过的设备进行通讯：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_CONNECT&quot;/&gt;</code></li>\n<li>传统蓝牙权限，需要声明权限的 maxSdkVersion 来满足兼容性。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- Request legacy Bluetooth permissions on older devices. --&gt;  </span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;  \t\t</span><br><span class=\"line\">\tandroid:maxSdkVersion=&quot;30&quot; /&gt;  </span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;  </span><br><span class=\"line\">\tandroid:maxSdkVersion=&quot;30&quot; /&gt;</span><br></pre></td></tr></table></figure></li>\n<li>获取蓝牙设备真实位置信息的权限：<br />\n <code>&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;</code></li>\n</ul>\n<p>目标应用的 targetSdkVersion &lt;= 30，那么应该申请一下权限<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;</span><br><span class=\"line\">//if(version &gt; 29)&#123;</span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;</span><br><span class=\"line\">//&#125; else &#123;</span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;/&gt;</span><br><span class=\"line\">//&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-feature android:name=&quot;android.hardware.bluetooth&quot; android:required=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>// 发现设备权限<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"经典蓝牙连接\"><a class=\"anchor\" href=\"#经典蓝牙连接\">#</a> 经典蓝牙连接</h1>\n<h2 id=\"创建bluetoothadapter对象\"><a class=\"anchor\" href=\"#创建bluetoothadapter对象\">#</a> 创建 BluetoothAdapter 对象</h2>\n<p><code>val adapter = BluetoothAdapter.getDefaultAdapter()</code></p>\n<p>获取蓝牙状态：蓝牙是否开启，如果没有开启，就跳转到蓝牙开启页面</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (bluetoothAdapter?.isEnabled == false) &#123;  </span><br><span class=\"line\">\tval enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)</span><br><span class=\"line\">\tstartActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>监听蓝牙状态变化，蓝牙状态由 4 种：</p>\n<ul>\n<li>STATE_ON   蓝牙已开启，该状态下才能继续使用 BluetoothAdapter 进行蓝牙配对</li>\n<li>STATE_OFF  蓝牙已关闭。</li>\n<li>STATE_TURNING_ON，正在开启种，该状态 BluetoothAdapter 还无法使用</li>\n<li>STATE_TURNING_OFF 正在关闭种，可以在这个状态去关闭蓝牙连接</li>\n</ul>\n<p>使用系统广播<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1 声明权限 </span><br><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//2 开启广播监听</span><br><span class=\"line\">fun registerBluetoothReceiver(context : Context)&#123;  </span><br><span class=\"line\">    val intentFilter = IntentFilter().apply &#123;  </span><br><span class=\"line\"> addAction(BluetoothAdapter.ACTION_STATE_CHANGED)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> context.registerReceiver(bluetoothReceiver,intentFilter)  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">val bluetoothReceiver = object : BroadcastReceiver() &#123;  </span><br><span class=\"line\">    override fun onReceive(context: Context?, intent: Intent?) &#123;  </span><br><span class=\"line\">        when(intent?.action)&#123;  </span><br><span class=\"line\">            BluetoothAdapter.ACTION_STATE_CHANGED -&gt; &#123;  </span><br><span class=\"line\">                val state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,BluetoothAdapter.STATE_OFF)  </span><br><span class=\"line\">                val prestate = intent.getIntExtra(BluetoothAdapter.EXTRA_PREVIOUS_STATE,BluetoothAdapter.STATE_OFF)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"扫描蓝牙设备\"><a class=\"anchor\" href=\"#扫描蓝牙设备\">#</a> 扫描蓝牙设备</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun registerBluetoothReceiver(context : Context)&#123;  </span><br><span class=\"line\">    val intentFilter = IntentFilter().apply &#123;  </span><br><span class=\"line\">        addAction(BluetoothDevice.ACTION_FOUND)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\"> context.registerReceiver(bluetoothReceiver,intentFilter)  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">val bluetoothReceiver = object : BroadcastReceiver() &#123;  </span><br><span class=\"line\">    override fun onReceive(context: Context?, intent: Intent?) &#123;  </span><br><span class=\"line\">        when(intent?.action)&#123;  </span><br><span class=\"line\">            BluetoothDevice.ACTION_FOUND -&gt; &#123;  </span><br><span class=\"line\">                val device: BluetoothDevice? =  </span><br><span class=\"line\">                    intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE)  </span><br><span class=\"line\">                device?.run &#123;  </span><br><span class=\"line\"> val deviceName = name  </span><br><span class=\"line\"> val deviceHardwareAddress = address // MAC address  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配对\"><a class=\"anchor\" href=\"#配对\">#</a> 配对</h2>\n<p>蓝牙建立连接也是一个 C/S 模型，需要一个 Server 和一个 Client</p>\n<ul>\n<li>BluetoothServerSocket   蓝牙服务端 Socket 接口，监听客户端的连接，收到了连接请求后会返回一个 BluetoothSocket 接口对象用来通讯</li>\n<li>BluetoothSocket   蓝牙双方通讯的 socket 接口</li>\n</ul>\n<h3 id=\"服务端\"><a class=\"anchor\" href=\"#服务端\">#</a> 服务端</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private inner class AcceptThread : Thread() &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    private val mmServerSocket: BluetoothServerSocket? by lazy(LazyThreadSafetyMode.NONE) &#123;  </span><br><span class=\"line\"> bluetoothAdapter?.listenUsingInsecureRfcommWithServiceRecord(&quot;YOUR DEVICE NAME&quot;, UUID.fromString(&quot;MY_UUID&quot;))  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> override fun run() &#123;  </span><br><span class=\"line\">        // Keep listening until exception occurs or a socket is returned.  </span><br><span class=\"line\"> var shouldLoop = true  </span><br><span class=\"line\"> while (shouldLoop) &#123;  </span><br><span class=\"line\">            val socket: BluetoothSocket? = try &#123;  </span><br><span class=\"line\">                mmServerSocket?.accept()  </span><br><span class=\"line\">            &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">                Log.e(TAG, &quot;Socket&#x27;s accept() method failed&quot;, e)  </span><br><span class=\"line\">                shouldLoop = false  </span><br><span class=\"line\"> null &#125;  </span><br><span class=\"line\">            socket?.also &#123;  </span><br><span class=\"line\"> manageMyConnectedSocket(it)  </span><br><span class=\"line\">                mmServerSocket?.close()  </span><br><span class=\"line\">                shouldLoop = false  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Closes the connect socket and causes the thread to finish.  </span><br><span class=\"line\"> fun cancel() &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmServerSocket?.close()  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Could not close the connect socket&quot;, e)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">fun manageMyConnectedSocket(socket : BluetoothSocket)&#123;  </span><br><span class=\"line\">    //execute bluetooth communicate  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"客户端\"><a class=\"anchor\" href=\"#客户端\">#</a> 客户端</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private inner class ConnectThread(device: BluetoothDevice) : Thread() &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    private val mmSocket: BluetoothSocket? by lazy(LazyThreadSafetyMode.NONE) &#123;  </span><br><span class=\"line\"> device.createRfcommSocketToServiceRecord(UUID.fromString(&quot;MY_UUID&quot;))  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"> public override fun run() &#123;  </span><br><span class=\"line\">        // Cancel discovery because it otherwise slows down the connection.  </span><br><span class=\"line\"> bluetoothAdapter?.cancelDiscovery()  </span><br><span class=\"line\">  </span><br><span class=\"line\">        mmSocket?.let &#123; socket -&gt;  </span><br><span class=\"line\"> // Connect to the remote device through the socket. This call blocks  </span><br><span class=\"line\"> // until it succeeds or throws an exception. socket.connect()  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // The connection attempt succeeded. Perform work associated with  </span><br><span class=\"line\"> // the connection in a separate thread. manageMyConnectedSocket(socket)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Closes the client socket and causes the thread to finish.  </span><br><span class=\"line\"> fun cancel() &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmSocket?.close()  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Could not close the client socket&quot;, e)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据传输\"><a class=\"anchor\" href=\"#数据传输\">#</a> 数据传输</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private val handler: Handler = Handler()  </span><br><span class=\"line\">val MESSAGE_READ: Int = 0  </span><br><span class=\"line\">val MESSAGE_WRITE: Int = 1  </span><br><span class=\"line\">val MESSAGE_TOAST: Int = 2  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">private inner class ConnectedThread(private val mmSocket: BluetoothSocket) : Thread() &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    private val mmInStream: InputStream = mmSocket.inputStream  </span><br><span class=\"line\"> private val mmOutStream: OutputStream = mmSocket.outputStream  </span><br><span class=\"line\"> private val mmBuffer: ByteArray = ByteArray(1024) // mmBuffer store for the stream  </span><br><span class=\"line\">  </span><br><span class=\"line\"> override fun run() &#123;  </span><br><span class=\"line\">        var numBytes: Int // bytes returned from read()  </span><br><span class=\"line\">  </span><br><span class=\"line\"> // Keep listening to the InputStream until an exception occurs. while (true) &#123;  </span><br><span class=\"line\">            // Read from the InputStream.  </span><br><span class=\"line\"> numBytes = try &#123;  </span><br><span class=\"line\">                mmInStream.read(mmBuffer)  </span><br><span class=\"line\">            &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">                Log.d(TAG, &quot;Input stream was disconnected&quot;, e)  </span><br><span class=\"line\">                break  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Send the obtained bytes to the UI activity.  </span><br><span class=\"line\"> val readMsg = handler.obtainMessage(  </span><br><span class=\"line\">                MESSAGE_READ, numBytes, -1,  </span><br><span class=\"line\">                mmBuffer)  </span><br><span class=\"line\">            readMsg.sendToTarget()  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Call this from the main activity to send data to the remote device.  </span><br><span class=\"line\"> fun write(bytes: ByteArray) &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmOutStream.write(bytes)  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Error occurred when sending data&quot;, e)  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Send a failure message back to the activity.  </span><br><span class=\"line\"> val writeErrorMsg = handler.obtainMessage(MESSAGE_TOAST)  </span><br><span class=\"line\">            val bundle = Bundle().apply &#123;  </span><br><span class=\"line\"> putString(&quot;toast&quot;, &quot;Couldn&#x27;t send data to the other device&quot;)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\"> writeErrorMsg.data = bundle  </span><br><span class=\"line\">            handler.sendMessage(writeErrorMsg)  </span><br><span class=\"line\">            return  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Share the sent message with the UI activity.  </span><br><span class=\"line\"> val writtenMsg = handler.obtainMessage(  </span><br><span class=\"line\">            MESSAGE_WRITE, -1, -1, mmBuffer)  </span><br><span class=\"line\">        writtenMsg.sendToTarget()  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    // Call this method from the main activity to shut down the connection.  </span><br><span class=\"line\"> fun cancel() &#123;  </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            mmSocket.close()  </span><br><span class=\"line\">        &#125; catch (e: IOException) &#123;  </span><br><span class=\"line\">            Log.e(TAG, &quot;Could not close the connect socket&quot;, e)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"低功耗蓝牙bluetooth-low-energy\"><a class=\"anchor\" href=\"#低功耗蓝牙bluetooth-low-energy\">#</a> 低功耗蓝牙（Bluetooth Low Energy）</h1>\n<h2 id=\"ble设备发现\"><a class=\"anchor\" href=\"#ble设备发现\">#</a> BLE 设备发现</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmx1ZXRvb3RoLmNvbS9ibG9nL2FkdmVydGlzaW5nLXdvcmtzLXBhcnQtMS8=\">https://www.bluetooth.com/blog/advertising-works-part-1/</span><br />\n 低功耗蓝牙协议栈中包含的一个用来帮助设备彼此发现并连接的配置文件：Generic Access Profile (GAP)<br />\n 这个发现过程里面就有一个称之为 &quot;advertise'' 的动作，表明设备想被其他设备发现。<br />\n处于 Advertise 的设备会持续向周围发送很小的数据包，让周围的扫描设备能够发现它。<br />\n对于 GAP 协议来说 发送 advertise 广播的设备可以被看做是边缘设备；也可以作为一个广播者存在，不接受任何的连接请求，单纯只发送广播。</p>\n<p>处于扫描中的设备是作为 GAP 的观察者，当其对连接上其他设备感兴趣时，被作为 GAP 中心设备。</p>\n<p>概念：<br />\nPDU: packat data unit<br />\nADV: advertising 广播</p>\n<p>Android 中低功耗蓝牙发送广播与开启扫描方式：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//第一步依然是初始化BluetoothAdapter，</span><br><span class=\"line\">val adapter = BluetoothAdapter.getDefaultAdapter()</span><br><span class=\"line\"></span><br><span class=\"line\">// next step: </span><br><span class=\"line\"></span><br><span class=\"line\">//发送广播，在边缘设备上实现，Peripheral</span><br><span class=\"line\">fun startAdvertising()&#123;  </span><br><span class=\"line\">    bluetoothAdapter?.bluetoothLeAdvertiser?.run &#123;  </span><br><span class=\"line\"> val setting = AdvertiseSettings.Builder().apply &#123;  </span><br><span class=\"line\"> /*设置Advertise广播的参数  </span><br><span class=\"line\"> * 设置广播模式 三种模式:ADVERTISE_MODE_LOW_POWER 低功耗，默认模式  </span><br><span class=\"line\"> *                   ADVERTISE_MODE_BALANCED 平衡模式，平衡了广播频率与电量消耗  </span><br><span class=\"line\"> *                   ADVERTISE_MODE_LOW_LATENCY 传统模式，高耗电模式。  </span><br><span class=\"line\"> */ setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_POWER)  </span><br><span class=\"line\">            // 广播是否是可连接的  </span><br><span class=\"line\"> setConnectable(true)  </span><br><span class=\"line\">            //设置广播时长，如果为0，则不会中断  </span><br><span class=\"line\"> setTimeout(0)  </span><br><span class=\"line\">            /*  </span><br><span class=\"line\"> * 设置广播传输功耗等级，可以限制广播数据包的可见范围:  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_ULTRA_LOW 最低  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_LOW 低  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_MEDIUM 中  </span><br><span class=\"line\"> * ADVERTISE_TX_POWER_HIGH 高  </span><br><span class=\"line\"> * */ setTxPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_LOW)  </span><br><span class=\"line\">        &#125;.build()  </span><br><span class=\"line\">        // Ble广播数据包，需要注意的是AdvertiseData中包含的数据大小不能超过31个字节  </span><br><span class=\"line\"> val data = AdvertiseData.Builder().apply &#123;  </span><br><span class=\"line\"> setIncludeDeviceName(true)  </span><br><span class=\"line\">            setIncludeTxPowerLevel(true)  </span><br><span class=\"line\">            addServiceUuid(ParcelUuid.fromString(UUID.randomUUID().toString()))  </span><br><span class=\"line\">            addManufacturerData(0x0001, byteArrayOf())  </span><br><span class=\"line\">        &#125;.build()  </span><br><span class=\"line\">        val callback = object :AdvertiseCallback()&#123;  </span><br><span class=\"line\">            override fun onStartSuccess(settingsInEffect: AdvertiseSettings?) &#123;  </span><br><span class=\"line\">                super.onStartSuccess(settingsInEffect)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            override fun onStartFailure(errorCode: Int) &#123;  </span><br><span class=\"line\">                super.onStartFailure(errorCode)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        startAdvertising(setting,data,callback)  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">//扫描广播，在中心设备上实现,Center  </span><br><span class=\"line\">fun discovery()&#123;  </span><br><span class=\"line\">    bluetoothAdapter?.bluetoothLeScanner?.apply &#123;   </span><br><span class=\"line\">val scanSetting = ScanSettings.Builder().apply &#123;   </span><br><span class=\"line\">setLegacy(true)  </span><br><span class=\"line\">            setScanMode(ScanSettings.SCAN_MODE_BALANCED)  </span><br><span class=\"line\">        &#125;.build()  </span><br><span class=\"line\">        val filter = mutableListOf&lt;ScanFilter&gt;().apply &#123;   </span><br><span class=\"line\">add(ScanFilter.Builder().apply &#123;   </span><br><span class=\"line\">setServiceUuid(ParcelUuid.fromString(UUID.randomUUID().toString()))  </span><br><span class=\"line\">                setManufacturerData(0x0001, byteArrayOf())  </span><br><span class=\"line\">            &#125;.build())  </span><br><span class=\"line\">        &#125;.toList()  </span><br><span class=\"line\">        startScan(filter,scanSetting,object: ScanCallback()&#123;  </span><br><span class=\"line\">            override fun onScanResult(callbackType: Int, result: ScanResult?) &#123;  </span><br><span class=\"line\">                super.onScanResult(callbackType, result)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            override fun onBatchScanResults(results: MutableList&lt;ScanResult&gt;?) &#123;  </span><br><span class=\"line\">                super.onBatchScanResults(results)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            override fun onScanFailed(errorCode: Int) &#123;  </span><br><span class=\"line\">                super.onScanFailed(errorCode)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Android",
                "蓝牙"
            ]
        },
        {
            "id": "http://example.com/2022/03/31/Android-Surface%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/",
            "url": "http://example.com/2022/03/31/Android-Surface%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/",
            "title": "Android Surface渲染机制",
            "date_published": "2022-03-30T16:37:12.000Z",
            "content_html": "<p>Android Surface 的渲染机制</p>\n<h1 id=\"1surface是什么\"><a class=\"anchor\" href=\"#1surface是什么\">#</a> 1.Surface 是什么？</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Handle onto a raw buffer that is being managed by the screen compositor.</span><br><span class=\"line\">A Surface is generally created by or from a consumer of image buffers (such as a SurfaceTexture, android.media.MediaRecorder, or android.renderscript.Allocation), and is handed to some kind of producer (such as OpenGL, MediaPlayer, or CameraDevice) to draw into.</span><br><span class=\"line\">Note: A Surface acts like a weak reference to the consumer it is associated with. By itself it will not keep its parent consumer from being reclaimed.</span><br></pre></td></tr></table></figure></p>\n<p>上面这段话是 Surface.java 这个类的注释，大致意思是：<br />\nSurface 是一个句柄，指向一个 raw buffer 缓冲对象，这个缓冲对象由 screen compositer 管理。Surface 通常由一个图像缓冲的消费者创建，例如 SurfaceTexture，MediaRecorder，Allocation。然后被送给各种消费者来绘制。</p>\n<h2 id=\"window创建流程\"><a class=\"anchor\" href=\"#window创建流程\">#</a> window 创建流程</h2>\n<p>在 Activity 的启动过程中，<br />\nActivityThread.handleLaunchActivity 中<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Override  </span><br><span class=\"line\">public Activity handleLaunchActivity(ActivityClientRecord r,  </span><br><span class=\"line\">        PendingTransactionActions pendingActions, Intent customIntent) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tWindowManagerGlobal.initialize();</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tfinal Activity a = performLaunchActivity(r, customIntent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tContextImpl appContext = createBaseContextForActivity(r);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tActivity activity = null;</span><br><span class=\"line\">\tactivity = mInstrumentation.newActivity(  </span><br><span class=\"line\">        cl, component.getClassName(), r.intent);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tApplication app = r.packageInfo.makeApplication(false, mInstrumentation);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tactivity.attach(appContext, this, getInstrumentation(), r.token,  </span><br><span class=\"line\">        r.ident, app, r.intent, r.activityInfo, title, r.parent,  </span><br><span class=\"line\">        r.embeddedID, r.lastNonConfigurationInstances, config,  </span><br><span class=\"line\">        r.referrer, r.voiceInteractor, window, r.configCallback,  </span><br><span class=\"line\">        r.assistToken, r.shareableActivityToken);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tmInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 在 Activity 的 attch 中，创建创建了 Window 对象。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final void attach(Context context, ActivityThread aThread,  </span><br><span class=\"line\">        Instrumentation instr, IBinder token, int ident,  </span><br><span class=\"line\">        Application application, Intent intent, ActivityInfo info,  </span><br><span class=\"line\">        CharSequence title, Activity parent, String id,  </span><br><span class=\"line\">        NonConfigurationInstances lastNonConfigurationInstances,  </span><br><span class=\"line\">        Configuration config, String referrer, IVoiceInteractor voiceInteractor,  </span><br><span class=\"line\">        Window window, ActivityConfigCallback activityConfigCallback, IBinder assistToken,  </span><br><span class=\"line\">        IBinder shareableActivityToken) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tattachBaseContext(context);  </span><br><span class=\"line\">  </span><br><span class=\"line\">\tmFragments.attachHost(null /*parent*/);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tmWindow = new PhoneWindow(this, window, activityConfigCallback);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tmWindow.setWindowManager(  </span><br><span class=\"line\">        (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),  </span><br><span class=\"line\">        mToken, mComponent.flattenToString(),  </span><br><span class=\"line\">        (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);  </span><br><span class=\"line\">\tif (mParent != null) &#123;  </span><br><span class=\"line\">    \tmWindow.setContainer(mParent.getWindow());  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\tmWindowManager = mWindow.getWindowManager();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\nActivity 中的 WindowManager 的初始化<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public void setWindowManager(WindowManager wm, IBinder appToken, String appName,  </span><br><span class=\"line\">        boolean hardwareAccelerated) &#123;  </span><br><span class=\"line\">    mAppToken = appToken;  </span><br><span class=\"line\">    mAppName = appName;  </span><br><span class=\"line\">    mHardwareAccelerated = hardwareAccelerated;  </span><br><span class=\"line\">    if (wm == null) &#123;  </span><br><span class=\"line\">        wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(this);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//WindowManagerImpl.java</span><br><span class=\"line\">public WindowManagerImpl createLocalWindowManager(Window parentWindow) &#123;  </span><br><span class=\"line\">    Bridge.getLog().fidelityWarning(ILayoutLog.TAG_UNSUPPORTED,  </span><br><span class=\"line\">            &quot;The preview does not support multiple windows.&quot;,  </span><br><span class=\"line\">            null, null, null);  </span><br><span class=\"line\">    return this;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br />\nActivityThread.handleResumeActivity 中<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//ActivityThread.java</span><br><span class=\"line\">public void handleResumeActivity(ActivityClientRecord r, boolean finalStateRequest,  </span><br><span class=\"line\">        boolean isForward, String reason) &#123;</span><br><span class=\"line\">\tif (r.activity.mVisibleFromClient) &#123;  </span><br><span class=\"line\">    \tr.activity.makeVisible();  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//Activity.java</span><br><span class=\"line\">void makeVisible() &#123;  </span><br><span class=\"line\">    if (!mWindowAdded) &#123;  </span><br><span class=\"line\">        ViewManager wm = getWindowManager();  </span><br><span class=\"line\">        wm.addView(mDecor, getWindow().getAttributes());  </span><br><span class=\"line\">        mWindowAdded = true;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    mDecor.setVisibility(View.VISIBLE);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 会通过 <code>WindowManager.addView(View,Attributes)</code>  将 DecorView 添加到 Window 上。</p>\n<p>WindowManager 实现类是 WindowManagerImpl，他又将添加 View 的操作委托给了 WindowmanagerGlobal。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//WindowmanagerGlobal</span><br><span class=\"line\">public void addView(View view, ViewGroup.LayoutParams params,  </span><br><span class=\"line\">        Display display, Window parentWindow, int userId) &#123;</span><br><span class=\"line\">\tViewRootImpl root = new ViewRootImpl(view.getContext(), display);</span><br><span class=\"line\">\troot.setView(view, wparams, panelParentView, userId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//ViewRootImpl</span><br><span class=\"line\">public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView,  </span><br><span class=\"line\">        int userId) &#123;</span><br><span class=\"line\">\t//启动Choreographer的Vsync信号监听，</span><br><span class=\"line\">\trequestLayout();</span><br><span class=\"line\">\t//通过WindowSession请求wms，这里的WindowSession是一个binder接口。</span><br><span class=\"line\">\tes = mWindowSession.addToDisplayAsUser(mWindow, mWindowAttributes,  </span><br><span class=\"line\">        getHostVisibility(), mDisplay.getDisplayId(), userId,  </span><br><span class=\"line\">        mInsetsController.getRequestedVisibility(), inputChannel, mTempInsets,  </span><br><span class=\"line\">        mTempControls);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//WindowSession初始化</span><br><span class=\"line\">public static IWindowSession getWindowSession() &#123;  </span><br><span class=\"line\">    synchronized (WindowManagerGlobal.class) &#123;  </span><br><span class=\"line\">        if (sWindowSession == null) &#123;  </span><br><span class=\"line\">            try &#123;  </span><br><span class=\"line\">                // Emulate the legacy behavior.  The global instance of InputMethodManager  </span><br><span class=\"line\"> // was instantiated here. // TODO(b/116157766): Remove this hack after cleaning up @UnsupportedAppUsage InputMethodManager.ensureDefaultInstanceForDefaultDisplayIfNecessary();  </span><br><span class=\"line\">                IWindowManager windowManager = getWindowManagerService();  </span><br><span class=\"line\">                sWindowSession = windowManager.openSession(  </span><br><span class=\"line\">                        new IWindowSessionCallback.Stub() &#123;  </span><br><span class=\"line\">                            @Override  </span><br><span class=\"line\"> public void onAnimatorScaleChanged(float scale) &#123;  </span><br><span class=\"line\">                                ValueAnimator.setDurationScale(scale);  </span><br><span class=\"line\">                            &#125;  </span><br><span class=\"line\">                        &#125;);  </span><br><span class=\"line\">            &#125; catch (RemoteException e) &#123;  </span><br><span class=\"line\">                throw e.rethrowFromSystemServer();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        return sWindowSession;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 从这里进入了 system_server 中的 WMS 进行执行<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Session.java   Session是IWindowSession这个AIDL接口的实现类，是应用与WMS进行交互的接口</span><br><span class=\"line\">@Override  </span><br><span class=\"line\">public int addToDisplay(IWindow window, WindowManager.LayoutParams attrs,  </span><br><span class=\"line\">        int viewVisibility, int displayId, InsetsState requestedVisibility,  </span><br><span class=\"line\">        InputChannel outInputChannel, InsetsState outInsetsState,  </span><br><span class=\"line\">        InsetsSourceControl[] outActiveControls) &#123;  </span><br><span class=\"line\">    return mService.addWindow(this, window, attrs, viewVisibility, displayId,  </span><br><span class=\"line\">            UserHandle.getUserId(mUid), requestedVisibility, outInputChannel, outInsetsState,  </span><br><span class=\"line\">            outActiveControls);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 最后进入了 WindowManagerService 中执行：</p>\n<h2 id=\"surface的创建\"><a class=\"anchor\" href=\"#surface的创建\">#</a> Surface 的创建</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.WindowManagerService.addWindow()</span><br><span class=\"line\">public int addWindow(Session session, IWindow client, LayoutParams attrs, int viewVisibility,  </span><br><span class=\"line\">        int displayId, int requestUserId, InsetsState requestedVisibility,  </span><br><span class=\"line\">        InputChannel outInputChannel, InsetsState outInsetsState,  </span><br><span class=\"line\">        InsetsSourceControl[] outActiveControls) &#123;</span><br><span class=\"line\">\tfinal DisplayContent displayContent = getDisplayContentOrCreate(displayId, attrs.token);</span><br><span class=\"line\">\tWindowToken token = displayContent.getWindowToken(  </span><br><span class=\"line\">        hasParent ? parentWindow.mAttrs.token : attrs.token);</span><br><span class=\"line\">\tif (token == null) &#123;</span><br><span class=\"line\">\t\ttoken = new WindowToken.Builder(this, binder, type)  </span><br><span class=\"line\">        .setDisplayContent(displayContent)  </span><br><span class=\"line\">        .setOwnerCanManageAppTokens(session.mCanAddInternalSystemWindow)  </span><br><span class=\"line\">        .setRoundedCornerOverlay(isRoundedCornerOverlay)  </span><br><span class=\"line\">        .build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfinal WindowState win = new WindowState(this, session, client, token, parentWindow,  </span><br><span class=\"line\">        appOp[0], attrs, viewVisibility, session.mUid, userId,  </span><br><span class=\"line\">        session.mCanAddInternalSystemWindow);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\twin.attach();</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//2.WindowSession.attach()</span><br><span class=\"line\">void attach() &#123;  </span><br><span class=\"line\">    mSession.windowAddedLocked();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//3.Session.windowAddedLocked()</span><br><span class=\"line\"> void windowAddedLocked()&#123;</span><br><span class=\"line\"> \t...</span><br><span class=\"line\"> \tmSurfaceSession = new SurfaceSession();</span><br><span class=\"line\"> \t...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> //4.SurfaceSession</span><br><span class=\"line\"> public SurfaceSession() &#123;  </span><br><span class=\"line\">    mNativeClient = nativeCreate();  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">5.android_view_SurfaceSession.nativeCreate()</span><br><span class=\"line\">static jlong nativeCreate()&#123;</span><br><span class=\"line\">\tSurfaceClientComposer* client = new SurfaceClientComposer();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"surface上屏流程\"><a class=\"anchor\" href=\"#surface上屏流程\">#</a> Surface 上屏流程</h2>\n<p>1.Android 发送了 Vsync 垂直同步脉冲信号</p>\n<p>-&gt; DisplaySync<br />\n-&gt;Choreographer 接收到 Vsync-app 信号<br />\n -&gt;Choreographer 回调 doFrame<br />\n-&gt;ViewRootImpl 执行 scheduleTravesals, 同时发送一个同步屏障<br />\n -&gt; 取消同步屏障，执行 performTravesals<br />\n-&gt;performMeasure(),performLayout(),performDraw()<br />\n-&gt; 申请 BufferQueue 中的图像缓冲区对象<br />\n -&gt;RenderThread 发送 OpenGL 命令<br />\n -&gt;queueBuffer</p>\n<p>-&gt;DisplaySync<br />\n-&gt;SurfaceFlinger 收到 Vsync-sf<br />\n-&gt; 释放上一次获取 buffer 缓冲区对象<br />\n -&gt;onMessageReceive (INVALIDATE)   判断当前是否有 Layer 状态发生变化，BufferQueue 中是否有新数据<br />\n -&gt;onMessageReceive (REFRESH)  获取了 LAYER 后，将 buffer 发送给 HWC 进行合成图层<br />\n -&gt; 图层合成后通过 drm 将帧送显上屏<br />\n -&gt;HWC 归还 buffer 给 surfaceFlinger，待下一次 Vsync-sf 时 release 这次的 buffer。</p>\n",
            "tags": [
                "Android"
            ]
        },
        {
            "id": "http://example.com/2022/03/30/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/",
            "url": "http://example.com/2022/03/30/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/",
            "title": "Android系统启动流程",
            "date_published": "2022-03-29T16:12:13.000Z",
            "content_html": "<p>Android 启动分 5 个阶段：</p>\n<h2 id=\"bootloader\"><a class=\"anchor\" href=\"#bootloader\">#</a> BootLoader</h2>\n<p>上电后引导芯片从指定位置加载 bootloader 程序，初始化 ram，<br />\n然后启动 linux 内核</p>\n<h2 id=\"linux内核\"><a class=\"anchor\" href=\"#linux内核\">#</a> Linux 内核</h2>\n<p>启动 linux 内核后，会初始化内存管理单元和缓存，进程管理。<br />\n加载驱动：Display Driver，Camera Driver, Input，Binder Driver 等。<br />\n最后启动 init 进程</p>\n<h2 id=\"init进程\"><a class=\"anchor\" href=\"#init进程\">#</a> init 进程</h2>\n<p>linux 内核启动中创建，是内核创建的第一个用户进程，pid 为 1，执行分两个阶段，分别在从内核态和用户态执行。</p>\n<ul>\n<li>\n<p>第一阶段，设置环境变量，创建挂载文件系统，设置 selinux，</p>\n</li>\n<li>\n<p>第二阶段，初始化启动属性服务，解析 init.rc 文件，启动 ServiceManager, 然后启动 Zygote 进程，最后自身进入一个无限循环等待事件处理。</p>\n</li>\n</ul>\n<h2 id=\"zygote\"><a class=\"anchor\" href=\"#zygote\">#</a> Zygote</h2>\n<p>创建 Java 虚拟机（Dalvik/ART）<br />\n注册 JNI 函数<br />\n通过 JNI 调用到 zygoteInit.java 类中的 main 方法，第一次进入 Java 世界。<br />\n创建一个 Socket 并监听来自 AMS 的 fork 请求<br />\n启动 system_server 进程</p>\n<h2 id=\"system_server\"><a class=\"anchor\" href=\"#system_server\">#</a> system_server</h2>\n<p>启动 binder 线程池<br />\n创建 SystemServiceManager 负责创建其他系统服务<br />\n创建 AMS,WMS,PWS,IMS 等系统服务</p>\n",
            "tags": [
                "Android",
                "系统"
            ]
        },
        {
            "id": "http://example.com/2022/03/26/ExoPlayer-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%881%EF%BC%89/",
            "url": "http://example.com/2022/03/26/ExoPlayer-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%881%EF%BC%89/",
            "title": "ExoPlayer 源码解析（1）",
            "date_published": "2022-03-26T10:52:40.000Z",
            "content_html": "<h1 id=\"start\"><a class=\"anchor\" href=\"#start\">#</a> Start</h1>\n<h2 id=\"1exoplayer起播时序图\"><a class=\"anchor\" href=\"#1exoplayer起播时序图\">#</a> 1.ExoPlayer 起播时序图</h2>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/b5348f57gy1h0oaiq9lpej21e313iqpe.jpg\" alt=\"ExoPlayer播放.drawio\" /></p>\n<h2 id=\"2exoplayer的初始化\"><a class=\"anchor\" href=\"#2exoplayer的初始化\">#</a> 2.ExoPlayer 的初始化</h2>\n<p>先看看 ExoPlayer 的初始化</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected StyledPlayerView playerView;</span><br><span class=\"line\">private DataSource.Factory dataSourceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">void onCreate(@Nullable Bundle savedInstanceState)&#123;</span><br><span class=\"line\">\t//创建</span><br><span class=\"line\">\tdataSourceFactory = DemoUtil.getDataSourceFactory(/* context= */ this);</span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t//获取在XML中声明的StyledPlayerView对象</span><br><span class=\"line\">\tplayerView = findViewById(R.id.player_view);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化ExoPlayer</span><br><span class=\"line\">void initializePlayer()&#123;</span><br><span class=\"line\">\t//创建播放媒体列表对象</span><br><span class=\"line\">\tmediaItems = createMediaItems(intent);</span><br><span class=\"line\">\t//创建渲染器工厂对象</span><br><span class=\"line\">\tRenderersFactory renderersFactory =  </span><br><span class=\"line\">   DemoUtil.buildRenderersFactory(/* context= */ this, preferExtensionDecoders);</span><br><span class=\"line\">\t//创建媒体通道选择器对象</span><br><span class=\"line\">\ttrackSelector = new DefaultTrackSelector(/* context= */ this);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t//创建ExoPlayer对象</span><br><span class=\"line\">\tplayer =  new ExoPlayer.Builder(/* context= */ this)  </span><br><span class=\"line\">       \t.setRenderersFactory(renderersFactory)  //设置渲染器工厂对象  </span><br><span class=\"line\">       \t.setMediaSourceFactory(createMediaSourceFactory())    //设置媒体源工厂对象  </span><br><span class=\"line\">       \t.setTrackSelector(trackSelector)    //设置媒体通道选择器  </span><br><span class=\"line\">       \t.build();</span><br><span class=\"line\">\tplayer.setTrackSelectionParameters(trackSelectionParameters);</span><br><span class=\"line\">\t//设置播放器事件回调</span><br><span class=\"line\">\tplayer.addListener(new PlayerEventListener());  </span><br><span class=\"line\">\t//设置音频参数</span><br><span class=\"line\">\tplayer.setAudioAttributes(AudioAttributes.DEFAULT, /* handleAudioFocus= */ true);  </span><br><span class=\"line\">\t//设置是否自动开始播放</span><br><span class=\"line\">\tplayer.setPlayWhenReady(startAutoPlay);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tplayer.prepare();</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>上面就是 ExoPlayer 的播放代码，总结一下播放的流程：</p>\n<ol>\n<li>创建 DataSource.Factory 工厂对象</li>\n<li>创建 StyledPlayerView 播放器 UI 对象</li>\n<li>创建 RenderersFactory 对象</li>\n<li>创建 MediaSource.Factory 对象</li>\n<li>创建 TrackSelector 对象</li>\n<li>通过 ExoPlayer.Builder 对象构造 ExoPlayer 对象</li>\n<li>添加播放器事件回调，设置默认音频参数</li>\n<li>设置是否自动开始播放</li>\n<li>开始起播</li>\n</ol>\n<h2 id=\"3重要的对象\"><a class=\"anchor\" href=\"#3重要的对象\">#</a> 3. 重要的对象</h2>\n<ol>\n<li>\n<p>DataSource.Factory<br />\nDataSource.Factory 是负责创建 DataSource 对象的工厂类</p>\n</li>\n<li>\n<p>DataSource 代表 Uri 识别的数据源，根据不同的协议从不同媒体介质中获取视频数据流<br />\n下面是 ExoPlayer 实现了的数据源类型<br />\n<img data-src=\"https://tvax3.sinaimg.cn/large/b5348f57gy1h0oajo70wvj20xz0pdb0a.jpg\" alt=\"DataSource实现类\" /></p>\n</li>\n<li>\n<p>StyledPlayerView<br />\n 播放器 UI 对象，包含了视频 UI，控制器 UI，字幕，专辑等</p>\n</li>\n<li>\n<p>RenderersFactory<br />\nRenderersFactory 是负责创建 Renderer 的工厂对象。</p>\n</li>\n<li>\n<p>Renderer 渲染器<br />\n ExoPlayer 定义了 6 种 Renderer 对象：</p>\n</li>\n</ol>\n<ul>\n<li>VideoRenderer    视频渲染器，负责视频渲染，实现类有 MediaCodecVideoRenderer，还有 ffmpeg 扩展</li>\n<li>AudioRenderer   音频渲染器</li>\n<li>TextRenderer  字幕渲染器</li>\n<li>MetadataRenderer  视频元数据渲染器</li>\n<li>CameraMotionRenderer  相机动作渲染器，CameraMotionRenderer 是处理相机拍摄的视频播放时，相机在物理上可能会有旋转动作，导致相机拍摄的视频也会产生 rotation，所以在播放相机拍摄的视频时需要解析视频中的 rotation 属性，然后在 OpenGL ES 渲染的时候，将窗口进行旋转，使画面恢复正常方向。</li>\n<li>MiscellaneousRenderer  混合渲染器 ，Google 暂时没有实现该渲染器，应该是留作扩展用。<br />\n<img data-src=\"https://tvax4.sinaimg.cn/large/b5348f57gy1h0oak2u83fj20y80ieasz.jpg\" alt=\"Renderer实现类\" /></li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>MediaSource.Factory<br />\nMediaSource.Factory 是负责构造 MediaSource 对象的工厂类</p>\n</li>\n<li>\n<p>MediaSource 媒体源，ExoPlayer 使用 MediaSource 实现了多视频播放逻辑，还有不停了流媒体协议类型等。<br />\nExoPlayer 预定义的 MediaSource 类型：<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/b5348f57gy1h0oakcx1ssj20xi0exk6h.jpg\" alt=\"MediaSource实现类\" /></p>\n</li>\n<li>\n<p>TrackSelector<br />\n 选择器：</p>\n</li>\n</ol>\n<ul>\n<li>媒体流：用于在播放时选择容器中封装的的不同的视频、音频通道，比如在 HLS\\DASH 流播放时根据网络带宽，设备性能选择不同分辨率的流。</li>\n<li>通道：播放时根据情况选择视频中不同的视频 \\ 音频 \\ 字幕通道。</li>\n</ul>\n<h1 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> End</h1>\n<p>这里先粗略分析了一下 ExoPlayer 大致播放流程，还有部分的类的介绍，后面再根据情况对不同模块进行分析。</p>\n",
            "tags": [
                "Android",
                "多媒体",
                "ExoPlayer"
            ]
        },
        {
            "id": "http://example.com/2017/06/25/Android-Matrix%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2017/06/25/Android-Matrix%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Android Matrix的使用",
            "date_published": "2017-06-25T13:46:23.000Z",
            "content_html": "<p>#Learn the Matrix Class in Android</p>\n<p>参考:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nY3NzbG9vcC5jb20vY3VzdG9tdmlldy9NYXRyaXhfQmFzaWM=\">GcsSloop 的博客</span></p>\n<h3 id=\"1matrix是android中graphics包下的一个类主要用来对图像进行平移-缩放-旋转-透视-错切等操作\"><a class=\"anchor\" href=\"#1matrix是android中graphics包下的一个类主要用来对图像进行平移-缩放-旋转-透视-错切等操作\">#</a> 1.Matrix 是 Android 中 Graphics 包下的一个类，主要用来对图像进行平移、缩放、旋转、透视、错切等操作。</h3>\n<p>Matrix 对象实际是一个 3x3 的矩阵。每个值都有不同的用处：</p>\n<p>mScalaX     mSkewX    mTransfX</p>\n<p>mSkewY      mScalaY   mTransfY</p>\n<p>mPersp0     mPersp1   mPersp 2</p>\n<p>scalax, scalay 用于缩放<br />\n skewx,skewy 用于错切<br />\n transfx,transfy 用于平移<br />\n persp0,persp1,persp2 用于透视</p>\n<h3 id=\"2关于matrix的要点\"><a class=\"anchor\" href=\"#2关于matrix的要点\">#</a> 2. 关于 Matrix 的要点</h3>\n<ul>\n<li>所有的操作 (旋转、平移、缩放、错切) 默认都是以坐标原点为基准点的。</li>\n<li>之前操作的坐标系状态会保留，并且影响到后续状态。</li>\n</ul>\n<h3 id=\"3martirx的方法\"><a class=\"anchor\" href=\"#3martirx的方法\">#</a> 3.Martirx 的方法</h3>\n<blockquote>\n<p>pre<br />\npre 为前缀的方法的意思是右乘，意思是当前矩阵乘以目标矩阵</p>\n<blockquote>\n<p>preScala()</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>preTranslate()</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>preRotate()</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>post<br />\npost 为前缀的方法的意思是左乘，意思是目标矩阵乘以当前矩阵</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>postScala()</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>postTranslate()</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>postRotate()</p>\n</blockquote>\n</blockquote>\n",
            "tags": [
                "Android",
                "图像处理"
            ]
        }
    ]
}