{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く • All posts by \"算法\" tag",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/12/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "url": "http://example.com/2022/12/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "title": "正则表达式的实现",
            "date_published": "2022-12-12T11:17:35.000Z",
            "content_html": "<h4 id=\"实现正则表达式中的-和的功能\"><a class=\"anchor\" href=\"#实现正则表达式中的-和的功能\">#</a> 实现正则表达式中的 <code>.</code>  和 <code>*</code>  的功能</h4>\n<pre><code>.  匹配任意一个字符\n*  匹配0个或多个*前面一个字符\n</code></pre>\n<p>动态规范的解法：</p>\n<p>建立匹配的状态转移方程，设存在待匹配字符串 str 和模式字符串 pat， <code>dp[i][j]</code>  表示 <code>截止到str[i-1]</code>  位置的子串与截止到 <code>pat[j-1]</code>  位置的模式子串匹配的结果</p>\n<h5 id=\"边界条件\"><a class=\"anchor\" href=\"#边界条件\">#</a> 边界条件</h5>\n<p><code>dp[0][j]</code>  表示空字符串与模式子串匹配结果， <code>dp[i][0]</code>  表示字符子串与空模式子串匹配结果， <code>dp[i][j]</code>  表示空子串与空模式串匹配结果</p>\n<p><code>dp[0][0]</code>  一直为 true<br />\n <code>dp[i][0](i &gt; 0)</code>  一直为 false, 因为任意非空子串与空模式串匹配不能匹配上<br />\n <code>dp[0][j](j &gt; 0)</code>  的值需要看模式串 <code>pat[j-1]</code>  是否为 <code>*</code> ，如果是，则 <code>*</code>  可以选择匹配前一个字符 0 次，即 <code>dp[0][j] = dp[0][j-2</code> ]</p>\n<p>边界条件确认了之后，就可以缺点状态转移方程了</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if str[i-1] == pat[j-1] or &#x27;.&#x27; == pat[j-1]</span><br><span class=\"line\">\tdp[i][j] = dp[i-1][j-1]</span><br><span class=\"line\">else if pat[j-1] == &#x27;*&#x27;</span><br><span class=\"line\">\tdp[i][j] = dp[i][j-2]</span><br><span class=\"line\">\tif pat[j-2] == str[i]</span><br><span class=\"line\">\t\tdp[i][j] |= dp[i-1][j]</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2022/04/23/%E6%95%B0%E5%AD%97%E7%9A%84%E7%BF%BB%E8%BD%AC/",
            "url": "http://example.com/2022/04/23/%E6%95%B0%E5%AD%97%E7%9A%84%E7%BF%BB%E8%BD%AC/",
            "title": "数字的翻转",
            "date_published": "2022-04-23T09:02:25.000Z",
            "content_html": "<p>最近遇到了几道算法题，都涉及到了如何将一个整形的数字进行翻转，在这里记录一下数字翻转的代码的模板</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int reverseNum(int x) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t//记录最后翻转后的值</span><br><span class=\"line\">        int revert = 0;</span><br><span class=\"line\">\t\t//记录从x中从右往左遍历得到的值</span><br><span class=\"line\">        int b = 0;</span><br><span class=\"line\">\t\t//当x的值为0时表明已经遍历完成</span><br><span class=\"line\">        while(x &gt;0)&#123;</span><br><span class=\"line\">\t\t\t//对当前x取余获取x的个位数</span><br><span class=\"line\">            b = x % 10;</span><br><span class=\"line\">\t\t\t//对x除10</span><br><span class=\"line\">            x /= 10;</span><br><span class=\"line\">\t\t\t//这里判断了翻转后的数字是否溢出，如果溢出就直接返回</span><br><span class=\"line\">            if(revert &gt; INT_MAX/10 || (revert == INT_MAX &amp;&amp; b &gt; INT_MAX % 10))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                return INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t   if(revert &lt; INT_MIN/10 || (revert == INT_MAX &amp;&amp; b &lt; INT_MIN % 10))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                return INT_MIN;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t//将新得到的数字加到revert右边。</span><br><span class=\"line\">            revert = revert *10 + b;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return revert;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2022/04/19/Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/",
            "url": "http://example.com/2022/04/19/Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/",
            "title": "Z字形变换",
            "date_published": "2022-04-19T15:25:15.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h2>\n<p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。</p>\n<p>比如输入字符串为 &quot;PAYPALISHIRING&quot; 行数为 3 时，排列如下：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P   A   H   N</span><br><span class=\"line\">A P L S I I G</span><br><span class=\"line\">Y   I   R</span><br></pre></td></tr></table></figure><br />\n 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&quot;PAHNAPLSIIGYIR&quot;。</p>\n<p>请你实现这个将字符串进行指定行数变换的函数：</p>\n<h2 id=\"解法\"><a class=\"anchor\" href=\"#解法\">#</a> 解法</h2>\n<p>仔细观察由字符串构造成的 z 字形，可以发现一下规律：<br />\n对于每个周期每一行都有 2 (1) 个字符，根据字符规律：<br />\n当对构造的 z 型字符有 n 行，对每 (2n-2) 的位置形成重复周期的形状，对第 j 个周期中，第 i 行的位置，下面两个位置 <code>I1</code> , <code>I2</code>  的字符是连在一起的：<br />\n <code>I1 = j*(2n-2) - i</code> <br />\n <code>I2 = j*(2n-2) + i</code> <br />\n 当 <code>I1</code> , <code>I2</code>  相等时，表明他们到了第 0 行或第 n-1 行。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">string convert(string s, int numRows) &#123;</span><br><span class=\"line\">        if(numRows == 1)&#123;</span><br><span class=\"line\">            return s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        string result;</span><br><span class=\"line\">        int last = -1;</span><br><span class=\"line\">        int cur = -1;</span><br><span class=\"line\">        int len = s.length();</span><br><span class=\"line\">        for(int i=0;i&lt;numRows;i++)&#123;</span><br><span class=\"line\">            int j =0;</span><br><span class=\"line\">            //j*(2*numRows - 2) + i &lt; s.length() &amp;&amp; j*(2*numRows - 2) - i &lt; s.length()</span><br><span class=\"line\">            while(true)&#123;</span><br><span class=\"line\">                cur = j*(2*numRows - 2) - i;</span><br><span class=\"line\">                if(cur &gt;= len)&#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(cur &gt;= 0 &amp;&amp; cur != last)&#123;</span><br><span class=\"line\">                    result += s[cur];</span><br><span class=\"line\">                    last = cur;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cur = j*(2*numRows - 2) + i;</span><br><span class=\"line\">                 if(cur &gt;= len)&#123;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if(cur &gt;= 0 &amp;&amp; cur != last)&#123;</span><br><span class=\"line\">                    result += s[cur];</span><br><span class=\"line\">                    last = cur;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法",
                "leetcode"
            ]
        },
        {
            "id": "http://example.com/2019/03/28/LeetCode-17/",
            "url": "http://example.com/2019/03/28/LeetCode-17/",
            "title": "LeetCode 17",
            "date_published": "2019-03-28T12:30:25.000Z",
            "content_html": "<p>LeetCode 第 17 题 Java 实现<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbGV0dGVyLWNvbWJpbmF0aW9ucy1vZi1hLXBob25lLW51bWJlci8=\">电话号码的字母组合</span></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static Map&lt;String, String&gt; map;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        map = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        map.put(&quot;0&quot;, &quot;&quot;);</span><br><span class=\"line\">        map.put(&quot;1&quot;, &quot;&quot;);</span><br><span class=\"line\">        map.put(&quot;2&quot;, &quot;abc&quot;);</span><br><span class=\"line\">        map.put(&quot;3&quot;, &quot;def&quot;);</span><br><span class=\"line\">        map.put(&quot;4&quot;, &quot;ghi&quot;);</span><br><span class=\"line\">        map.put(&quot;5&quot;, &quot;jkl&quot;);</span><br><span class=\"line\">        map.put(&quot;6&quot;, &quot;mno&quot;);</span><br><span class=\"line\">        map.put(&quot;7&quot;, &quot;pqrs&quot;);</span><br><span class=\"line\">        map.put(&quot;8&quot;, &quot;tuv&quot;);</span><br><span class=\"line\">        map.put(&quot;9&quot;, &quot;wxyz&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public List&lt;String&gt; letterCombinations(String digits) &#123;</span><br><span class=\"line\">        if(digits == null || digits.length() == 0)&#123;</span><br><span class=\"line\">            return new ArrayList&lt;String&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return recusiveResult(digits, 0, digits.length() - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private List&lt;String&gt; recusiveResult(String digits, int left, int right) &#123;</span><br><span class=\"line\">        List&lt;String&gt; result = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        if (left == right) &#123;</span><br><span class=\"line\">            String str = map.get(digits.charAt(left) + &quot;&quot;);</span><br><span class=\"line\">            for (int j = 0; j &lt; str.length(); j++) &#123;</span><br><span class=\"line\">                result.add(str.charAt(j) + &quot;&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else if (left == right - 1) &#123;</span><br><span class=\"line\">            String Sleft = map.get(digits.charAt(left) + &quot;&quot;);</span><br><span class=\"line\">            String Sright = map.get(digits.charAt(right) + &quot;&quot;);</span><br><span class=\"line\">            if (Sleft != null &amp;&amp; Sleft.length() &gt; 0 &amp;&amp; Sright != null &amp;&amp; Sright.length() &gt; 0) &#123;</span><br><span class=\"line\">                for (int i = 0; i &lt; Sleft.length(); i++) &#123;</span><br><span class=\"line\">                    for (int j = 0; j &lt; Sright.length(); j++) &#123;</span><br><span class=\"line\">                        result.add(Sleft.charAt(i) + &quot;&quot; + Sright.charAt(j));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                if (Sleft != null &amp;&amp; Sleft.length() &gt; 0) &#123;</span><br><span class=\"line\">                    for (int i = 0; i &lt; Sleft.length(); i++) &#123;</span><br><span class=\"line\">                        result.add(Sleft.charAt(i) + &quot;&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    for (int i = 0; i &lt; Sright.length(); i++) &#123;</span><br><span class=\"line\">                        result.add(Sright.charAt(i) + &quot;&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            int mid = (left + right) / 2;</span><br><span class=\"line\">            List&lt;String&gt; lefStrings = recusiveResult(digits, left, mid);</span><br><span class=\"line\">            List&lt;String&gt; rightStrings = recusiveResult(digits, mid + 1, right);</span><br><span class=\"line\"></span><br><span class=\"line\">            for (int i = 0; i &lt; lefStrings.size(); i++) &#123;</span><br><span class=\"line\">                for (int j = 0; j &lt; rightStrings.size(); j++) &#123;</span><br><span class=\"line\">                    result.add(lefStrings.get(i) + rightStrings.get(j));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/2017/06/11/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/2017/06/11/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "希尔排序算法",
            "date_published": "2017-06-11T07:25:18.000Z",
            "content_html": "<h1 id=\"shell-sort\"><a class=\"anchor\" href=\"#shell-sort\">#</a> Shell Sort</h1>\n<p>##1. 介绍<br />\n希尔排序是插入排序的一种，它的步骤如下：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.对这些分组内的项进行单独的直接插入排序。</span><br><span class=\"line\">3.当每个组内的排序完成后，再将整歌序列按另一个更小的Gap来进行分组。</span><br><span class=\"line\">4.重复2、3，直到gap的值变为1，对整个序列进行一次直接插入排序。</span><br></pre></td></tr></table></figure><br />\n##2.Gap 的选值<br />\n gap 的选值可以只用最简单的，每次都区 gap／2，第一个 gap 取 arr.len/2。也有一些更加效率的选值方式，此处不提了。</p>\n<p>##3. 代码</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C语言： </span><br><span class=\"line\">    void shellSort(int* arr，int len)&#123;</span><br><span class=\"line\">    int gap = len/2;</span><br><span class=\"line\">    while(gap&gt;=1)&#123;</span><br><span class=\"line\">        for(int i = gap;i&lt;len;i++)&#123;</span><br><span class=\"line\">            int temp = arr[i];</span><br><span class=\"line\">            int k = i-gap;</span><br><span class=\"line\">            while(k&gt;=0&amp;&amp;arr[k]&gt;arr[i])&#123;</span><br><span class=\"line\">                arr[i]=arr[k];</span><br><span class=\"line\">                k-=gap;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // if (k != i - gap) &#123;</span><br><span class=\"line\">                arr[k+gap] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            gap /=2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法",
                "排序算法"
            ]
        },
        {
            "id": "http://example.com/2016/04/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/2016/04/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "快速排序算法",
            "date_published": "2016-04-01T11:17:39.000Z",
            "content_html": "<h1 id=\"排序算法学习之快速排序算法\"><a class=\"anchor\" href=\"#排序算法学习之快速排序算法\">#</a> 排序算法学习之快速排序算法</h1>\n<p>##1. 快速排序算法的原理</p>\n<pre><code>快速排序算法的原理是选取一个值作为标志，将一个数组分为2部分，左边部分的数全部都比标志值小，右边部分都比标志值大，然后分别对左边数组和又边数组进行递归，直到排序完成。\n下面是进行一次数组处理的过程：\n</code></pre>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对以下的数组进行排序：</span><br><span class=\"line\">                      [key]</span><br><span class=\"line\">                        i                                    j</span><br><span class=\"line\">                        33  17  54  15  23  21  37  20  32  24</span><br><span class=\"line\">将数组的第一个数设置为标志</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">               [key]</span><br><span class=\"line\">[第一次处理]：比较str[i]与str[j］（ 如果str[i]&lt;str[j],就执行&#x27;j--&#x27;，然后重复［第一次处理］），发现33&gt;24，即str[i]&gt;str[j]，所以将str[i],str[j]互换位置，i 向前进一位，得到如下的数组</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">                        i--&gt;i                                j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  54  15  23  21  37  20  32  33  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t    i                                j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  54  15  23  21  37  20  32  33 </span><br><span class=\"line\"></span><br><span class=\"line\">                        [key]</span><br><span class=\"line\">[第二次处理]：比较str[i]与str[j]，17&gt;33,即str[i]&lt;str[j],所以执行&#x27;i++&#x27;操作,i右移一位。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t    i--&gt;i                            j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  54  15  23  21  37  20  32  33  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t        i                            j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  54  15  23  21  37  20  32  33 </span><br><span class=\"line\"></span><br><span class=\"line\">                        [key]</span><br><span class=\"line\">[第三次处理]：比较str[i]与str[j]，54&gt;33,即str[i]&gt;str[j],所以将str[i],str[j]互换位置，然后执行&#x27;j--&#x27;操作</span><br><span class=\"line\"></span><br><span class=\"line\">  \t\t\t\t\t\t        i                            j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  54  15  23  21  37  20  32  33  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t        i                        j&lt;--j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  37  20  32  54  </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t        i                        j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  37  20  32  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t[key]\t\t</span><br><span class=\"line\">[第四次处理]：比较str[i]与str[j]，33&gt;32,即str[i]&gt;str[j],所以将str[i],str[j]互换位置，然后执行&#x27;i++&#x27;操作</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t        i                        j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  37  20  32  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t        i--&gt;i                    j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  37  20  33  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t            i                    j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  37  20  33  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t[key]</span><br><span class=\"line\">[第五次处理]：比较str[i]与str[j]，15&lt;33,即str[i]&lt;str[j],所以执行&#x27;i++&#x27;操作,i右移一位。</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t            i                    j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  37  20  32  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t            i--&gt;i                j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  37  20  33  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                i                j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  37  20  33  54</span><br><span class=\"line\"></span><br><span class=\"line\">[第六次处理]</span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\"></span><br><span class=\"line\">\t   \t\t\t\t   [key]\t\t\t\t</span><br><span class=\"line\">[第八次处理]:比较str[i]与str[j]，37&gt;33,即str[i]&gt;str[j],所以将str[i],str[j]互换位置，然后执行&#x27;j--&#x27;操作</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                        i        j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  37  20  33  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                        i    j&lt;--j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  33  20  37  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                        i    j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  33  20  37  54</span><br><span class=\"line\"></span><br><span class=\"line\">               [key]</span><br><span class=\"line\">[第九次处理]:比较str[i]与str[j]，54&gt;33,即str[i]&gt;str[j],所以将str[i],str[j]互换位置，然后执行&#x27;i++&#x27;操作</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t                        i    j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  33  15  23  21  33  20  37  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                        i---&gt;j</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  20  33  37  54</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t                            ij</span><br><span class=\"line\">\t\t\t\t\t\t24  17  32  15  23  21  20  33  37  54</span><br><span class=\"line\"></span><br><span class=\"line\">发现i,j已经相等，此次循环处理结束。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<pre><code>通过上面的过程，成功的将所有比33大的数排在了它的后面，把比33小的数排在了33的前面，得到了第一次处理的结果。\n</code></pre>\n<p>然后再通过对左边 2 边分别进行递归处理，最终得到排序结果。<br />\n##2. 下面是完整的 C 语言代码：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//快速排序函数声明 str为数组地址，left，right分别为排序数组的的左边界和右边界</span><br><span class=\"line\">void sqrtNum(long *str,int left,int right);</span><br><span class=\"line\"></span><br><span class=\"line\">//传进来的a，b是2个指针，并将指针所指向地址中储存的数据进行交换</span><br><span class=\"line\">void exchange(long* a,long* b)&#123;</span><br><span class=\"line\">    long temp;</span><br><span class=\"line\">    temp=*a;</span><br><span class=\"line\">    *a=*b;</span><br><span class=\"line\">    *b=temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//主函数</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    long str[10];</span><br><span class=\"line\">    for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">        scanf(&quot;%ld&quot;,&amp;str[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sqrtNum(str,0,9);</span><br><span class=\"line\">    for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">        printf(&quot;  %ld&quot;,str[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//排序函数的具体内容</span><br><span class=\"line\">void sqrtNum(long *str,int left,int right)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //long key=str[left];</span><br><span class=\"line\">    int  kn=left;</span><br><span class=\"line\">    int m=left;</span><br><span class=\"line\">    int n=right;</span><br><span class=\"line\">    while(m&lt;n)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        //当从右读的标志n大于从左开始读的标志m时，一直循环，判断右边读的数组中的数是否比标志[key]大，如果大，就一直执行n--直到str[m]的值大于等于str[n]：执行第二个if语句中的内容，然后break；跳出内循环</span><br><span class=\"line\">        while(m&lt;n)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            if(str[m]&lt;str[n])&#123;</span><br><span class=\"line\">                n--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(str[m]&gt;=str[n])&#123;</span><br><span class=\"line\">                exchange(&amp;str[n],&amp;str[m]);</span><br><span class=\"line\">                m++;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        //当从右读的标志n大于从左开始读的标志m时，一直循环，判断左边读的数组中的数是否比标志[key]大，如果大，就一直执行m++直到str[m]的值大于等于str[n]：执行第二个if语句中的内容，然后break；跳出内循环</span><br><span class=\"line\">        while(m&lt;n)&#123;</span><br><span class=\"line\">            if(str[m]&lt;str[n])&#123;</span><br><span class=\"line\">                m++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(str[m]&gt;=str[n])&#123;</span><br><span class=\"line\">                exchange(&amp;str[n],&amp;str[m]);</span><br><span class=\"line\">                n--;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    kn=m;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(left&lt;right)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        sqrtNum(str, left,kn-1);</span><br><span class=\"line\"></span><br><span class=\"line\">        sqrtNum(str, kn+1,right);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法",
                "排序算法"
            ]
        }
    ]
}