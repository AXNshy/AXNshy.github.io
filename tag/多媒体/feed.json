{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く • All posts by \"多媒体\" tag",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/05/22/OpenSLES%E7%AE%80%E4%BB%8B/",
            "url": "http://example.com/2022/05/22/OpenSLES%E7%AE%80%E4%BB%8B/",
            "title": "OpenSLES",
            "date_published": "2022-05-22T15:20:23.000Z",
            "content_html": "<p>接受 pcm 原始音频脉冲数据</p>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"object-sl对象\"><a class=\"anchor\" href=\"#object-sl对象\">#</a>  <code>Object</code>  SL 对象</h3>\n<p>代码中的 <code>SLObjectItf</code>  类型，<br />\n每个对象都有三种状态：</p>\n<ul>\n<li>Unrelalized (initial state) : 不可用状态 ， 对接是活跃的，但是还没有分配资源，处于不可用状态，对象内接口的方法不能使用。</li>\n<li>Realized ：可用状态。对象资源已分配，可以使用对象</li>\n<li>Suspended (optional state): 挂起状态，所需资源比可用状态要少，但是在挂起期间保留了状态信息。当资源不足时，系统可以选择将对象状态改成挂起状态或是不可用状态</li>\n</ul>\n<p><img data-src=\"http://tvax2.sinaimg.cn/large/b5348f57gy1h2iqkwi4e2j20od0d2jsy.jpg\" alt=\"OpenSLES Object state diagram\" /></p>\n<h3 id=\"interface-接口\"><a class=\"anchor\" href=\"#interface-接口\">#</a>  <code>Interface</code>  接口</h3>\n<p>由特定对象提供的相关特性集合的抽象，在代码中一般为 <code>SLxxxxItf</code> . 接口必须由特定对象进行生成。</p>\n<h3 id=\"一般使用方法\"><a class=\"anchor\" href=\"#一般使用方法\">#</a> 一般使用方法</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明对象和接口</span><br><span class=\"line\">SLObjectItf object = nullptr;</span><br><span class=\"line\">SLxxxxItf itf = nullptr;</span><br><span class=\"line\">// init object创建对象</span><br><span class=\"line\">...</span><br><span class=\"line\">// 初始化对象，分配资源</span><br><span class=\"line\">(*object)-&gt;Realize(object,SL_BOOLEAN_FALSE);</span><br><span class=\"line\">//check result</span><br><span class=\"line\">...</span><br><span class=\"line\">// 初始化接口，第二个参数指定接口类型</span><br><span class=\"line\">(*object)-&gt;GetInterface(object,SL_IID_XXX,&amp;itf);</span><br><span class=\"line\">...</span><br><span class=\"line\">//接口可以使用了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>可以理解为一个对象代表了一个资源和状态，它内部有一系列的接口，对象本身不提供操作，而是由对象内部的接口提供方法调用。</p>\n<h2 id=\"opensles使用流程\"><a class=\"anchor\" href=\"#opensles使用流程\">#</a> OpenSLES 使用流程：</h2>\n<h3 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h3>\n<p>Android 环境配置，在 CMakeLists 中将 OpenSLES 加入到目标库链接库列表中<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">CMakeLists.txt</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(nativelib  </span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t....        </span><br><span class=\"line\">\t\tOpenSLES  </span><br><span class=\"line\">        $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>\n<p>需要在头文件中加上引用<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opensles_player.h</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;SLES/OpenSLES.h&gt;  </span><br><span class=\"line\">#include &lt;SLES/OpenSLES_Android.h&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<p>先看一个图<br />\n<img data-src=\"http://tva2.sinaimg.cn/large/b5348f57gy1h2iss734x0j20uc0ckq5i.jpg\" alt=\"OpenSLES audio flow diagram\" /></p>\n<h4 id=\"1初始化引擎\"><a class=\"anchor\" href=\"#1初始化引擎\">#</a> 1. 初始化引擎</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">SLObjectItf m_engine_obj = nullptr;  </span><br><span class=\"line\">SLEngineItf m_engine = nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::CreateEngine() &#123;  </span><br><span class=\"line\">    SLresult lresult =slCreateEngine(&amp;m_engine_obj,0, nullptr,0, nullptr, nullptr);  </span><br><span class=\"line\">    if(CheckError(lresult, &quot;Engine&quot;)) return false;  </span><br><span class=\"line\">    lresult = asInterface(m_engine_obj)-&gt;Realize(m_engine_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;EngineRealize&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    lresult = asInterface(m_engine_obj)-&gt;GetInterface(m_engine_obj,SL_IID_ENGINE,&amp;m_engine);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2初始化合成器\"><a class=\"anchor\" href=\"#2初始化合成器\">#</a> 2. 初始化合成器</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 合成器对象</span><br><span class=\"line\">SLObjectItf m_output_mix_obj = nullptr;</span><br><span class=\"line\">// 环境混响接口</span><br><span class=\"line\">SLEnvironmentalReverbItf m_output_mix_evn_reverb = nullptr;  </span><br><span class=\"line\">// 环境混响设置参数</span><br><span class=\"line\">SLEnvironmentalReverbSettings m_output_mix_evn_settings = SL_I3DL2_ENVIRONMENT_PRESET_DEFAULT;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::CreateOutputMixer() &#123;  </span><br><span class=\"line\">    const SLInterfaceID mids[1] = &#123;SL_IID_ENVIRONMENTALREVERB&#125;;  </span><br><span class=\"line\">    const SLboolean mreq[1] = &#123;SL_BOOLEAN_FALSE&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t//使用Engine接口创建合成器对象</span><br><span class=\"line\">    SLresult lresult = asInterface(m_engine)-&gt;CreateOutputMix(m_engine,&amp;m_output_mix_obj,1,mids,mreq);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Output Mix&quot;)) return false;  </span><br><span class=\"line\">  \t//合成器对象初始化</span><br><span class=\"line\">    lresult = asInterface(m_output_mix_obj)-&gt;Realize(m_output_mix_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Mix Realize&quot;)) return false;  </span><br><span class=\"line\">  \t//使用合成器对象获取环境混响接口</span><br><span class=\"line\">    lresult = asInterface(m_output_mix_obj)-&gt;GetInterface(m_output_mix_obj,SL_IID_ENVIRONMENTALREVERB,&amp;m_output_mix_evn_reverb);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Mix Env Reverb&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t//如果环境混响接口获取成功，设置环境混响属性为上面定义的默认值</span><br><span class=\"line\">    if(lresult == SL_RESULT_SUCCESS)&#123;\t  </span><br><span class=\"line\">        (*m_output_mix_evn_reverb)-&gt;SetEnvironmentalReverbProperties(m_output_mix_evn_reverb,&amp;m_output_mix_evn_settings);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3初始化并配置播放器对象\"><a class=\"anchor\" href=\"#3初始化并配置播放器对象\">#</a> 3. 初始化并配置播放器对象</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//播放器对象</span><br><span class=\"line\">SLObjectItf m_pcm_player_obj = nullptr;</span><br><span class=\"line\">//播放器接口</span><br><span class=\"line\">SLPlayItf m_pcm_player = nullptr;</span><br><span class=\"line\">//音量接口</span><br><span class=\"line\">SLVolumeItf m_pcm_volume = nullptr;  </span><br><span class=\"line\">  </span><br><span class=\"line\">// Android缓冲区队列接口</span><br><span class=\"line\">SLAndroidSimpleBufferQueueItf m_pcm_buffer = nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::ConfigPlayer() &#123;          </span><br><span class=\"line\">    SLDataLocator_AndroidSimpleBufferQueue android_queue =&#123;SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE,SL_QUEUE_BUFFER_COUNT&#125;;  </span><br><span class=\"line\">\t// 定义PCM数据格式</span><br><span class=\"line\">    SLDataFormat_PCM pcm = &#123;  </span><br><span class=\"line\">SL_DATAFORMAT_PCM,  </span><br><span class=\"line\">(SLuint32)2,  </span><br><span class=\"line\">SL_SAMPLINGRATE_44_1,  </span><br><span class=\"line\">SL_PCMSAMPLEFORMAT_FIXED_16,  </span><br><span class=\"line\">SL_PCMSAMPLEFORMAT_FIXED_16,  </span><br><span class=\"line\">SL_SPEAKER_FRONT_LEFT|SL_SPEAKER_FRONT_RIGHT,  </span><br><span class=\"line\">SL_BYTEORDER_LITTLEENDIAN  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    SLDataSource slDataSource =&#123;&amp;android_queue,&amp;pcm&#125;;  </span><br><span class=\"line\">    SLDataLocator_OutputMix outputMix = &#123;SL_DATALOCATOR_OUTPUTMIX,m_output_mix_obj&#125;;  </span><br><span class=\"line\">    SLDataSink dataSink = &#123;&amp;outputMix, nullptr&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    SLInterfaceID ids[3] = &#123;SL_IID_BUFFERQUEUE,SL_IID_EFFECTSEND,SL_IID_VOLUME&#125;;  </span><br><span class=\"line\">    SLboolean reqs[3] = &#123;SL_BOOLEAN_TRUE,SL_BOOLEAN_TRUE,SL_BOOLEAN_TRUE,&#125;;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">  \t// 通过Engine接口创建音频播放器对象</span><br><span class=\"line\">    SLresult  lresult = asInterface(m_engine)-&gt;CreateAudioPlayer(m_engine,&amp;m_pcm_player_obj,&amp;slDataSource,&amp;dataSink,3,ids,reqs);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Create Audio Player&quot;)) return false;  </span><br><span class=\"line\">  \t// 初始化音频播放器对象</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;Realize(m_pcm_player_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player Realize&quot;)) return false;  </span><br><span class=\"line\">  \t// 使用音频播放器对象获取播放接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_PLAY,&amp;m_pcm_player);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t// 使用音频播放器对象获取缓冲区队列接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_BUFFERQUEUE,&amp;m_pcm_buffer);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Buffer GetInterface&quot;)) return false;  </span><br><span class=\"line\">  \t</span><br><span class=\"line\">\t// 缓冲区队列注册缓冲区数据可用回调接口</span><br><span class=\"line\">    lresult = (*m_pcm_buffer)-&gt;RegisterCallback(m_pcm_buffer,sReadPcmBufferCbFun,this);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Buffer RegisterCallback&quot;)) return false;  </span><br><span class=\"line\">  \t</span><br><span class=\"line\">  \t// 使用音频播放器对象获取音量接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_VOLUME,&amp;m_pcm_volume);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player Volume  GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    LOGD(TAG,&quot;OpenSL ES init success&quot;);  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"播放\"><a class=\"anchor\" href=\"#播放\">#</a> 播放</h3>\n<p>创建一个播放线程，<br />\n解码器将解码数据 push 到 PCM 数据缓冲队列中，通知播放器线程启动播放</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">void createThread()&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tstd::thread t = std::thread(cb.render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">void cb(OpenSLRender *render)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Android",
                "多媒体",
                "OpenSLES"
            ]
        },
        {
            "id": "http://example.com/2022/04/15/ffmpeg%E5%85%A5%E9%97%A8-%E5%9C%A8Windows11%20%E4%B8%8B%E7%BC%96%E8%AF%91Android%E5%B9%B3%E5%8F%B0%E5%AF%B9%E5%BA%94SO/",
            "url": "http://example.com/2022/04/15/ffmpeg%E5%85%A5%E9%97%A8-%E5%9C%A8Windows11%20%E4%B8%8B%E7%BC%96%E8%AF%91Android%E5%B9%B3%E5%8F%B0%E5%AF%B9%E5%BA%94SO/",
            "title": "ffmpeg 的编译",
            "date_published": "2022-04-14T16:06:55.000Z",
            "content_html": "<p>编译参考了<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2F0Y2hpbmcudG9wLyMvYXJ0aWNsZS8xMDAwMDAxNTE4MzU3NzMw\">开发的猫</span> 这位同学的编译教程</p>\n<p>前置环境：<br />\n操作系统：windows 11<br />\nminGW：llvm-mingw-20220323-msvcrt-x86_64<br />\nmsys：msys2-x86_64-20220319.exe<br />\nndk：24.0.8215888<br />\nllvm：ndk 自带<br />\n clang： ndk 自带<br />\n yasm<br />\ngit</p>\n<p>msys 安装缺少工具：   <code>pacman -S &lt;pkgname&gt;</code></p>\n<p>编译工具链地址：C:\\Users\\ZhenqianXu\\AppData\\Local\\Android\\Sdk\\ndk\\24.0.8215888\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin<br />\n 交叉编译工具链地址：C:\\Users\\ZhenqianXu\\AppData\\Local\\Android\\Sdk\\ndk\\24.0.8215888\\toolchains\\llvm\\prebuilt\\windows-x86_64\\sysroot</p>\n<p>找到编译目标 Android 版本 29 需要的 clang 和 clang++ 文件<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;C:\\Users\\ZhenqianXu\\AppData\\Local\\Android\\Sdk\\ndk\\24.0.8215888\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\armv7a-linux-androideabi29-clang&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;C:\\Users\\ZhenqianXu\\AppData\\Local\\Android\\Sdk\\ndk\\24.0.8215888\\toolchains\\llvm\\prebuilt\\windows-x86_64\\bin\\armv7a-linux-androideabi29-clang++&quot;</span><br></pre></td></tr></table></figure><br />\n 进入 <code>configure</code>  文件中，找到 CMDLINE_SET，在其中添加一个变量<br />\n <code>cross-prefix-clang</code> <br />\n 然后就找到 <code>cc_default</code> , <code>cxx_default</code>  这两个变量定义的地方，修改为</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># clang set</span><br><span class=\"line\">cc_default=&quot;$&#123;cross_prefix_clang&#125;$&#123;cc_default&#125;&quot; cxx_default=&quot;$&#123;cross_prefix_clang&#125;$&#123;cxx_default&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以直接改成下面的，这两个变量就是对应上面clang和clang++编译器路径</span><br><span class=\"line\">cc_default=&quot;$&#123;cross_prefix_clang&#125;clang&quot;</span><br><span class=\"line\">cxx_default=&quot;$&#123;cross_prefix_clang&#125;clang++&quot;</span><br></pre></td></tr></table></figure></p>\n<p>新建编译脚本：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">set -x</span><br><span class=\"line\"></span><br><span class=\"line\"># 目标Android版本</span><br><span class=\"line\"></span><br><span class=\"line\">API=29</span><br><span class=\"line\"></span><br><span class=\"line\">CPU=armv7-a</span><br><span class=\"line\"></span><br><span class=\"line\">#so库输出目录</span><br><span class=\"line\"></span><br><span class=\"line\">OUTPUT=/c/Users/XZQ/Desktop/FFmpeg/ffmpeg-4.2.2/android/$CPU</span><br><span class=\"line\"></span><br><span class=\"line\"># NDK的路径，根据自己的NDK位置进行设置</span><br><span class=\"line\"></span><br><span class=\"line\">NDK=/c/Users/XZQ/AppData/Local/Android/Sdk/ndk/24.0.8215888</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译工具链路径</span><br><span class=\"line\"></span><br><span class=\"line\">TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/windows-x86_64</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译环境</span><br><span class=\"line\"></span><br><span class=\"line\">SYSROOT=$TOOLCHAIN/sysroot</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">function build</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  ./configure \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --prefix=$OUTPUT \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --target-os=android \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --arch=arm \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --cpu=armv7-a \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --enable-asm \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --enable-neon \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --enable-cross-compile \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --enable-shared \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-static \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-doc \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-ffplay \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-ffprobe \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-symver \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --disable-ffmpeg \\</span><br><span class=\"line\">//禁掉strip优化，避免了找不到strip工具报错</span><br><span class=\"line\">  --disable-stripping \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --sysroot=$SYSROOT \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --cross-prefix-clang=$TOOLCHAIN/bin/armv7a-linux-androideabi$API- \\</span><br><span class=\"line\"></span><br><span class=\"line\">  --extra-cflags=&quot;-fPIC&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  make clean all</span><br><span class=\"line\"></span><br><span class=\"line\">  # 这里是定义用几个线程编译</span><br><span class=\"line\"></span><br><span class=\"line\">  make -j12</span><br><span class=\"line\"></span><br><span class=\"line\">  make install</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">build</span><br></pre></td></tr></table></figure></p>\n<p>在 msys 中运行该脚本：<br />\n <code>./build_android_clang.sh</code></p>\n<p>编译成功<br />\n<img data-src=\"http://tvax3.sinaimg.cn/large/b5348f57gy1h19rj5f737j20wg0dwafa.jpg\" alt=\"屏幕截图 2022-04-15 012650\" /></p>\n",
            "tags": [
                "多媒体",
                "ffmpeg"
            ]
        },
        {
            "id": "http://example.com/2022/03/26/ExoPlayer-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%881%EF%BC%89/",
            "url": "http://example.com/2022/03/26/ExoPlayer-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%881%EF%BC%89/",
            "title": "ExoPlayer 源码解析（1）",
            "date_published": "2022-03-26T10:52:40.000Z",
            "content_html": "<h1 id=\"start\"><a class=\"anchor\" href=\"#start\">#</a> Start</h1>\n<h2 id=\"1exoplayer起播时序图\"><a class=\"anchor\" href=\"#1exoplayer起播时序图\">#</a> 1.ExoPlayer 起播时序图</h2>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/b5348f57gy1h0oaiq9lpej21e313iqpe.jpg\" alt=\"ExoPlayer播放.drawio\" /></p>\n<h2 id=\"2exoplayer的初始化\"><a class=\"anchor\" href=\"#2exoplayer的初始化\">#</a> 2.ExoPlayer 的初始化</h2>\n<p>先看看 ExoPlayer 的初始化</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected StyledPlayerView playerView;</span><br><span class=\"line\">private DataSource.Factory dataSourceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">void onCreate(@Nullable Bundle savedInstanceState)&#123;</span><br><span class=\"line\">\t//创建</span><br><span class=\"line\">\tdataSourceFactory = DemoUtil.getDataSourceFactory(/* context= */ this);</span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t//获取在XML中声明的StyledPlayerView对象</span><br><span class=\"line\">\tplayerView = findViewById(R.id.player_view);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化ExoPlayer</span><br><span class=\"line\">void initializePlayer()&#123;</span><br><span class=\"line\">\t//创建播放媒体列表对象</span><br><span class=\"line\">\tmediaItems = createMediaItems(intent);</span><br><span class=\"line\">\t//创建渲染器工厂对象</span><br><span class=\"line\">\tRenderersFactory renderersFactory =  </span><br><span class=\"line\">   DemoUtil.buildRenderersFactory(/* context= */ this, preferExtensionDecoders);</span><br><span class=\"line\">\t//创建媒体通道选择器对象</span><br><span class=\"line\">\ttrackSelector = new DefaultTrackSelector(/* context= */ this);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t//创建ExoPlayer对象</span><br><span class=\"line\">\tplayer =  new ExoPlayer.Builder(/* context= */ this)  </span><br><span class=\"line\">       \t.setRenderersFactory(renderersFactory)  //设置渲染器工厂对象  </span><br><span class=\"line\">       \t.setMediaSourceFactory(createMediaSourceFactory())    //设置媒体源工厂对象  </span><br><span class=\"line\">       \t.setTrackSelector(trackSelector)    //设置媒体通道选择器  </span><br><span class=\"line\">       \t.build();</span><br><span class=\"line\">\tplayer.setTrackSelectionParameters(trackSelectionParameters);</span><br><span class=\"line\">\t//设置播放器事件回调</span><br><span class=\"line\">\tplayer.addListener(new PlayerEventListener());  </span><br><span class=\"line\">\t//设置音频参数</span><br><span class=\"line\">\tplayer.setAudioAttributes(AudioAttributes.DEFAULT, /* handleAudioFocus= */ true);  </span><br><span class=\"line\">\t//设置是否自动开始播放</span><br><span class=\"line\">\tplayer.setPlayWhenReady(startAutoPlay);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tplayer.prepare();</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>上面就是 ExoPlayer 的播放代码，总结一下播放的流程：</p>\n<ol>\n<li>创建 DataSource.Factory 工厂对象</li>\n<li>创建 StyledPlayerView 播放器 UI 对象</li>\n<li>创建 RenderersFactory 对象</li>\n<li>创建 MediaSource.Factory 对象</li>\n<li>创建 TrackSelector 对象</li>\n<li>通过 ExoPlayer.Builder 对象构造 ExoPlayer 对象</li>\n<li>添加播放器事件回调，设置默认音频参数</li>\n<li>设置是否自动开始播放</li>\n<li>开始起播</li>\n</ol>\n<h2 id=\"3重要的对象\"><a class=\"anchor\" href=\"#3重要的对象\">#</a> 3. 重要的对象</h2>\n<ol>\n<li>\n<p>DataSource.Factory<br />\nDataSource.Factory 是负责创建 DataSource 对象的工厂类</p>\n</li>\n<li>\n<p>DataSource 代表 Uri 识别的数据源，根据不同的协议从不同媒体介质中获取视频数据流<br />\n下面是 ExoPlayer 实现了的数据源类型<br />\n<img data-src=\"https://tvax3.sinaimg.cn/large/b5348f57gy1h0oajo70wvj20xz0pdb0a.jpg\" alt=\"DataSource实现类\" /></p>\n</li>\n<li>\n<p>StyledPlayerView<br />\n 播放器 UI 对象，包含了视频 UI，控制器 UI，字幕，专辑等</p>\n</li>\n<li>\n<p>RenderersFactory<br />\nRenderersFactory 是负责创建 Renderer 的工厂对象。</p>\n</li>\n<li>\n<p>Renderer 渲染器<br />\n ExoPlayer 定义了 6 种 Renderer 对象：</p>\n</li>\n</ol>\n<ul>\n<li>VideoRenderer    视频渲染器，负责视频渲染，实现类有 MediaCodecVideoRenderer，还有 ffmpeg 扩展</li>\n<li>AudioRenderer   音频渲染器</li>\n<li>TextRenderer  字幕渲染器</li>\n<li>MetadataRenderer  视频元数据渲染器</li>\n<li>CameraMotionRenderer  相机动作渲染器，CameraMotionRenderer 是处理相机拍摄的视频播放时，相机在物理上可能会有旋转动作，导致相机拍摄的视频也会产生 rotation，所以在播放相机拍摄的视频时需要解析视频中的 rotation 属性，然后在 OpenGL ES 渲染的时候，将窗口进行旋转，使画面恢复正常方向。</li>\n<li>MiscellaneousRenderer  混合渲染器 ，Google 暂时没有实现该渲染器，应该是留作扩展用。<br />\n<img data-src=\"https://tvax4.sinaimg.cn/large/b5348f57gy1h0oak2u83fj20y80ieasz.jpg\" alt=\"Renderer实现类\" /></li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>MediaSource.Factory<br />\nMediaSource.Factory 是负责构造 MediaSource 对象的工厂类</p>\n</li>\n<li>\n<p>MediaSource 媒体源，ExoPlayer 使用 MediaSource 实现了多视频播放逻辑，还有不停了流媒体协议类型等。<br />\nExoPlayer 预定义的 MediaSource 类型：<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/b5348f57gy1h0oakcx1ssj20xi0exk6h.jpg\" alt=\"MediaSource实现类\" /></p>\n</li>\n<li>\n<p>TrackSelector<br />\n 选择器：</p>\n</li>\n</ol>\n<ul>\n<li>媒体流：用于在播放时选择容器中封装的的不同的视频、音频通道，比如在 HLS\\DASH 流播放时根据网络带宽，设备性能选择不同分辨率的流。</li>\n<li>通道：播放时根据情况选择视频中不同的视频 \\ 音频 \\ 字幕通道。</li>\n</ul>\n<h1 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> End</h1>\n<p>这里先粗略分析了一下 ExoPlayer 大致播放流程，还有部分的类的介绍，后面再根据情况对不同模块进行分析。</p>\n",
            "tags": [
                "Android",
                "多媒体",
                "ExoPlayer"
            ]
        },
        {
            "id": "http://example.com/2018/06/10/HLS%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "url": "http://example.com/2018/06/10/HLS%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "title": "HLS知识点",
            "date_published": "2018-06-10T12:07:41.000Z",
            "content_html": "<h2 id=\"hls协议简介\"><a class=\"anchor\" href=\"#hls协议简介\">#</a> HLS 协议简介</h2>\n<p>全称 HTTP Live Streaming，是由苹果公司开发的用于支持在线音视频播放的流媒体协议，该协议是基于 HTTP 协议实现的。</p>\n<p>HLS 是由 m3u8 配置文件和 TS 分片文件组成的。</p>\n<h2 id=\"m3u8\"><a class=\"anchor\" href=\"#m3u8\">#</a> m3u8</h2>\n<p>m3u8 是 m3u 文件的一种，是 HLS 定义的配置文件，客户端从该文件中解析出播放所需的元数据后，从中寻找可用的媒体流的地址，然后下载媒体流进行播放。</p>\n<p>m3u8 其实是一个播放列表文件 playlist，里面记录了可用的媒体片段信息，m3u8 文件支持嵌套。</p>\n<p>m3u8 文件结构：</p>\n<ul>\n<li>EXTM3U    文件第一行配置指定这是一个 M3u8 文件</li>\n<li>EXT-X-MEDIA-SEQUENCE  第一个 TS 分片起始位置序号；直播时则为直播段起始位置</li>\n<li>EXT-X-TARGETDURATION 每个分片最大时长</li>\n<li>EXT-X-ALLOW-CACHE 是否运行缓存</li>\n<li>EXT-X-ENDLIST 文件结束符，如果是直播流，则没有文件结束符</li>\n<li>EXTINF 附加信息，分片的时长，带宽等</li>\n<li>EXT-X-VERSION m3u8 版本号</li>\n<li>EXT-X-DISCONTINUITY 分片中断</li>\n<li>EXT-X-PLAYLIST-TYPE 流媒体类型\n<ul>\n<li>类型： VOD  表明是点播源，文件中应该也有 ENDLIST 标签</li>\n<li>类型： EVENT   表明是直播源，文件中应该没有 ENDLIST 标签，不允许服务器修改已有的数据，但是可以在文件结尾添加新数据。</li>\n</ul>\n</li>\n<li>EXT-X-KEY  是否加密解析</li>\n</ul>\n<h3 id=\"广告插入\"><a class=\"anchor\" href=\"#广告插入\">#</a> 广告插入</h3>\n<p>可以在 m3u8 中插入广告的 ts，实现广告的播放，但是有个问题是广告的视频编码格式与原视频可能不一样，所以需要在广告的 TS 分片前后加上 DISCONTINUITY 这个标签，表明视频前后中断，需要客户端去处理该情况。</p>\n<h2 id=\"mpeg-2-transport-stream\"><a class=\"anchor\" href=\"#mpeg-2-transport-stream\">#</a> MPEG-2 Transport Stream</h2>\n<p>更有弹性避免包丢失和损坏</p>\n<p>ts 流的数据包固定大小为 188 字节，由 4 个字节的头和 184 字节组成，</p>\n",
            "tags": [
                "多媒体",
                "流媒体协议",
                "HLS"
            ]
        }
    ]
}