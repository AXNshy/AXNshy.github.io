{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く • All posts by \"cmake\" tag",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/05/11/Cmake%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2022/05/11/Cmake%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "Cmake的使用",
            "date_published": "2022-05-10T16:00:53.000Z",
            "content_html": "<p>在 Android Studio 中使用 Cmake 来构建 C,C++ 应用</p>\n<p>今天尝试了学习使用 ffmpeg 来编写播放器，需要使用 C,C++ 来编写代码，所有学习一下 Cmake 的使用。</p>\n<p>Cmake 是一个开源，跨平台的工具，被用来构建、测试、打包软件。Cmake 使用了简单的和平台、编译器无关的配置文件，来生成当前平台的软件、链接库。</p>\n<h2 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> 用法</h2>\n<p>举个栗子：<br />\n我有一个 jni 接口，Java 层调用这个接口，返回一个字符串 <code>hello Cmake</code></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libnative2/src/main/cpp/nativelib.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;jni.h&gt;  </span><br><span class=\"line\">#include &lt;string&gt;  </span><br><span class=\"line\">  </span><br><span class=\"line\">extern &quot;C&quot; JNIEXPORT jstring JNICALL  </span><br><span class=\"line\">Java_com_xzq_nativelib2_NativeLib_stringFromJNI(  </span><br><span class=\"line\">        JNIEnv* env,  </span><br><span class=\"line\">        jobject /* this */) &#123;  </span><br><span class=\"line\">    std::string hello = &quot;hello Cmake&quot;;  </span><br><span class=\"line\">    return env-&gt;NewStringUTF(hello.c_str());  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br />\n 这个 cpp 文件对应的 java 类是 com/xzq/nativelib2/NativeLib.kt 这个类</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libnative2/src/main/kotlin/com/xzq/nativelib2/NativeLib.kt</span><br><span class=\"line\"></span><br><span class=\"line\">package com.xzq.nativelib2  </span><br><span class=\"line\">  </span><br><span class=\"line\">class NativeLib &#123;  </span><br><span class=\"line\">  \t//external对应的是Java中的native方法</span><br><span class=\"line\">\texternal fun stringFromJNI(): String  </span><br><span class=\"line\">  </span><br><span class=\"line\">    companion object &#123;  </span><br><span class=\"line\">        // Used to load the &#x27;nativelib2&#x27; library on application startup.  </span><br><span class=\"line\">        init &#123;</span><br><span class=\"line\">\t\t\t//它会去加载名为libnativelib2.so的动态库文件</span><br><span class=\"line\">            System.loadLibrary(&quot;nativelib2&quot;)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我想要将这个 cpp 编译成 so 文件 <code>libnativelib2.so</code> ，在 app 模块中 MainActivity 中去调用 NativeLib 接口去访问本地 cpp 代码。</p>\n<p>Cmake 有两种用法：gradle 配置和命令行</p>\n<h3 id=\"1gradle配置\"><a class=\"anchor\" href=\"#1gradle配置\">#</a> 1.gradle 配置</h3>\n<p>CMake 可以通过 android build tool 脚本进行配置，在启动 gradle 构建后自动生成对应的文件。</p>\n<p>1. 在 <code>android</code>  配置块中将 gradle 链接到你的 CMake 脚本<br />\n 2. 在 <code>defaultConfig</code>  配置块中可以指定 CMake 可选的参数 (args) 和标记 (flags)<br />\n 3. 在 <code>productFlavor</code>  中针对不同产品来替换对应属性</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins &#123;  </span><br><span class=\"line\">    id &#x27;com.android.library&#x27;  </span><br><span class=\"line\">    or</span><br><span class=\"line\">\tid &#x27;com.android.application&#x27;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;  ...  </span><br><span class=\"line\">\tdefaultConfig &#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\tbuildTypes &#123;...&#125;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tproductFlavors &#123;    </span><br><span class=\"line\">\t\t...    </span><br><span class=\"line\">\t\tcreate(&quot;demo&quot;) &#123; </span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t\texternalNativeBuild &#123;</span><br><span class=\"line\">\t\t\t\tcmake &#123;     </span><br><span class=\"line\">\t\t\t\t\t... </span><br><span class=\"line\">\t\t\t\t\t// 指定gradle只编译target指定的模块。如果不指定target，那么CMake配置中的所有模块都会被进行编译和打包。</span><br><span class=\"line\">\t\t\t\t\ttargets += listOf(&quot;native-lib-demo&quot;,                 </span><br><span class=\"line\">\t\t\t\t     //可执行文件是可选的，一般情况，仅编译动态库文件能满足要求。\t</span><br><span class=\"line\">\t\t\t\t\t&quot;my-executible-demo&quot;)       </span><br><span class=\"line\">\t\t\t\t&#125;      </span><br><span class=\"line\">\t\t\t&#125;   </span><br><span class=\"line\">\t\t&#125;    </span><br><span class=\"line\">\t\tcreate(&quot;paid&quot;) &#123;     </span><br><span class=\"line\">\t\t\t... </span><br><span class=\"line\">\t\t\texternalNativeBuild &#123; </span><br><span class=\"line\">\t\t\t\tcmake &#123;     </span><br><span class=\"line\">\t\t\t\t\t... </span><br><span class=\"line\">\t\t\t\t\ttargets += listOf(&quot;native-lib-paid&quot;,      </span><br><span class=\"line\">\t\t\t\t\t&quot;my-executible-paid&quot;)     </span><br><span class=\"line\">\t\t\t\t&#125;     </span><br><span class=\"line\">\t\t\t&#125;   </span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 本地编译配置，可以配置ndk-bundle和CMake</span><br><span class=\"line\">\texternalNativeBuild &#123;    </span><br><span class=\"line\">\t\t//CMake编译配置    </span><br><span class=\"line\">\t\tcmake &#123;   </span><br><span class=\"line\">\t\t\t//指定CMakeLists.txt文件路径</span><br><span class=\"line\">\t\t\tpath = file(&quot;CMakeLists.txt&quot;)    </span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2命令行\"><a class=\"anchor\" href=\"#2命令行\">#</a> 2. 命令行</h3>\n<p>使用命令行方式编译本地代码，<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cmake \\</span><br><span class=\"line\">-DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake \\    </span><br><span class=\"line\">-DANDROID_ABI=$ABI \\    </span><br><span class=\"line\">-DANDROID_PLATFORM=android-$MINSDKVERSION \\    </span><br><span class=\"line\">$OTHER_ARGS</span><br></pre></td></tr></table></figure></p>\n<p>上面命令行中几个参数的含义：</p>\n<ul>\n<li>-DCMAKE_TOLLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake   指定 ndk 中 CMake 编译工具链文件地址</li>\n<li>-DANDROID_ABI=$ABI   指定目标平台的应用程序二进制接口    2022 年 最常见的应该是 arm64-v8a</li>\n<li>-DANDROID_PLATFORM=android-$MINSDKVERSION  指定应用或库支持的最低 Android 平台版本，例如 android-31,android-29</li>\n</ul>\n<p>还有更多的参数可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vbmRrL2d1aWRlcy9jbWFrZT9obD16aC1jbiNjb21tYW5kLWxpbmVfMg==\"> Android 指南 - CMake</span></p>\n<h2 id=\"cmakeliststxt-配置文件编写\"><a class=\"anchor\" href=\"#cmakeliststxt-配置文件编写\">#</a> CMakeLists.txt 配置文件编写</h2>\n<p>CMake 的执行已经知道了，但是我们没讲到如何将 cpp 文件编译成可执行文件或是库文件，CMakeLists.txt 就是用来告诉 CMake, 要如何编译，按照什么规则进行编译，编译需要使用的依赖项目，好像很类似与 Makefile 文件。下面是一个栗子：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#指定了Cmake的最小支持版本</span><br><span class=\"line\">cmake_minimum_required(VERSION 3.10.2)  </span><br><span class=\"line\">  </span><br><span class=\"line\">#设置这个Cmake项目名，可以通过变量PROJECT_NAME进行访问</span><br><span class=\"line\">  </span><br><span class=\"line\">project(&quot;nativelib2&quot;)  </span><br><span class=\"line\">  </span><br><span class=\"line\">#创建并命名一个库</span><br><span class=\"line\">add_library( </span><br><span class=\"line\">\t\t# 设置这个库的名称  </span><br><span class=\"line\">        nativelib2  </span><br><span class=\"line\">  </span><br><span class=\"line\">        # 这个生成的库的类型，静态库，动态库等 </span><br><span class=\"line\">        SHARED  </span><br><span class=\"line\">  </span><br><span class=\"line\">        # 指定库的源文件相对路径，当在cpp中新增了文件中，需要在这个进行声明，cmake才会将新文件打包进库中。除了可以指定cpp源文件，还可以指定库文件路径</span><br><span class=\"line\">        nativelib2.cpp)  </span><br><span class=\"line\">  </span><br><span class=\"line\"># 搜索ndk环境中的库并自定义命名路径变量</span><br><span class=\"line\">find_library( </span><br><span class=\"line\">\t\t# 定义变量log-lib存储log这个库的路径</span><br><span class=\"line\">        log-lib  </span><br><span class=\"line\">  </span><br><span class=\"line\">        # 指定ndk环境中库的名称     </span><br><span class=\"line\">\t\tlog)  </span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">#指定所有需要被链接到目标库的库名称  </span><br><span class=\"line\">target_link_libraries(</span><br><span class=\"line\">\t\t# 目标库</span><br><span class=\"line\">        nativelib2  </span><br><span class=\"line\">  \t\t</span><br><span class=\"line\">\t\t#被链接的库，可以新增多个库名称</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">     \t$&#123;log-lib&#125;)</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure></p>\n<p>配置好了之后，我们直接使用 Android Studio 编译安装 apk，打开 app，能看到打印成功<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2022-05-11 01:25:51.546 20065-20065/com.luffy.mulmedia D/NavigationActivity: stringFromJNI2 hello Cmake</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h2>\n<p>我在学习过程中发现，如果 Android Studio 项目存在多个模块，如果有一个模块需要设置 cmake 的 abiFilter  为 armeabi-v7a，那么每一个模块都要设置 abiFilter，不然就会存在找不到 so 的情况。<br />\n我猜测，可能是因为如果某个模块不设置，那么就会在最终的 apk 的 jniLibs 中创建默认的 arm64-v8a 文件夹，然后运行中，发现了有 arm64-v8a 的文件夹，那么就只会在这个路径下搜索全部的 so 文件；又由于其他指定了 abiFilter 的模块会编译出指定的 armeabi-v7a 架构的文件，所有在 arm64-v8a 中找不到，最终抛出异常。如果有大佬知道原因的话可以告诉我一下。</p>\n",
            "tags": [
                "Android",
                "Cmake"
            ]
        }
    ]
}