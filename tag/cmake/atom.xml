<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>花咲く • Posts by &#34;cmake&#34; tag</title>
    <link href="http://example.com" />
    <updated>2022-05-10T16:00:53.000Z</updated>
    <category term="Android" />
    <category term="图像处理" />
    <category term="C++" />
    <category term="蓝牙" />
    <category term="系统" />
    <category term="Camera" />
    <category term="Cmake" />
    <category term="音视频" />
    <category term="FFmpeg" />
    <category term="多媒体" />
    <category term="ExoPlayer" />
    <category term="流媒体协议" />
    <category term="HLS" />
    <category term="算法" />
    <category term="LeetCode" />
    <category term="开发" />
    <category term="Mac" />
    <category term="OpenGL ES" />
    <category term="OpenGL ES2.0" />
    <category term="OpenGL ES3.0" />
    <category term="OpenSLES" />
    <category term="插件化" />
    <category term="Dalvik虚拟机" />
    <category term="leetcode" />
    <category term="ffmpeg" />
    <category term="日语" />
    <category term="歌词" />
    <category term="排序算法" />
    <category term="二叉树" />
    <category term="Algorithm" />
    <category term="数据结构" />
    <category term="树" />
    <category term="BFS" />
    <entry>
        <id>http://example.com/2022/05/11/Cmake%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
        <title>Cmake的使用</title>
        <link rel="alternate" href="http://example.com/2022/05/11/Cmake%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;p&gt;在 Android Studio 中使用 Cmake 来构建 C,C++ 应用&lt;/p&gt;
&lt;p&gt;今天尝试了学习使用 ffmpeg 来编写播放器，需要使用 C,C++ 来编写代码，所有学习一下 Cmake 的使用。&lt;/p&gt;
&lt;p&gt;Cmake 是一个开源，跨平台的工具，被用来构建、测试、打包软件。Cmake 使用了简单的和平台、编译器无关的配置文件，来生成当前平台的软件、链接库。&lt;/p&gt;
&lt;h2 id=&#34;用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用法&#34;&gt;#&lt;/a&gt; 用法&lt;/h2&gt;
&lt;p&gt;举个栗子：&lt;br /&gt;
我有一个 jni 接口，Java 层调用这个接口，返回一个字符串 &lt;code&gt;hello Cmake&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;libnative2/src/main/cpp/nativelib.cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;jni.h&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;extern &amp;quot;C&amp;quot; JNIEXPORT jstring JNICALL  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Java_com_xzq_nativelib2_NativeLib_stringFromJNI(  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        JNIEnv* env,  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        jobject /* this */) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::string hello = &amp;quot;hello Cmake&amp;quot;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return env-&amp;gt;NewStringUTF(hello.c_str());  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br /&gt;
 这个 cpp 文件对应的 java 类是 com/xzq/nativelib2/NativeLib.kt 这个类&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;libnative2/src/main/kotlin/com/xzq/nativelib2/NativeLib.kt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;package com.xzq.nativelib2  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class NativeLib &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	//external对应的是Java中的native方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	external fun stringFromJNI(): String  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    companion object &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        // Used to load the &amp;#x27;nativelib2&amp;#x27; library on application startup.  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			//它会去加载名为libnativelib2.so的动态库文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.loadLibrary(&amp;quot;nativelib2&amp;quot;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我想要将这个 cpp 编译成 so 文件 &lt;code&gt;libnativelib2.so&lt;/code&gt; ，在 app 模块中 MainActivity 中去调用 NativeLib 接口去访问本地 cpp 代码。&lt;/p&gt;
&lt;p&gt;Cmake 有两种用法：gradle 配置和命令行&lt;/p&gt;
&lt;h3 id=&#34;1gradle配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1gradle配置&#34;&gt;#&lt;/a&gt; 1.gradle 配置&lt;/h3&gt;
&lt;p&gt;CMake 可以通过 android build tool 脚本进行配置，在启动 gradle 构建后自动生成对应的文件。&lt;/p&gt;
&lt;p&gt;1. 在 &lt;code&gt;android&lt;/code&gt;  配置块中将 gradle 链接到你的 CMake 脚本&lt;br /&gt;
 2. 在 &lt;code&gt;defaultConfig&lt;/code&gt;  配置块中可以指定 CMake 可选的参数 (args) 和标记 (flags)&lt;br /&gt;
 3. 在 &lt;code&gt;productFlavor&lt;/code&gt;  中针对不同产品来替换对应属性&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;plugins &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    id &amp;#x27;com.android.library&amp;#x27;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    or&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	id &amp;#x27;com.android.application&amp;#x27;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;android &amp;#123;  ...  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	buildTypes &amp;#123;...&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	productFlavors &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		...    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		create(&amp;quot;demo&amp;quot;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			externalNativeBuild &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				cmake &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					... &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					// 指定gradle只编译target指定的模块。如果不指定target，那么CMake配置中的所有模块都会被进行编译和打包。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					targets += listOf(&amp;quot;native-lib-demo&amp;quot;,                 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				     //可执行文件是可选的，一般情况，仅编译动态库文件能满足要求。	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&amp;quot;my-executible-demo&amp;quot;)       &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		create(&amp;quot;paid&amp;quot;) &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			... &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			externalNativeBuild &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				cmake &amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					... &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					targets += listOf(&amp;quot;native-lib-paid&amp;quot;,      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&amp;quot;my-executible-paid&amp;quot;)     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	// 本地编译配置，可以配置ndk-bundle和CMake&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	externalNativeBuild &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		//CMake编译配置    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		cmake &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			//指定CMakeLists.txt文件路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			path = file(&amp;quot;CMakeLists.txt&amp;quot;)    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;2命令行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2命令行&#34;&gt;#&lt;/a&gt; 2. 命令行&lt;/h3&gt;
&lt;p&gt;使用命令行方式编译本地代码，&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ cmake \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake \    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-DANDROID_ABI=$ABI \    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-DANDROID_PLATFORM=android-$MINSDKVERSION \    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$OTHER_ARGS&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面命令行中几个参数的含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-DCMAKE_TOLLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake   指定 ndk 中 CMake 编译工具链文件地址&lt;/li&gt;
&lt;li&gt;-DANDROID_ABI=$ABI   指定目标平台的应用程序二进制接口    2022 年 最常见的应该是 arm64-v8a&lt;/li&gt;
&lt;li&gt;-DANDROID_PLATFORM=android-$MINSDKVERSION  指定应用或库支持的最低 Android 平台版本，例如 android-31,android-29&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有更多的参数可以参考&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vbmRrL2d1aWRlcy9jbWFrZT9obD16aC1jbiNjb21tYW5kLWxpbmVfMg==&#34;&gt; Android 指南 - CMake&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;cmakeliststxt-配置文件编写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cmakeliststxt-配置文件编写&#34;&gt;#&lt;/a&gt; CMakeLists.txt 配置文件编写&lt;/h2&gt;
&lt;p&gt;CMake 的执行已经知道了，但是我们没讲到如何将 cpp 文件编译成可执行文件或是库文件，CMakeLists.txt 就是用来告诉 CMake, 要如何编译，按照什么规则进行编译，编译需要使用的依赖项目，好像很类似与 Makefile 文件。下面是一个栗子：&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#指定了Cmake的最小支持版本&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmake_minimum_required(VERSION 3.10.2)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#设置这个Cmake项目名，可以通过变量PROJECT_NAME进行访问&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;project(&amp;quot;nativelib2&amp;quot;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#创建并命名一个库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add_library( &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		# 设置这个库的名称  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nativelib2  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 这个生成的库的类型，静态库，动态库等 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SHARED  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 指定库的源文件相对路径，当在cpp中新增了文件中，需要在这个进行声明，cmake才会将新文件打包进库中。除了可以指定cpp源文件，还可以指定库文件路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nativelib2.cpp)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 搜索ndk环境中的库并自定义命名路径变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;find_library( &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		# 定义变量log-lib存储log这个库的路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log-lib  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # 指定ndk环境中库的名称     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		log)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#指定所有需要被链接到目标库的库名称  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;target_link_libraries(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		# 目标库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nativelib2  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		#被链接的库，可以新增多个库名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     	$&amp;#123;log-lib&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置好了之后，我们直接使用 Android Studio 编译安装 apk，打开 app，能看到打印成功&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2022-05-11 01:25:51.546 20065-20065/com.luffy.mulmedia D/NavigationActivity: stringFromJNI2 hello Cmake&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意事项&#34;&gt;#&lt;/a&gt; 注意事项&lt;/h2&gt;
&lt;p&gt;我在学习过程中发现，如果 Android Studio 项目存在多个模块，如果有一个模块需要设置 cmake 的 abiFilter  为 armeabi-v7a，那么每一个模块都要设置 abiFilter，不然就会存在找不到 so 的情况。&lt;br /&gt;
我猜测，可能是因为如果某个模块不设置，那么就会在最终的 apk 的 jniLibs 中创建默认的 arm64-v8a 文件夹，然后运行中，发现了有 arm64-v8a 的文件夹，那么就只会在这个路径下搜索全部的 so 文件；又由于其他指定了 abiFilter 的模块会编译出指定的 armeabi-v7a 架构的文件，所有在 arm64-v8a 中找不到，最终抛出异常。如果有大佬知道原因的话可以告诉我一下。&lt;/p&gt;
</content>
        <category term="Android" />
        <category term="Cmake" />
        <updated>2022-05-10T16:00:53.000Z</updated>
    </entry>
</feed>
