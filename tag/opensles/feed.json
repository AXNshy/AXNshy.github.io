{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く • All posts by \"opensles\" tag",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/05/22/OpenSLES%E7%AE%80%E4%BB%8B/",
            "url": "http://example.com/2022/05/22/OpenSLES%E7%AE%80%E4%BB%8B/",
            "title": "OpenSLES",
            "date_published": "2022-05-22T15:20:23.000Z",
            "content_html": "<p>接受 pcm 原始音频脉冲数据</p>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"object-sl对象\"><a class=\"anchor\" href=\"#object-sl对象\">#</a>  <code>Object</code>  SL 对象</h3>\n<p>代码中的 <code>SLObjectItf</code>  类型，<br />\n每个对象都有三种状态：</p>\n<ul>\n<li>Unrelalized (initial state) : 不可用状态 ， 对接是活跃的，但是还没有分配资源，处于不可用状态，对象内接口的方法不能使用。</li>\n<li>Realized ：可用状态。对象资源已分配，可以使用对象</li>\n<li>Suspended (optional state): 挂起状态，所需资源比可用状态要少，但是在挂起期间保留了状态信息。当资源不足时，系统可以选择将对象状态改成挂起状态或是不可用状态</li>\n</ul>\n<p><img data-src=\"http://tvax2.sinaimg.cn/large/b5348f57gy1h2iqkwi4e2j20od0d2jsy.jpg\" alt=\"OpenSLES Object state diagram\" /></p>\n<h3 id=\"interface-接口\"><a class=\"anchor\" href=\"#interface-接口\">#</a>  <code>Interface</code>  接口</h3>\n<p>由特定对象提供的相关特性集合的抽象，在代码中一般为 <code>SLxxxxItf</code> . 接口必须由特定对象进行生成。</p>\n<h3 id=\"一般使用方法\"><a class=\"anchor\" href=\"#一般使用方法\">#</a> 一般使用方法</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明对象和接口</span><br><span class=\"line\">SLObjectItf object = nullptr;</span><br><span class=\"line\">SLxxxxItf itf = nullptr;</span><br><span class=\"line\">// init object创建对象</span><br><span class=\"line\">...</span><br><span class=\"line\">// 初始化对象，分配资源</span><br><span class=\"line\">(*object)-&gt;Realize(object,SL_BOOLEAN_FALSE);</span><br><span class=\"line\">//check result</span><br><span class=\"line\">...</span><br><span class=\"line\">// 初始化接口，第二个参数指定接口类型</span><br><span class=\"line\">(*object)-&gt;GetInterface(object,SL_IID_XXX,&amp;itf);</span><br><span class=\"line\">...</span><br><span class=\"line\">//接口可以使用了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>可以理解为一个对象代表了一个资源和状态，它内部有一系列的接口，对象本身不提供操作，而是由对象内部的接口提供方法调用。</p>\n<h2 id=\"opensles使用流程\"><a class=\"anchor\" href=\"#opensles使用流程\">#</a> OpenSLES 使用流程：</h2>\n<h3 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h3>\n<p>Android 环境配置，在 CMakeLists 中将 OpenSLES 加入到目标库链接库列表中<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">CMakeLists.txt</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(nativelib  </span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t....        </span><br><span class=\"line\">\t\tOpenSLES  </span><br><span class=\"line\">        $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>\n<p>需要在头文件中加上引用<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opensles_player.h</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;SLES/OpenSLES.h&gt;  </span><br><span class=\"line\">#include &lt;SLES/OpenSLES_Android.h&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<p>先看一个图<br />\n<img data-src=\"http://tva2.sinaimg.cn/large/b5348f57gy1h2iss734x0j20uc0ckq5i.jpg\" alt=\"OpenSLES audio flow diagram\" /></p>\n<h4 id=\"1初始化引擎\"><a class=\"anchor\" href=\"#1初始化引擎\">#</a> 1. 初始化引擎</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">SLObjectItf m_engine_obj = nullptr;  </span><br><span class=\"line\">SLEngineItf m_engine = nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::CreateEngine() &#123;  </span><br><span class=\"line\">    SLresult lresult =slCreateEngine(&amp;m_engine_obj,0, nullptr,0, nullptr, nullptr);  </span><br><span class=\"line\">    if(CheckError(lresult, &quot;Engine&quot;)) return false;  </span><br><span class=\"line\">    lresult = asInterface(m_engine_obj)-&gt;Realize(m_engine_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;EngineRealize&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    lresult = asInterface(m_engine_obj)-&gt;GetInterface(m_engine_obj,SL_IID_ENGINE,&amp;m_engine);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2初始化合成器\"><a class=\"anchor\" href=\"#2初始化合成器\">#</a> 2. 初始化合成器</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 合成器对象</span><br><span class=\"line\">SLObjectItf m_output_mix_obj = nullptr;</span><br><span class=\"line\">// 环境混响接口</span><br><span class=\"line\">SLEnvironmentalReverbItf m_output_mix_evn_reverb = nullptr;  </span><br><span class=\"line\">// 环境混响设置参数</span><br><span class=\"line\">SLEnvironmentalReverbSettings m_output_mix_evn_settings = SL_I3DL2_ENVIRONMENT_PRESET_DEFAULT;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::CreateOutputMixer() &#123;  </span><br><span class=\"line\">    const SLInterfaceID mids[1] = &#123;SL_IID_ENVIRONMENTALREVERB&#125;;  </span><br><span class=\"line\">    const SLboolean mreq[1] = &#123;SL_BOOLEAN_FALSE&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t//使用Engine接口创建合成器对象</span><br><span class=\"line\">    SLresult lresult = asInterface(m_engine)-&gt;CreateOutputMix(m_engine,&amp;m_output_mix_obj,1,mids,mreq);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Output Mix&quot;)) return false;  </span><br><span class=\"line\">  \t//合成器对象初始化</span><br><span class=\"line\">    lresult = asInterface(m_output_mix_obj)-&gt;Realize(m_output_mix_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Mix Realize&quot;)) return false;  </span><br><span class=\"line\">  \t//使用合成器对象获取环境混响接口</span><br><span class=\"line\">    lresult = asInterface(m_output_mix_obj)-&gt;GetInterface(m_output_mix_obj,SL_IID_ENVIRONMENTALREVERB,&amp;m_output_mix_evn_reverb);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Mix Env Reverb&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t//如果环境混响接口获取成功，设置环境混响属性为上面定义的默认值</span><br><span class=\"line\">    if(lresult == SL_RESULT_SUCCESS)&#123;\t  </span><br><span class=\"line\">        (*m_output_mix_evn_reverb)-&gt;SetEnvironmentalReverbProperties(m_output_mix_evn_reverb,&amp;m_output_mix_evn_settings);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3初始化并配置播放器对象\"><a class=\"anchor\" href=\"#3初始化并配置播放器对象\">#</a> 3. 初始化并配置播放器对象</h4>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//播放器对象</span><br><span class=\"line\">SLObjectItf m_pcm_player_obj = nullptr;</span><br><span class=\"line\">//播放器接口</span><br><span class=\"line\">SLPlayItf m_pcm_player = nullptr;</span><br><span class=\"line\">//音量接口</span><br><span class=\"line\">SLVolumeItf m_pcm_volume = nullptr;  </span><br><span class=\"line\">  </span><br><span class=\"line\">// Android缓冲区队列接口</span><br><span class=\"line\">SLAndroidSimpleBufferQueueItf m_pcm_buffer = nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool OpenSLRender::ConfigPlayer() &#123;          </span><br><span class=\"line\">    SLDataLocator_AndroidSimpleBufferQueue android_queue =&#123;SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE,SL_QUEUE_BUFFER_COUNT&#125;;  </span><br><span class=\"line\">\t// 定义PCM数据格式</span><br><span class=\"line\">    SLDataFormat_PCM pcm = &#123;  </span><br><span class=\"line\">SL_DATAFORMAT_PCM,  </span><br><span class=\"line\">(SLuint32)2,  </span><br><span class=\"line\">SL_SAMPLINGRATE_44_1,  </span><br><span class=\"line\">SL_PCMSAMPLEFORMAT_FIXED_16,  </span><br><span class=\"line\">SL_PCMSAMPLEFORMAT_FIXED_16,  </span><br><span class=\"line\">SL_SPEAKER_FRONT_LEFT|SL_SPEAKER_FRONT_RIGHT,  </span><br><span class=\"line\">SL_BYTEORDER_LITTLEENDIAN  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    SLDataSource slDataSource =&#123;&amp;android_queue,&amp;pcm&#125;;  </span><br><span class=\"line\">    SLDataLocator_OutputMix outputMix = &#123;SL_DATALOCATOR_OUTPUTMIX,m_output_mix_obj&#125;;  </span><br><span class=\"line\">    SLDataSink dataSink = &#123;&amp;outputMix, nullptr&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">    SLInterfaceID ids[3] = &#123;SL_IID_BUFFERQUEUE,SL_IID_EFFECTSEND,SL_IID_VOLUME&#125;;  </span><br><span class=\"line\">    SLboolean reqs[3] = &#123;SL_BOOLEAN_TRUE,SL_BOOLEAN_TRUE,SL_BOOLEAN_TRUE,&#125;;  </span><br><span class=\"line\">\t</span><br><span class=\"line\">  \t// 通过Engine接口创建音频播放器对象</span><br><span class=\"line\">    SLresult  lresult = asInterface(m_engine)-&gt;CreateAudioPlayer(m_engine,&amp;m_pcm_player_obj,&amp;slDataSource,&amp;dataSink,3,ids,reqs);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Create Audio Player&quot;)) return false;  </span><br><span class=\"line\">  \t// 初始化音频播放器对象</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;Realize(m_pcm_player_obj,SL_BOOLEAN_FALSE);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player Realize&quot;)) return false;  </span><br><span class=\"line\">  \t// 使用音频播放器对象获取播放接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_PLAY,&amp;m_pcm_player);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  \t// 使用音频播放器对象获取缓冲区队列接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_BUFFERQUEUE,&amp;m_pcm_buffer);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Buffer GetInterface&quot;)) return false;  </span><br><span class=\"line\">  \t</span><br><span class=\"line\">\t// 缓冲区队列注册缓冲区数据可用回调接口</span><br><span class=\"line\">    lresult = (*m_pcm_buffer)-&gt;RegisterCallback(m_pcm_buffer,sReadPcmBufferCbFun,this);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Buffer RegisterCallback&quot;)) return false;  </span><br><span class=\"line\">  \t</span><br><span class=\"line\">  \t// 使用音频播放器对象获取音量接口</span><br><span class=\"line\">    lresult = asInterface(m_pcm_player_obj)-&gt;GetInterface(m_pcm_player_obj,SL_IID_VOLUME,&amp;m_pcm_volume);  </span><br><span class=\"line\">    if(CheckError(lresult,&quot;Player Volume  GetInterface&quot;)) return false;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    LOGD(TAG,&quot;OpenSL ES init success&quot;);  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"播放\"><a class=\"anchor\" href=\"#播放\">#</a> 播放</h3>\n<p>创建一个播放线程，<br />\n解码器将解码数据 push 到 PCM 数据缓冲队列中，通知播放器线程启动播放</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">void createThread()&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tstd::thread t = std::thread(cb.render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">void cb(OpenSLRender *render)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Android",
                "多媒体",
                "OpenSLES"
            ]
        }
    ]
}