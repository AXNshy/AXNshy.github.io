{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く • All posts by \"c++\" tag",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/02/Android-%E6%BA%90%E7%A0%81%E4%B8%AD-C-%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "url": "http://example.com/2022/04/02/Android-%E6%BA%90%E7%A0%81%E4%B8%AD-C-%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "title": "Android 源码中 C++ 知识点",
            "date_published": "2022-04-02T15:36:44.000Z",
            "content_html": "<h2 id=\"c-智能指针\"><a class=\"anchor\" href=\"#c-智能指针\">#</a> C++ 智能指针 ：</h2>\n<h4 id=\"stdauto_ptrt-c-11-已弃用\"><a class=\"anchor\" href=\"#stdauto_ptrt-c-11-已弃用\">#</a> std::auto_ptr&lt;T&gt;  (C++ 11 已弃用)</h4>\n<h4 id=\"stdshared_ptrt-同一时间能有多个智能指针对象指向引用对象\"><a class=\"anchor\" href=\"#stdshared_ptrt-同一时间能有多个智能指针对象指向引用对象\">#</a> std::shared_ptr&lt;T&gt;  同一时间能有多个智能指针对象指向引用对象。</h4>\n<hr />\n<h4 id=\"stdunique_ptrt-同一时间只能有一个智能指针对象指向引用对象\"><a class=\"anchor\" href=\"#stdunique_ptrt-同一时间只能有一个智能指针对象指向引用对象\">#</a> std::unique_ptr&lt;T&gt;  同一时间只能有一个智能指针对象指向引用对象。</h4>\n<pre><code>可以通过std::move()转移到另一个智能指针对象\n</code></pre>\n<hr />\n<h4 id=\"stdmake_uniquet\"><a class=\"anchor\" href=\"#stdmake_uniquet\">#</a> std::make_unique&lt;T&gt;()</h4>\n<pre><code>返回 std::unique_ptr&lt;T&gt;类型\n</code></pre>\n<hr />\n<h4 id=\"stdmake_sharedt\"><a class=\"anchor\" href=\"#stdmake_sharedt\">#</a> std::make_shared&lt;T&gt;()</h4>\n<pre><code>返回 std::shared_ptr&lt;T&gt;类型\n</code></pre>\n<h2 id=\"c对象初始化\"><a class=\"anchor\" href=\"#c对象初始化\">#</a> C++ 对象初始化</h2>\n<h3 id=\"new初始化\"><a class=\"anchor\" href=\"#new初始化\">#</a> new 初始化</h3>\n<ul>\n<li>使用 new 关键字进行初始化的对象是在堆上分配</li>\n<li>使用 new 关键字创建的对象返回的是对象地址，必须由一个类指针接收</li>\n<li>使用 new 关键字创建的对象必须使用 delete 手动清除缓存</li>\n</ul>\n<h3 id=\"不使用new初始化\"><a class=\"anchor\" href=\"#不使用new初始化\">#</a> 不使用 new 初始化</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = new int(1);</span><br><span class=\"line\">int b(1);\t</span><br></pre></td></tr></table></figure></p>\n<p>不是使用 new 进行初始化的方法上面两种，这种初始化是在栈上分配的，由于栈上内存是系统进行管理，所以会自行对空间进行回收。</p>\n<pre><code>### 虚函数\n\n对象中定义的虚函数需要赋值为0，不然会有编译错误\n</code></pre>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "http://example.com/2022/04/02/%E6%A0%91/",
            "url": "http://example.com/2022/04/02/%E6%A0%91/",
            "title": "树",
            "date_published": "2022-04-01T16:55:04.000Z",
            "content_html": "<h1 id=\"树的遍历算法\"><a class=\"anchor\" href=\"#树的遍历算法\">#</a> 树的遍历算法</h1>\n<h2 id=\"bfs-广度优先遍历模板代码\"><a class=\"anchor\" href=\"#bfs-广度优先遍历模板代码\">#</a> BFS (广度优先遍历) 模板代码</h2>\n<p>非递归方式，借用队列结构。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; levelOrderBottom1(TreeNode* root) &#123;</span><br><span class=\"line\">\t\tvector&lt;vector&lt;int&gt;&gt; result;</span><br><span class=\"line\">\t\tqueue&lt;TreeNode*&gt; mQueue;</span><br><span class=\"line\">\t\tint level = 0;</span><br><span class=\"line\">\t\tif (root == nullptr) &#123;</span><br><span class=\"line\">\t\t\treturn result;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmQueue.push(root);</span><br><span class=\"line\">\t\twhile (!mQueue.empty())</span><br><span class=\"line\">\t\t&#123;\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tresult.push_back(vector&lt;int&gt;());</span><br><span class=\"line\">\t\t\tint size = mQueue.size();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\tTreeNode* front = mQueue.front();</span><br><span class=\"line\">\t\t\t\tmQueue.pop();</span><br><span class=\"line\">\t\t\t\tresult[level].push_back(front-&gt;val);</span><br><span class=\"line\">\t\t\t\tif (front-&gt;left != nullptr) &#123;</span><br><span class=\"line\">\t\t\t\t\tmQueue.push(front-&gt;left);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tif (front-&gt;right != nullptr) &#123;</span><br><span class=\"line\">\t\t\t\t\tmQueue.push(front-&gt;right);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tlevel++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"dfs深度优先遍历模板代码\"><a class=\"anchor\" href=\"#dfs深度优先遍历模板代码\">#</a> DFS (深度优先遍历) 模板代码</h2>\n<p>非递归方式，借用栈数据结构<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">void dfs(TreeNode* root) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vector&lt;int&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">        stack&lt;TreeNode*&gt; mStack;</span><br><span class=\"line\"></span><br><span class=\"line\">        if(root != nullptr)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            mStack.push(root);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        while(!mStack.empty())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            TreeNode* node = mStack.top();</span><br><span class=\"line\"></span><br><span class=\"line\">            mStack.pop();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">            if(node-&gt;right != nullptr)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                mStack.push(node-&gt;right);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(node-&gt;left != nullptr)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                mStack.push(node-&gt;left);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"中序遍历非递归实现\"><a class=\"anchor\" href=\"#中序遍历非递归实现\">#</a> 中序遍历非递归实现</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;int&gt; midorder(TreeNode* root)&#123;</span><br><span class=\"line\">\tvector&lt;int&gt; res;</span><br><span class=\"line\">\tif(root == nullptr)&#123;</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstack&lt;TreeNode*&gt; mStk;</span><br><span class=\"line\">\tif(!mStk.empty() || root != nullptr)&#123;</span><br><span class=\"line\">\t\twhile(root!= nullptr)&#123;</span><br><span class=\"line\">\t\t\tmStk.push(root);</span><br><span class=\"line\">\t\t\troot = root-&gt;left;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t\tTreeNode *node = mStk.top();</span><br><span class=\"line\">\t\tmStk.pop();</span><br><span class=\"line\">\t\tres.push(node-&gt;val);</span><br><span class=\"line\">\t\troot = node-&gt;right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"后序遍历非递归\"><a class=\"anchor\" href=\"#后序遍历非递归\">#</a> 后序遍历非递归</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;int&gt; postOrder(TreeNode* root)&#123;</span><br><span class=\"line\">\tvector&lt;int&gt; res;</span><br><span class=\"line\">\tif(root == nullptr)&#123;</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstack&lt;TreeNode*&gt; mStk;</span><br><span class=\"line\">\tTreeNode* prev;</span><br><span class=\"line\">\twhile(root!= nullptr || !mStk.empty())&#123;</span><br><span class=\"line\">\t\twhile(root != nullptr)&#123;</span><br><span class=\"line\">\t\t\tmStk.push(root);</span><br><span class=\"line\">\t\t\troot = root.left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tTreeNode* node = mStk.top();</span><br><span class=\"line\">\t\tif(node-&gt;right == null || node-&gt;right == prev)&#123;</span><br><span class=\"line\">\t\t\tmStk.pop();</span><br><span class=\"line\">\t\t\tres.push(node-&gt;val);</span><br><span class=\"line\">\t\t\tpre = node;</span><br><span class=\"line\">\t\t\troot = nullptr;</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tmStk.push(node-&gt;right);</span><br><span class=\"line\">\t\t\troot = node-&gt;right;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"224-基本计算器\"><a class=\"anchor\" href=\"#224-基本计算器\">#</a> 224 基本计算器</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int calculate(string s) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t//定义栈存储参数</span><br><span class=\"line\">        stack&lt;int&gt; nums;</span><br><span class=\"line\">\t\t//预存入一个数字0，防止首个字符是运算符号</span><br><span class=\"line\">        nums.push(0);</span><br><span class=\"line\">\t\t//定义栈存储操作符</span><br><span class=\"line\">        stack&lt;char&gt; ops;</span><br><span class=\"line\"></span><br><span class=\"line\">        bool f = false;</span><br><span class=\"line\"></span><br><span class=\"line\">        for(int i=0;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">            if(s[i] ==&#x27; &#x27;)//遇到空格跳过</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                continue;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else if(s[i] == &#x27;+&#x27; || s[i] == &#x27;-&#x27;) //遇到运算符</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                f = false;</span><br><span class=\"line\">\t\t\t\t//判断运算符号签名的字符是否为左括号，如果是，则在参数栈增加一个参数，用于于防止左括号后首个字符是运算符的情况</span><br><span class=\"line\"></span><br><span class=\"line\">                if(i &gt; 0 &amp;&amp; s[i-1] == &#x27;(&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    nums.push(0);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t\t\t//推入符号</span><br><span class=\"line\">                ops.push(s[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else if(s[i] == &#x27;(&#x27;)//遇到左括号</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                 f = false;</span><br><span class=\"line\"></span><br><span class=\"line\">                ops.push(s[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;else if(s[i] == &#x27;)&#x27;)//遇到右括号，先弹出符号栈栈顶的左括号（栈顶必须是左括号，否则表达式错误）</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                ops.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                if(!ops.empty() &amp;&amp; ops.top() != &#x27;(&#x27;)&#123;</span><br><span class=\"line\">\t\t\t\t\t//计算括号内与括号左边数字的计算结果</span><br><span class=\"line\"></span><br><span class=\"line\">                    if(ops.top() == &#x27;+&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        int right = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        int left = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        nums.push(left + right);</span><br><span class=\"line\"></span><br><span class=\"line\">                        ops.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;else if(ops.top() == &#x27;-&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        int right = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        int left = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        nums.push(left - right);</span><br><span class=\"line\"></span><br><span class=\"line\">                        ops.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\telse//遇到数字</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t//遇到数字左边也是数字，那就将参数栈顶弹出，与当前数字组成更大的数，然后再压入</span><br><span class=\"line\"></span><br><span class=\"line\">                if(i&gt;0 &amp;&amp;  s[i-1] &gt;= &#x27;0&#x27; &amp;&amp; s[i-1] &lt;= &#x27;9&#x27; )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        int v = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        v = v*10 + (s[i] - &#x27;0&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">                        nums.push(v);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">\t\t\t\t//直接压入</span><br><span class=\"line\"></span><br><span class=\"line\">                    nums.push(s[i] - &#x27;0&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">\t\t\t\t//遇到数字右边也是数字，那么先不取符号栈中的符号进行运算，继续遍历</span><br><span class=\"line\">                if(i+1&lt;s.length() &amp;&amp;  s[i+1] &gt;=&#x27;0&#x27; &amp;&amp; s[i+1] &lt;= &#x27;9&#x27; )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">\t\t\t\t\t//参数参加计算得到新参数</span><br><span class=\"line\">                    if(!ops.empty())&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        if(ops.top() == &#x27;+&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            int right = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                            int left = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                            nums.push(left + right);</span><br><span class=\"line\"></span><br><span class=\"line\">                            ops.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;else if(ops.top() == &#x27;-&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                            int right = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                            int left = nums.top();nums.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                            nums.push(left - right);</span><br><span class=\"line\"></span><br><span class=\"line\">                            ops.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">        return nums.top(); </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二叉搜索树\"><a class=\"anchor\" href=\"#二叉搜索树\">#</a> 二叉搜索树</h2>\n<p>性质一： 二叉搜索树的中序遍历是递增序列</p>\n<h4 id=\"由一个递增序列构建二叉搜索树\"><a class=\"anchor\" href=\"#由一个递增序列构建二叉搜索树\">#</a> 由一个递增序列构建二叉搜索树</h4>\n<p>使用递归法构建 BST 树<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TreeNode* buildBinarySearchTree(Vector&lt;int&gt;&amp; nums)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return buildBinarySearchTree(nums,0,nums.size()-1);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">TreeNode* buildBinarySearchTree(Vector&lt;int&gt;&amp; nums, int left,int right)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(left &gt; right)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">    int mid = (right - left) / 2 + left;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode* node = new TreeNode(nums[mid]);</span><br><span class=\"line\"></span><br><span class=\"line\">    node-&gt;left = buildBinarySearchTree(nums,left, mid-1);</span><br><span class=\"line\"></span><br><span class=\"line\">    node-&gt;right = buildBinarySearchTree(nums,mid+1,right);</span><br><span class=\"line\"></span><br><span class=\"line\">    return node;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "C++",
                "数据结构",
                "树",
                "BFS"
            ]
        }
    ]
}