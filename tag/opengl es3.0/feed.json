{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く • All posts by \"opengl es3.0\" tag",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/15/OpenGL-ES3-0-%E5%85%A5%E9%97%A8-%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2/",
            "url": "http://example.com/2022/04/15/OpenGL-ES3-0-%E5%85%A5%E9%97%A8-%E7%94%BB%E4%B8%89%E8%A7%92%E5%BD%A2/",
            "title": "OpenGL ES3.0 入门-画三角形",
            "date_published": "2022-04-14T17:56:26.000Z",
            "content_html": "<p>Android OpenGL ES3.0 入门</p>\n<h1 id=\"egl\"><a class=\"anchor\" href=\"#egl\">#</a> EGL</h1>\n<h2 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<p>选择的 EGL 版本为 EGL1.4 版本，对应了 AndroidSdk 中的  <code>EGL14</code> <br />\n 创建可以等到 Surface 初始化完成后进行，比如在 SurfaceHolder 的 surfaceCreate 方法中去初始化。<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> //必须要一个surface对象来创建窗口表面</span><br><span class=\"line\">fun initEGL(surface: Surface) : Boolean&#123;  4</span><br><span class=\"line\"></span><br><span class=\"line\">\t//第一步，获取一个EGLDisplay表面，用来建立与设备的窗口系统通信信道，建立连接</span><br><span class=\"line\">    egldisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);  </span><br><span class=\"line\">    if(egldisplay == EGL14.EGL_NO_DISPLAY)&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglGetDisplay fail $egldisplay&quot;)  </span><br><span class=\"line\">        return false  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  \t//初始化EGL，返回EGL的主版本号的次版本号</span><br><span class=\"line\">    if(!EGL14.eglInitialize( egldisplay,versions,0,versions,1))&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglInitialize fail $egldisplay&quot;)  </span><br><span class=\"line\">        return false  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    val config : Array&lt;EGLConfig?&gt; = arrayOfNulls(1)  </span><br><span class=\"line\">    var configNum = intArrayOf(EGL14.EGL_NONE)  </span><br><span class=\"line\">\t//选择设备窗口系统支持的EGL配置列表</span><br><span class=\"line\">    if(!EGL14.eglChooseConfig(egldisplay,configAttribe,0,  </span><br><span class=\"line\">            config,0,1, configNum,0)) &#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglChooseConfig fail $config&quot;)  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    if(config[0] == null)&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;config choose fail $config&quot;)  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">\t//创建一个窗口，作为屏幕上的渲染区域</span><br><span class=\"line\">    eglSurface = EGL14.eglCreateWindowSurface(egldisplay,config[0],surface,  </span><br><span class=\"line\">        intArrayOf(EGL14.EGL_NONE),0)  </span><br><span class=\"line\">    if(eglSurface == EGL14.EGL_NO_SURFACE)&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglCreateWindowSurface fail $eglSurface&quot;)  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">\t//创建渲染上下文</span><br><span class=\"line\">    val eglContext = EGL14.eglCreateContext(egldisplay,config[0],  </span><br><span class=\"line\">        EGL14.EGL_NO_CONTEXT,contextAttribe,0)  </span><br><span class=\"line\">    if(eglContext == EGL14.EGL_NO_CONTEXT)&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglCreateContext fail $eglContext&quot;)  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  \t//将上一步创建的上下文与渲染表面进行关联</span><br><span class=\"line\">    if(!EGL14.eglMakeCurrent(egldisplay,eglSurface,eglSurface,eglContext))&#123;  </span><br><span class=\"line\">        Log.d(TAG, &quot;eglMakeCurrent fail $egldisplay&quot;)  </span><br><span class=\"line\">        return false;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return true;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"运行\"><a class=\"anchor\" href=\"#运行\">#</a> 运行</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里是放在一个子线程的run方法体中，执行一个无限循环去渲染OpenGL ES3.0API输出的数据。</span><br><span class=\"line\">override fun run() &#123;  </span><br><span class=\"line\">    super.run()  </span><br><span class=\"line\">    if(!init())&#123;  </span><br><span class=\"line\">        Log.d(TAG,&quot;EGL init fail&quot;)  </span><br><span class=\"line\">        return  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    try &#123;  </span><br><span class=\"line\">        while (true)&#123;  </span><br><span class=\"line\">            for(draw in drawers)&#123;  </span><br><span class=\"line\">                draw.draw()  </span><br><span class=\"line\">                swapBuffer(egldisplay,eglSurface)  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            sleep(20)  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;catch (e:Exception)&#123;  </span><br><span class=\"line\">        e.printStackTrace()  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    for(draw in drawers)&#123;  </span><br><span class=\"line\">        draw.release()  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private fun swapBuffer (display: EGLDisplay,surface:EGLSurface)&#123;  </span><br><span class=\"line\">    EGL14.eglSwapBuffers(display,surface)  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"opengl-es30\"><a class=\"anchor\" href=\"#opengl-es30\">#</a> OpenGL ES3.0</h1>\n",
            "tags": [
                "OpenGL ES3.0"
            ]
        }
    ]
}