{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く • All posts by \"exoplayer\" tag",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/03/26/ExoPlayer-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%881%EF%BC%89/",
            "url": "http://example.com/2022/03/26/ExoPlayer-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%881%EF%BC%89/",
            "title": "ExoPlayer 源码解析（1）",
            "date_published": "2022-03-26T10:52:40.000Z",
            "content_html": "<h1 id=\"start\"><a class=\"anchor\" href=\"#start\">#</a> Start</h1>\n<h2 id=\"1exoplayer起播时序图\"><a class=\"anchor\" href=\"#1exoplayer起播时序图\">#</a> 1.ExoPlayer 起播时序图</h2>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/b5348f57gy1h0oaiq9lpej21e313iqpe.jpg\" alt=\"ExoPlayer播放.drawio\" /></p>\n<h2 id=\"2exoplayer的初始化\"><a class=\"anchor\" href=\"#2exoplayer的初始化\">#</a> 2.ExoPlayer 的初始化</h2>\n<p>先看看 ExoPlayer 的初始化</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected StyledPlayerView playerView;</span><br><span class=\"line\">private DataSource.Factory dataSourceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">void onCreate(@Nullable Bundle savedInstanceState)&#123;</span><br><span class=\"line\">\t//创建</span><br><span class=\"line\">\tdataSourceFactory = DemoUtil.getDataSourceFactory(/* context= */ this);</span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t//获取在XML中声明的StyledPlayerView对象</span><br><span class=\"line\">\tplayerView = findViewById(R.id.player_view);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化ExoPlayer</span><br><span class=\"line\">void initializePlayer()&#123;</span><br><span class=\"line\">\t//创建播放媒体列表对象</span><br><span class=\"line\">\tmediaItems = createMediaItems(intent);</span><br><span class=\"line\">\t//创建渲染器工厂对象</span><br><span class=\"line\">\tRenderersFactory renderersFactory =  </span><br><span class=\"line\">   DemoUtil.buildRenderersFactory(/* context= */ this, preferExtensionDecoders);</span><br><span class=\"line\">\t//创建媒体通道选择器对象</span><br><span class=\"line\">\ttrackSelector = new DefaultTrackSelector(/* context= */ this);</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t//创建ExoPlayer对象</span><br><span class=\"line\">\tplayer =  new ExoPlayer.Builder(/* context= */ this)  </span><br><span class=\"line\">       \t.setRenderersFactory(renderersFactory)  //设置渲染器工厂对象  </span><br><span class=\"line\">       \t.setMediaSourceFactory(createMediaSourceFactory())    //设置媒体源工厂对象  </span><br><span class=\"line\">       \t.setTrackSelector(trackSelector)    //设置媒体通道选择器  </span><br><span class=\"line\">       \t.build();</span><br><span class=\"line\">\tplayer.setTrackSelectionParameters(trackSelectionParameters);</span><br><span class=\"line\">\t//设置播放器事件回调</span><br><span class=\"line\">\tplayer.addListener(new PlayerEventListener());  </span><br><span class=\"line\">\t//设置音频参数</span><br><span class=\"line\">\tplayer.setAudioAttributes(AudioAttributes.DEFAULT, /* handleAudioFocus= */ true);  </span><br><span class=\"line\">\t//设置是否自动开始播放</span><br><span class=\"line\">\tplayer.setPlayWhenReady(startAutoPlay);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tplayer.prepare();</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>上面就是 ExoPlayer 的播放代码，总结一下播放的流程：</p>\n<ol>\n<li>创建 DataSource.Factory 工厂对象</li>\n<li>创建 StyledPlayerView 播放器 UI 对象</li>\n<li>创建 RenderersFactory 对象</li>\n<li>创建 MediaSource.Factory 对象</li>\n<li>创建 TrackSelector 对象</li>\n<li>通过 ExoPlayer.Builder 对象构造 ExoPlayer 对象</li>\n<li>添加播放器事件回调，设置默认音频参数</li>\n<li>设置是否自动开始播放</li>\n<li>开始起播</li>\n</ol>\n<h2 id=\"3重要的对象\"><a class=\"anchor\" href=\"#3重要的对象\">#</a> 3. 重要的对象</h2>\n<ol>\n<li>\n<p>DataSource.Factory<br />\nDataSource.Factory 是负责创建 DataSource 对象的工厂类</p>\n</li>\n<li>\n<p>DataSource 代表 Uri 识别的数据源，根据不同的协议从不同媒体介质中获取视频数据流<br />\n下面是 ExoPlayer 实现了的数据源类型<br />\n<img data-src=\"https://tvax3.sinaimg.cn/large/b5348f57gy1h0oajo70wvj20xz0pdb0a.jpg\" alt=\"DataSource实现类\" /></p>\n</li>\n<li>\n<p>StyledPlayerView<br />\n 播放器 UI 对象，包含了视频 UI，控制器 UI，字幕，专辑等</p>\n</li>\n<li>\n<p>RenderersFactory<br />\nRenderersFactory 是负责创建 Renderer 的工厂对象。</p>\n</li>\n<li>\n<p>Renderer 渲染器<br />\n ExoPlayer 定义了 6 种 Renderer 对象：</p>\n</li>\n</ol>\n<ul>\n<li>VideoRenderer    视频渲染器，负责视频渲染，实现类有 MediaCodecVideoRenderer，还有 ffmpeg 扩展</li>\n<li>AudioRenderer   音频渲染器</li>\n<li>TextRenderer  字幕渲染器</li>\n<li>MetadataRenderer  视频元数据渲染器</li>\n<li>CameraMotionRenderer  相机动作渲染器，CameraMotionRenderer 是处理相机拍摄的视频播放时，相机在物理上可能会有旋转动作，导致相机拍摄的视频也会产生 rotation，所以在播放相机拍摄的视频时需要解析视频中的 rotation 属性，然后在 OpenGL ES 渲染的时候，将窗口进行旋转，使画面恢复正常方向。</li>\n<li>MiscellaneousRenderer  混合渲染器 ，Google 暂时没有实现该渲染器，应该是留作扩展用。<br />\n<img data-src=\"https://tvax4.sinaimg.cn/large/b5348f57gy1h0oak2u83fj20y80ieasz.jpg\" alt=\"Renderer实现类\" /></li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>MediaSource.Factory<br />\nMediaSource.Factory 是负责构造 MediaSource 对象的工厂类</p>\n</li>\n<li>\n<p>MediaSource 媒体源，ExoPlayer 使用 MediaSource 实现了多视频播放逻辑，还有不停了流媒体协议类型等。<br />\nExoPlayer 预定义的 MediaSource 类型：<br />\n<img data-src=\"https://tva2.sinaimg.cn/large/b5348f57gy1h0oakcx1ssj20xi0exk6h.jpg\" alt=\"MediaSource实现类\" /></p>\n</li>\n<li>\n<p>TrackSelector<br />\n 选择器：</p>\n</li>\n</ol>\n<ul>\n<li>媒体流：用于在播放时选择容器中封装的的不同的视频、音频通道，比如在 HLS\\DASH 流播放时根据网络带宽，设备性能选择不同分辨率的流。</li>\n<li>通道：播放时根据情况选择视频中不同的视频 \\ 音频 \\ 字幕通道。</li>\n</ul>\n<h1 id=\"end\"><a class=\"anchor\" href=\"#end\">#</a> End</h1>\n<p>这里先粗略分析了一下 ExoPlayer 大致播放流程，还有部分的类的介绍，后面再根据情况对不同模块进行分析。</p>\n",
            "tags": [
                "Android",
                "多媒体",
                "ExoPlayer"
            ]
        }
    ]
}