{
    "version": "https://jsonfeed.org/version/1",
    "title": "花咲く • All posts by \"插件化\" tag",
    "description": "编程笔记 & 学渣的自救",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/04/04/PathClassLoader%E4%B8%8EDexClassLoader-%E8%A7%A3%E6%9E%90/",
            "url": "http://example.com/2022/04/04/PathClassLoader%E4%B8%8EDexClassLoader-%E8%A7%A3%E6%9E%90/",
            "title": "PathClassLoader与DexClassLoader 解析",
            "date_published": "2022-04-04T15:06:50.000Z",
            "content_html": "<h1 id=\"未完\"><a class=\"anchor\" href=\"#未完\">#</a> 未完</h1>\n<h2 id=\"java中的classloader\"><a class=\"anchor\" href=\"#java中的classloader\">#</a> Java 中的 ClassLoader</h2>\n<p>在 Java 中，类加载器的作用是通过一个类的全限定名获取描述这个类的二进制字节流，然后加载到虚拟机中生成类对象并提供引用。<br />\n对 Java 虚拟机来说，类加载器可以分为 2 中：</p>\n<ul>\n<li>启动类加载器。由 C++ 代码实现，是 Java 虚拟机的一部分</li>\n<li>其他加载器。由 Java 代码实现，独立于虚拟机，并且全都继承自 java.lang.ClassLoader 这个类。</li>\n</ul>\n<p>对于我们开发人员来说，类加载器由 3 种：</p>\n<ul>\n<li>bootstrap ClassLoader</li>\n<li>Extension ClassLoader 加载指定扩展包中的类</li>\n<li>Application ClassLoader  加载 ClassPath 指定路径上的类</li>\n</ul>\n<h2 id=\"双亲委派模型\"><a class=\"anchor\" href=\"#双亲委派模型\">#</a> 双亲委派模型</h2>\n<p>双亲委派模型是一种类加载的模型，是被推荐使用的类加载模型。双亲委派模型的定义是每次去加载一个类时，先判断这个类是否加载过，如果没有加载过，那么判断有没有父类加载器，如果有父类加载器，那么先调用父类加载器的加载方法；如果父类加载器加载失败，那么就调用当前类加载器。</p>\n<p>使用双亲委派模型的好处：<br />\n使 Java 类与 Java 类加载器一起产生了优先级层次，保证了同一个类始终由一个类加载器去加载。</p>\n<p>双亲委派模型的实现：<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">protected synchronized Class&lt;?&gt; loadClass(Stirng name,boolean resolve) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\tClass c = findLoadedClass(name);</span><br><span class=\"line\">\tif(c == null)&#123;</span><br><span class=\"line\">\t\ttry&#123;</span><br><span class=\"line\">\t\t\tif(parent != null)&#123;</span><br><span class=\"line\">\t\t\t\t//父类加载器存在，继续调用父类加载器的loadClass方法</span><br><span class=\"line\">\t\t\t\tc = parent.loadClass(name,false);</span><br><span class=\"line\">\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t//父类加载器不存在，调用启动类加载器去加载</span><br><span class=\"line\">\t\t\t\tc = findBootstrapClassOrNull(name);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; catch (ClassNotFoundException e)&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//如果父类加载器和启动类加载器都加载失败，使用当前类加载器去加载</span><br><span class=\"line\">\t\tif ( c == null )&#123;</span><br><span class=\"line\">\t\t\tc = findClass(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(resolve)&#123;</span><br><span class=\"line\">\t\tresolveClass(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"android-dalvik虚拟机中的类加载器\"><a class=\"anchor\" href=\"#android-dalvik虚拟机中的类加载器\">#</a> Android Dalvik 虚拟机中的类加载器</h2>\n<h3 id=\"basedexclassloader\"><a class=\"anchor\" href=\"#basedexclassloader\">#</a> BaseDexClassLoader</h3>\n<p>一个基于 Dex 的通用功能的 ClassLoader 实现，其核心代码如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java</span><br><span class=\"line\">Class BaseDexClassLoader extends ClassLoader&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate final DexPathList pathList;</span><br><span class=\"line\">\t//一个ClassLoader数组，用来加载pathList pathList中可能依赖的类和资源，用来实现\t</span><br><span class=\"line\">\t//Android中的AndroidManifest.xml中&lt;use-library&gt;标签中的库</span><br><span class=\"line\">\tprotected final ClassLoader[] sharedLibraryLoaders;</span><br><span class=\"line\">\tprotected final ClassLoader[] sharedLibraryLoadersAfter;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic BaseDexClassLoader(String dexPath,String librarySearchPath,</span><br><span class=\"line\">\t\tClassLoader parent,ClassLoader[] sharedLibraryLoaders,</span><br><span class=\"line\">\t\tClassLoader[] sharedLibraryLoadersAfter,boolean isTrust)&#123;</span><br><span class=\"line\">\t\tsuper(parent);</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tthis.pathList = new DexPathList(this,dexPath,librarySearchPath,null,isTrust);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprotected synchronized Class&lt;?&gt; findClass(Stirng name,boolean resolve) throws ClassNotFoundException &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tif(sharedLibraryLoaders != null)&#123;</span><br><span class=\"line\">\t\t\tfor(ClassLoader loader : sharedLibraryLoaders)&#123;</span><br><span class=\"line\">\t\t\t\ttry&#123;</span><br><span class=\"line\">\t\t\t\t\treturn loader.loadClass(name);</span><br><span class=\"line\">\t\t\t\t&#125;catch(ClassNotFoundException ignore)&#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tList&lt;Throwable&gt; suppressedExceptions = new ArrayList&lt;Throwable&gt;();</span><br><span class=\"line\">\t\tClass c = dexPath.findClass(name,suppressedExceptions);</span><br><span class=\"line\">\t\tif(c == null)&#123;</span><br><span class=\"line\">\t\t\treturn c;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(sharedLibraryLoadersAfter != null)&#123;</span><br><span class=\"line\">\t\t\tfor(ClassLoader loader : sharedLibraryLoadersAfter)&#123;</span><br><span class=\"line\">\t\t\t\ttry&#123;</span><br><span class=\"line\">\t\t\t\t\treturn loader.loadClass(name);</span><br><span class=\"line\">\t\t\t\t&#125;catch(ClassNotFoundException ignore)&#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif(c == null)&#123;</span><br><span class=\"line\">\t\t\tthrow new ClassNotFoundException();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>从上面可以看出，BaseDexClassLoader 并没有遵守 Java 的双亲委托模型。</p>\n<p>BaseDexClassLoader 将代码加载又委托给了 DexPathList 来进行加载。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span><br><span class=\"line\">class DexPathList&#123;</span><br><span class=\"line\">\tElement[] dexElements;</span><br><span class=\"line\">\tpublic DexPathList(...)&#123;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t\tdexElement = makePathElements(spliteDexPath(dexPath)</span><br><span class=\"line\">\t\t\t,null,null,classLoader,\tisTrust);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//这里有关于热修复实现的知识点，就是将补丁 dex 文件放到 dexElements 数组靠前位置，</span><br><span class=\"line\">\t//这样在加载 class 时，优先找到补丁包中的 dex 文件，加载到 class 之后就不再寻找，从</span><br><span class=\"line\">\t//而原来的 apk 文件中同名的类就不会再使用，从而达到修复的目的</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Class&lt;?&gt; findClass(String name,List&lt;Throwable&gt; suppressed)&#123;</span><br><span class=\"line\">\t\tfor(Element element : dexElements)&#123;</span><br><span class=\"line\">\t\t\tClass&lt;?&gt; clazz = element.findClass(name,classLoader,suppressed);</span><br><span class=\"line\">\t\t\tif(clazz != null)&#123;</span><br><span class=\"line\">\t\t\t\treturn clazz;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn null;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static Element[] makeDexElements(List&lt;File&gt; files,File optimizedDictionary,List&lt;IOException&gt; suppressedExceptions,ClassLoader classloader,boolean isTrusted)&#123;</span><br><span class=\"line\">\t\tElement[] elements = new Element[files.size()];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor(Files file : files)&#123;</span><br><span class=\"line\">\t\t\tif(file.isDictionary())&#123;</span><br><span class=\"line\">\t\t\t\telements[elementsPos++] = new Element(file);</span><br><span class=\"line\">\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\tif(file.isFile())&#123;</span><br><span class=\"line\">\t\t\t\t\tDexFile dex = null;</span><br><span class=\"line\">\t\t\t\t\tif(file.path.endWith(&quot;.dex&quot;))&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdex = loadDexFile(file,optimizedDictionary,loader,elements);</span><br><span class=\"line\">\t\t\t\t\t\tif(dex != null)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\telements[elementsPos++] = new Element(dex,null);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t\t\tdex = loadDexFile(file,optimizedDictionary,loader,elements);</span><br><span class=\"line\">\t\t\t\t\t\tif(dex == null)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\telements[elementsPos++] = new Element(file);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\telements[elementsPos++] = new Element(dex,file);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn elements;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate static DexFile loadDexPath(File file,File optimizedDictionary,ClassLoader loader,Element[] elements)&#123;</span><br><span class=\"line\">\t\tif(optimizeDictory == null)&#123;</span><br><span class=\"line\">\t\t\treturn new DexFile(file,loader,elements);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t//创建一个文件，路径为optimizedDictionary指定文件夹内，file同名的文件。</span><br><span class=\"line\">\t\t\tString optimizedPath = optimizedPathFor(file,optimizedDictionary);</span><br><span class=\"line\">\t\t\t...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//libcore/dalvik/src/main/java/dalvik/system/DexFile.java</span><br><span class=\"line\"></span><br><span class=\"line\">final Class DexFile&#123;</span><br><span class=\"line\">\tprivate Object mCookie;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic DexFile(File file,ClassLoader loader,DexPathList.Element[] elements)&#123;</span><br><span class=\"line\">\t\tmCookie = openDexFile(...);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate static Object openDexFile()&#123;</span><br><span class=\"line\">\t\treturn openDexFileNative(...);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pathclassloader\"><a class=\"anchor\" href=\"#pathclassloader\">#</a> PathClassLoader</h3>\n<p>只能加载已经安装过的 Apk</p>\n<h3 id=\"dexclassloader\"><a class=\"anchor\" href=\"#dexclassloader\">#</a> DexClassLoader</h3>\n<p>可以加载 jar,apk,dex, 可以直接从 SD 卡加载未安装的 apk</p>\n",
            "tags": [
                "Android",
                "插件化",
                "Dalvik虚拟机"
            ]
        }
    ]
}